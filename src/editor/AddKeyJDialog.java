/*
 *  Armadillo Workflow Platform v1.0
 *  A simple pipeline system for phylogenetic analysis
 *  
 *  Copyright (C) 2009-2011  Etienne Lord, Mickael Leclercq
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package editor;

import configuration.Config;
import workflows.workflow_properties;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.util.Enumeration;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JTextField;
import javax.swing.plaf.basic.BasicComboBoxEditor;
import workflows.workflow_properties_dictionnary;


/**
 *
 * @author Etienne
 */
public class AddKeyJDialog extends javax.swing.JDialog {

    ////////////////////////////////////////////////////////////////////////////
    /// Variables

    
    workflow_properties properties;            //Pointer to a workflow_properties
    workflow_properties_dictionnary dict=new workflow_properties_dictionnary();

    ////////////////////////////////////////////////////////////////////////////
    /// Constructor

    public AddKeyJDialog(java.awt.Frame parent,workflow_properties properties) {
        super(parent, true);
        //-- Set variables
        initComponents();
        setIconImage(Config.image);
        Message("Please name this key","");
        this.properties=properties;
        //setKeywordList();
        //-- Set position and visibility
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension d = getSize();
        setLocation((screenSize.width-d.width)/2,
					(screenSize.height-d.height)/2);
        setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        CanceljButton = new javax.swing.JButton();
        AddjButton = new javax.swing.JButton();
        jStatusMessage = new javax.swing.JTextField();
        jComboBox2 = new javax.swing.JComboBox();

        setTitle("Add Key");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Add Key"));

        jLabel1.setText("Key Name");

        CanceljButton.setText("Cancel");
        CanceljButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CanceljButtonActionPerformed(evt);
            }
        });

        AddjButton.setText("Add");
        AddjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddjButtonActionPerformed(evt);
            }
        });

        jStatusMessage.setText("Info");
        jStatusMessage.setBorder(null);

        jComboBox2.setEditable(true);
        jComboBox2.setModel(new DefaultComboBoxModel(dict.getKeyword()));
        jComboBox2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        BasicComboBoxEditor comboBoxEditor=new BasicComboBoxEditor();
        comboBoxEditor.getEditorComponent().addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jComboBox2KeyPressed(evt);
            }
        });
        jComboBox2.setEditor(comboBoxEditor);
        jComboBox2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jComboBox2FocusGained(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jStatusMessage, javax.swing.GroupLayout.DEFAULT_SIZE, 501, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AddjButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CanceljButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addContainerGap(581, Short.MAX_VALUE))
                    .addComponent(jComboBox2, 0, 629, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CanceljButton)
                    .addComponent(AddjButton)
                    .addComponent(jStatusMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CanceljButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CanceljButtonActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_CanceljButtonActionPerformed

    private void AddjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddjButtonActionPerformed
       addKey();
    }//GEN-LAST:event_AddjButtonActionPerformed

    private void jComboBox2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboBox2FocusGained
        this.jComboBox2.setSelectedItem("");
    }//GEN-LAST:event_jComboBox2FocusGained


    ////////////////////////////////////////////////////////////////////////////
    /// Add

    private void addKey() {
        String keyname=(String)this.jComboBox2.getSelectedItem();
        Enumeration key=this.properties.keys();
        // Case 1. Check if key exists
        while (key.hasMoreElements()) {
            String tmpkey=(String)key.nextElement();
            if (tmpkey.equals(keyname)) {
                MessageError("This name already exists, please choose another.","");
                return; //Hack
            }
        }
        // Case 2. Create empty key
        properties.put(keyname, "");
        this.setVisible(false);
    }

 private void jComboBox2KeyPressed(java.awt.event.KeyEvent evt) {
 //Variables

       
        JTextField tf=(JTextField)evt.getComponent();
        String regex=tf.getText();
        //Config.log(regex);
        char c=evt.getKeyChar(); //Hack to catch V_ENTER key;

        DefaultComboBoxModel cm=(DefaultComboBoxModel)this.jComboBox2.getModel();
        // CAS 1 -  On a un texte on recherche dans la liste
        if (!regex.isEmpty()&&c!=KeyEvent.VK_ENTER) {
            this.jComboBox2.setPopupVisible(false);
            cm.removeAllElements(); //On enlève la liste courrante
            cm.addElement(regex);   //On rajoute l'élément en cour (REQUIS)
            //Config.log(regex);
            for (String s: dict.getSearchKeyword(regex)) { //Search function
                 cm.addElement(s);                
            }
            this.jComboBox2.setModel(cm);          //On replace la liste
            this.jComboBox2.setPopupVisible(true); //On affiche la liste
        }
        // CAS 2 - On a pas texte
        else if (regex.isEmpty()){
//            cm.removeAllElements();
//            for (String s:dict.getKeyword())
//                cm.addElement(s);
//            this.jComboBox2.setModel(cm);
//            this.jComboBox2.setPopupVisible(false);
        }
        // CAS 3 - On a appuyé sur ENTER
        else {
            this.jComboBox2.setPopupVisible(false);
            addKey();
            }
 }
 

     ///////////////////////////////////////////////////////////////////////////
    /// MESSAGE FONCTION

    /**
     * Affiche un message dans la status bar
     * La provenance peut être mise dans un tooltip
     * @param text Le texte
     * @param tooltip Le tooltip texte
     */
    void Message(String text, String tooltip) {
        this.jStatusMessage.setEnabled(true);
        this.jStatusMessage.setForeground(new java.awt.Color(0, 51, 153));
        this.jStatusMessage.setBackground(Color.WHITE);
        this.jStatusMessage.setToolTipText(tooltip);
        this.jStatusMessage.setText(text);
    }

    /**
     * Affiche un message d'erreur en rouge dans la status bar
     * La provenance peut être mise dans un tooltip
     * @param text Le texte
     * @param tooltip Le tooltip texte
     */
    void MessageError(String text, String tooltip) {
        this.jStatusMessage.setEnabled(true);
        this.jStatusMessage.setForeground(Color.RED);
        this.jStatusMessage.setBackground(Color.WHITE);
        this.jStatusMessage.setToolTipText(tooltip);
        this.jStatusMessage.setText(text);
    }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddjButton;
    private javax.swing.JButton CanceljButton;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jStatusMessage;
    // End of variables declaration//GEN-END:variables
    
}
