/*
 *  Armadillo Workflow Platform v1.0
 *  A simple pipeline system for phylogenetic analysis
 *  
 *  Copyright (C) 2009-2011  Etienne Lord, Mickael Leclercq
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package workflows;

import configuration.Config;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;
import workflows.armadillo_workflow.workflow_connector;

/**
 * This is an editor for the connector
 * @author Etienne Lord
 * @since July 2009
 */
public class ConnectorInfoJDialog extends javax.swing.JDialog {

    workflow_properties_dictionnary dict=new workflow_properties_dictionnary();
    workflow_connector connector;
    private int status=Config.status_idle;

    /** Creates new form ConnectorInfoJDialog */
    public ConnectorInfoJDialog(java.awt.Frame parent) {
        super(parent, true);
        initComponents();
         // Set position and title
        setIconImage(Config.image);
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension d = getSize();
         this.setAlwaysOnTop(true);
        setLocation((screenSize.width-d.width)/2,
					(screenSize.height-d.height)/2);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        ParentjLabel = new javax.swing.JLabel();
        ClosejButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        ConnectorjLabel = new javax.swing.JLabel();
        ConnectorNamejTextField = new javax.swing.JTextField();
        ConnectorNamejCheckBox1 = new javax.swing.JCheckBox();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        OutputjCheckBox = new javax.swing.JCheckBox();
        ConditionnaljCheckBox = new javax.swing.JCheckBox();
        InputAlljCheckBox = new javax.swing.JCheckBox();
        OutputAlljCheckBox = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        InputjTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        OutputjTextArea = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        InputOutputjTable = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jToolBar1 = new javax.swing.JToolBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Connector Properties");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Parent"));

        ParentjLabel.setText("Parent");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ParentjLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ParentjLabel)
        );

        ClosejButton.setText("Close");
        ClosejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClosejButtonActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        ConnectorjLabel.setText("Connector 0");

        ConnectorNamejTextField.setEnabled(false);
        ConnectorNamejTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ConnectorNamejTextFieldFocusLost(evt);
            }
        });

        ConnectorNamejCheckBox1.setText("Name");
        ConnectorNamejCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnectorNamejCheckBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ConnectorjLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(ConnectorNamejCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ConnectorNamejTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(ConnectorjLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ConnectorNamejCheckBox1)
                    .addComponent(ConnectorNamejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Information"));

        OutputjCheckBox.setText("Output");
        OutputjCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OutputjCheckBoxActionPerformed(evt);
            }
        });

        ConditionnaljCheckBox.setText("Conditionnal");
        ConditionnaljCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConditionnaljCheckBoxActionPerformed(evt);
            }
        });

        InputAlljCheckBox.setText("InputAll");
        InputAlljCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputAlljCheckBoxActionPerformed(evt);
            }
        });

        OutputAlljCheckBox.setText("OutputAll");
        OutputAlljCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OutputAlljCheckBoxActionPerformed(evt);
            }
        });

        jLabel1.setText("Input");

        InputjTextArea.setColumns(20);
        InputjTextArea.setRows(5);
        jScrollPane1.setViewportView(InputjTextArea);

        OutputjTextArea.setColumns(20);
        OutputjTextArea.setRows(5);
        jScrollPane2.setViewportView(OutputjTextArea);

        jLabel2.setText("Output");

        InputOutputjTable.setModel(new InputOutputTableModel2());
        InputOutputjTable.setAutoCreateRowSorter(true);
        InputOutputjTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                InputOutputjTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(InputOutputjTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(OutputjCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ConditionnaljCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(InputAlljCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(OutputAlljCheckBox))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OutputjCheckBox)
                    .addComponent(ConditionnaljCheckBox)
                    .addComponent(InputAlljCheckBox)
                    .addComponent(OutputAlljCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Properties", jPanel4);

        jTable1.setModel(new workflow_properties_TableModel());
        jTable1.setAutoCreateRowSorter(true);
        for (int i=0; i<jTable1.getColumnCount();i++) {
            TableColumn tm=jTable1.getColumnModel().getColumn(i);
            tm.setCellRenderer(new workflow_properties_cellRenderer());
        }
        jScrollPane3.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 387, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Parent Properties", jPanel5);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(343, Short.MAX_VALUE)
                .addComponent(ClosejButton)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ClosejButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ClosejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClosejButtonActionPerformed
        if (connector.parent.properties.isModified()) {
            String msg="<html><br>The properties were changed. Save them to disk?</html>";
            Object[] options = {"Yes","No", "Cancel"};
            int n = JOptionPane.showOptionDialog(this,msg,"Warning! Properties changed. Save?",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,options, options[0]);
            switch (n) {
                case 0: connector.parent.properties.save();
                        setStatus(Config.status_changed);
                        break;
                case 1: break;
                case 2: return;
            }
          }

        this.setVisible(false);
}//GEN-LAST:event_ClosejButtonActionPerformed

    private void OutputAlljCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OutputAlljCheckBoxActionPerformed
        boolean b=this.OutputAlljCheckBox.isSelected();
        String keyConnectorName="Connector"+connector.number;
        if (b) {
            connector.parent.properties.put("OutputAll", keyConnectorName);
        } else {
           if (connector.parent.properties.get("OutputAll").equals(keyConnectorName)) connector.parent.properties.remove("OutputAll");
        }
    }//GEN-LAST:event_OutputAlljCheckBoxActionPerformed

    private void InputOutputjTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_InputOutputjTableMouseClicked
        updateUI();
    }//GEN-LAST:event_InputOutputjTableMouseClicked

    private void OutputjCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OutputjCheckBoxActionPerformed
        boolean b=this.OutputjCheckBox.isSelected();
        String C="Connector"+connector.number+"Output";
        connector.setOutput(b);
        if (b) {
           connector.parent.properties.put(C, "True");
       } else {
            connector.parent.properties.remove(C);
       }
        updateUI();
    }//GEN-LAST:event_OutputjCheckBoxActionPerformed

    private void ConditionnaljCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConditionnaljCheckBoxActionPerformed
        boolean b=this.ConditionnaljCheckBox.isSelected();
        String C="Connector"+connector.number+"Conditional";
        connector.setConditional(b);
        if (b) {
           connector.parent.properties.put(C, "True");
        } else {
            connector.parent.properties.remove(C);
        }
        updateUI();
    }//GEN-LAST:event_ConditionnaljCheckBoxActionPerformed

    private void InputAlljCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputAlljCheckBoxActionPerformed
        boolean b=this.InputAlljCheckBox.isSelected();
        String keyConnectorName="Connector"+connector.number;
        if (b) {
            connector.parent.properties.put("InputAll", keyConnectorName);
        } else {
           if (connector.parent.properties.get("InputAll").equals(keyConnectorName)) connector.parent.properties.remove("InputAll");
        }
    }//GEN-LAST:event_InputAlljCheckBoxActionPerformed

    private void ConnectorNamejCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnectorNamejCheckBox1ActionPerformed
        String keyConnectorName="Connector"+connector.number;
        if (this.ConnectorNamejCheckBox1.isSelected()) {
            this.ConnectorNamejTextField.setEnabled(true);
            if (connector.parent.properties.isSet(keyConnectorName)) this.ConnectorNamejTextField.setText(connector.parent.properties.get(keyConnectorName));
        } else {
             connector.parent.properties.remove(keyConnectorName);
            this.ConnectorNamejTextField.setEnabled(false);
        }
}//GEN-LAST:event_ConnectorNamejCheckBox1ActionPerformed

    private void ConnectorNamejTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ConnectorNamejTextFieldFocusLost
       String keyConnectorName="Connector"+connector.number;
        if (this.ConnectorNamejCheckBox1.isSelected()) {
            connector.parent.properties.put(keyConnectorName,this.ConnectorNamejTextField.getText());
        }
}//GEN-LAST:event_ConnectorNamejTextFieldFocusLost

   /**
    * Preferred Way to set Visible this JDialog
    * @param connector
    */
   public void display(workflow_connector connector) {
        this.connector=connector;
        updateUI();
        //--No!
        //        boolean enabled=this.EditPropertiesjToggleButton.isSelected();
        //        this.InputOutputjTable.setEnabled(enabled);
        //        this.ConditionnaljCheckBox.setEnabled(enabled);
        //        this.OutputjCheckBox.setEnabled(enabled);
        //--Set everything disabled
        boolean enabled=true;
       
        this.OutputjTextArea.setEditable(enabled);
        this.InputjTextArea.setEditable(false);
        this.InputOutputjTable.setEnabled(enabled);
        this.ConditionnaljCheckBox.setEnabled(enabled);
        this.OutputjCheckBox.setEnabled(enabled);
        this.InputAlljCheckBox.setEnabled(enabled);
        this.OutputAlljCheckBox.setEnabled(enabled);
        this.setVisible(true);
   }

   private void updateUI() {
        String keyConnector="Connector"+connector.number;
        //--Parent properties table
        workflow_properties_TableModel tm=(workflow_properties_TableModel)this.jTable1.getModel();
        tm.setData(connector.parent.getProperties());
        tm.fireTableDataChanged();
        this.jTable1.setModel(tm);
        //--Connector properties table
        //--Table Input-Output
        InputOutputTableModel2 tm2=(InputOutputTableModel2)this.InputOutputjTable.getModel();
        //--Reset the table data
        tm2.setData(dict.getInputOutput());
        //--Set properties and connector for editing
        tm2.setProperties(connector.parent.getProperties());
        tm2.setProperties(connector);
        //--Table value
        for (InputOutput I:tm2.data) {
            if (connector.parent.getProperties().isSet(I.getInputOutput())) {
                String value=connector.parent.getProperties().get(I.getInputOutput());
                if (value.equals(keyConnector)||value.equals("True")) I.setSelected(true);
            } else I.setSelected(false);
        }
        tm.fireTableDataChanged();
        InputOutputjTable.setModel(tm2);
        //--Connector name
        String keyConnectorName="Connector"+connector.number;
        this.ConnectorNamejCheckBox1.setSelected(connector.parent.properties.isSet(keyConnectorName));
        this.ConnectorNamejTextField.setEnabled(connector.parent.properties.isSet(keyConnectorName));
            if (connector.parent.properties.isSet(keyConnectorName)) {
                this.ConnectorNamejTextField.setText(connector.parent.properties.get(keyConnectorName));
            } else {
                this.ConnectorNamejTextField.setText("");
            }
        //--InputAll
        if (connector.parent.properties.get("InputAll").equals(keyConnectorName)) {
            this.InputAlljCheckBox.setSelected(true);
        } else this.InputAlljCheckBox.setSelected(false);
        //--InputAll
        if (connector.parent.properties.get("OutputAll").equals(keyConnectorName)) {
            this.OutputAlljCheckBox.setSelected(true);
        } else this.OutputAlljCheckBox.setSelected(false);

        //--Connector and parent JLabel and info
        this.ConnectorjLabel.setText(keyConnector);
        this.ParentjLabel.setText(connector.parent.toString());
        this.ConditionnaljCheckBox.setSelected(connector.isConditional());
        this.OutputjCheckBox.setSelected(connector.isOutput());
        this.InputAlljCheckBox.setSelected(connector.isInputAll());
        this.OutputAlljCheckBox.setSelected(connector.isOutputAll());
        this.InputjTextArea.setText(toString(connector.getInput()));
        this.OutputjTextArea.setText(toString(connector.getOutput()));


   }

   ////////////////////////////////////////////////////////////////////////////
   /// Status
   
   /**
    * Get this Connector Editor status code
    * @return
    */
   public int getStatus() {
       return this.status;
   }

   /**
    * Preferred way to set this editor status code
    * Note: The code *SHOULD BE* one found in Config
    * @param code
    */
   public void setStatus(int code) {
       this.status=code;
   }
  /////////////////////////////////////////////////////////////////////////////
  /// Miscellanous function



   /**
    * Transforme a String Vector to a String representation
    * @param V
    * @return a String representing the elements of the Vector<String>
    */
   private String toString(Vector<String> V) {
       String s="";
       for (String stri:V) s+=stri+", ";
       return s;
   }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ClosejButton;
    private javax.swing.JCheckBox ConditionnaljCheckBox;
    private javax.swing.JCheckBox ConnectorNamejCheckBox1;
    private javax.swing.JTextField ConnectorNamejTextField;
    private javax.swing.JLabel ConnectorjLabel;
    private javax.swing.JCheckBox InputAlljCheckBox;
    private javax.swing.JTable InputOutputjTable;
    private javax.swing.JTextArea InputjTextArea;
    private javax.swing.JCheckBox OutputAlljCheckBox;
    private javax.swing.JCheckBox OutputjCheckBox;
    private javax.swing.JTextArea OutputjTextArea;
    private javax.swing.JLabel ParentjLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

}
