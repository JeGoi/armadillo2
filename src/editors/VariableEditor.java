/*
 *  Armadillo Workflow Platform v1.0
 *  A simple pipeline system for phylogenetic analysis
 *  
 *  Copyright (C) 2009-2011  Etienne Lord, Mickael Leclercq
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package editors;

import biologic.Alignment;
import biologic.Ancestor;
import biologic.Biologic;
import biologic.MultipleSequences;
import biologic.Output;
import biologic.Sequence;
import biologic.Tree;
import configuration.Config;
import configuration.excelAdapterTable;
import database.AbstractTreeModel;
import database.databaseFunction;
import editor.EditorInterface;
import editor.ForMutableTreeNode;
import editor.ForTableModel;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.imageio.ImageIO;
import javax.swing.tree.TreeSelectionModel;
import workflows.Workbox;
import workflows.workflow_properties;
import workflows.armadillo_workflow;
import workflows.armadillo_workflow.workflow_object;
import workflows.workflow_properties_dictionnary;

public class VariableEditor extends javax.swing.JDialog implements EditorInterface {

    databaseFunction df=new databaseFunction();
    Frame frame;
    workflow_properties properties;
    armadillo_workflow parent_workflow;
    workflow_properties_dictionnary dic=new workflow_properties_dictionnary();
    ////////////////////////////////////////////////////////////////////////////
    /// SELECTED VARIABLE

    ForMutableTreeNode selected=null;
     Vector<ForMutableTreeNode>dataTree=new Vector<ForMutableTreeNode>();

    ////////////////////////////////////////////////////////////////////////////
    // Constante
    // Search
    String lastSearch="";
    static final int MODE_ID=0;
    static final int MODE_ACCESSION=1;
    static final int MODE_DESC=2;
    static final int MODE_ALIASES=3;
    static final int MODE_ALL=4;
    static final int MODE_LENMORE=6;
    static final int MODE_LENLESS=7;

   /////////////////////////////////////////////////////////////////////////////
   /// Constructor

    public VariableEditor(java.awt.Frame parent, armadillo_workflow parent_workflow) {
        this.parent_workflow=parent_workflow;
        frame=parent;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox2 = new javax.swing.JComboBox();
        jProgressBar1 = new javax.swing.JProgressBar();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        NamejTextField = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jButton1 = new javax.swing.JButton();
        ClosejButton = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Variable editor");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel2.setText("Name");

        jButton4.setText("Rename");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(NamejTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton4))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel2)
                .addComponent(NamejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jButton4))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Possible variables"));

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTree1MouseClicked(evt);
            }
        });
        jTree1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTree1FocusGained(evt);
            }
        });
        jTree1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTree1KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTree1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 379, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jButton1.setText("<html><b>Ok</b></html>");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        ClosejButton.setText("Close");
        ClosejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClosejButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(ClosejButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 431, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ClosejButton)))
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addGap(69, 69, 69)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(34, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("Variable", jPanel5);

        jButton7.setText("?");
        jButton7.setToolTipText("Help / Informations");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton7)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTabbedPane1)
                        .addGap(17, 17, 17))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 568, Short.MAX_VALUE)
                .addGap(33, 33, 33))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ClosejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClosejButtonActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_ClosejButtonActionPerformed

    private void jTree1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTree1MouseClicked
       //--Display the selected variable in the Variable JTextField
       selected = (ForMutableTreeNode) this.jTree1.getLastSelectedPathComponent();      
        this.updateUI();
       //--TO DO HERE..Test variables
       
    }//GEN-LAST:event_jTree1MouseClicked

    private void jTree1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTree1KeyReleased
        //--Display the selected variable in the Variable JTextField
       selected = (ForMutableTreeNode) this.jTree1.getLastSelectedPathComponent();
       this.updateUI();
    }//GEN-LAST:event_jTree1KeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.setVisible(false);
       
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTree1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTree1FocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_jTree1FocusGained

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        properties.put("Name", this.NamejTextField.getText());
        parent_workflow.updateCurrentWorkflow(properties);
}//GEN-LAST:event_jButton4ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        HelpEditor help = new HelpEditor(this.frame, false, properties);
        help.setVisible(true);
}//GEN-LAST:event_jButton7ActionPerformed

    void updateUI() {
        if (!properties.getBoolean("Repeat")) {
            //--UI
            this.jTree1.setEnabled(true);
//            this.jTable1.setEnabled(true);
//            this.AddjButton.setEnabled(true);
//            this.Filter_ComboBox.setEnabled(true);
            //this.SelectUnselectSequence_jButton.setEnabled(true);
            //--Logic             
        } else {
           //--UI
           this.jTree1.setEnabled(false);
//           this.jTable1.setEnabled(false);
//           this.AddjButton.setEnabled(false);
//           this.Filter_ComboBox.setEnabled(false);
           //this.SelectUnselectSequence_jButton.setEnabled(false);
        }
    }

   


 
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ClosejButton;
    private javax.swing.JTextField NamejTextField;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton7;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables

    /**
     * 1. Create the tree model from the database table.
     * 2. Set the properties
     * tree1 is the first parent, tree2 the first child, etc..
     */
    public void createTree(){
        //--Set the tree and selection model
        ForMutableTreeNode tree1 = new ForMutableTreeNode("Possible variables","");
        tree1.setLeaf(false); 
        //--Is there any input
        //System.out.println(properties.getProperties());
        //--Detect the inputs of the Variable
        for (String type:workflow_properties_dictionnary.InputOutputType) {
             Integer id=properties.getInputID(type.toLowerCase());
             Vector<Integer>ids=properties.getInputID(type, null);
             if (ids.size()>0) {
                 //--List, according to type, the possible option
                 
                  ForMutableTreeNode parent=new ForMutableTreeNode(properties,type,""+id);
                  tree1.add(parent);
                  ForMutableTreeNode tree2 = (ForMutableTreeNode) tree1.getLastLeaf();
                  parent.setLeaf(false);
                 if (type.equalsIgnoreCase("Sequence")) {
                    Sequence obj=new Sequence(id);
                    //tree2.add(new ForMutableTreeNode(properties,"this",obj.toString()));
                    tree2.add(new ForMutableTreeNode(properties,"Name",obj.getName()));
                    tree2.add(new ForMutableTreeNode(properties,"Note",obj.getNote()));
                    tree2.add(new ForMutableTreeNode(properties,"Length",""+obj.getLen()));
                    tree2.add(new ForMutableTreeNode(properties,"Inverse (complement)",""));
                    tree2.add(new ForMutableTreeNode(properties,"Inverse",""));
                    //tree2.add(new ForMutableTreeNode(properties,"Number of gap",""));
                    tree2.add(new ForMutableTreeNode(properties,"Sequence",obj.getSequence()));
                    tree2.add(new ForMutableTreeNode(properties,"Composition (%)",""));
                    tree2.add(new ForMutableTreeNode(properties,"Type",obj.getSequence_type()));
                    tree2.add(new ForMutableTreeNode(properties,"Fasta",""+obj.getFasta()));
                    tree2.add(new ForMutableTreeNode(properties,"Phylip",""+obj.getPhylip()));
                 }
                 if (type.equalsIgnoreCase("MultipleSequences")) {
                    MultipleSequences obj=new MultipleSequences(id);
                    //tree2.add(new ForMutableTreeNode(properties,"this",obj.toString()));
                    tree2.add(new ForMutableTreeNode(properties,"Name",obj.getName()));
                    tree2.add(new ForMutableTreeNode(properties,"Note",obj.getNote()));
                    tree2.add(new ForMutableTreeNode(properties,"Length",""+obj.getSequenceSize()));
                    tree2.add(new ForMutableTreeNode(properties,"Number of intact column",""));
                    tree2.add(new ForMutableTreeNode(properties,"Number of sequences",""+obj.getNbSequence()));
                    tree2.add(new ForMutableTreeNode(properties,"Type",(obj.isAA()?"AA":obj.isDNA()?"DNA":obj.isRNA()?"RNA":"Undefined")));
                    tree2.add(new ForMutableTreeNode(properties,"Fasta",""+obj.getFasta()));
                    tree2.add(new ForMutableTreeNode(properties,"Phylip",""+obj.getPhylip()));

                    //tree2.add(new ForMutableTreeNode(properties,"Sequence with name",""));
                 }
                 if (type.equalsIgnoreCase("Alignment")) {
                     Alignment obj=new Alignment(id);
                    //tree2.add(new ForMutableTreeNode(properties,"this",obj.toString()));
                    tree2.add(new ForMutableTreeNode(properties,"Name",obj.getName()));
                    tree2.add(new ForMutableTreeNode(properties,"Note",obj.getNote()));
                    tree2.add(new ForMutableTreeNode(properties,"Length",""+obj.getSequenceSize()));
                    tree2.add(new ForMutableTreeNode(properties,"Type",(obj.isAA()?"AA":obj.isDNA()?"DNA":obj.isRNA()?"RNA":"Undefined")));
                    tree2.add(new ForMutableTreeNode(properties,"Number of intact column",""));
                    tree2.add(new ForMutableTreeNode(properties,"Number of sequences",""+obj.getNbSequence()));
                    tree2.add(new ForMutableTreeNode(properties,"Fasta",""+obj.getFasta()));
                    tree2.add(new ForMutableTreeNode(properties,"Phylip",""+obj.getPhylip()));
                 }
                   if (type.equalsIgnoreCase("Ancestor")) {
                     Ancestor obj=new Ancestor(id);
                    //tree2.add(new ForMutableTreeNode(properties,"this",obj.toString()));
                    tree2.add(new ForMutableTreeNode(properties,"Name",obj.getName()));
                    tree2.add(new ForMutableTreeNode(properties,"Note",obj.getNote()));
                    tree2.add(new ForMutableTreeNode(properties,"Length",""+obj.getSequenceSize()));
                    tree2.add(new ForMutableTreeNode(properties,"Type",(obj.isAA()?"AA":obj.isDNA()?"DNA":obj.isRNA()?"RNA":"Undefined")));
                    tree2.add(new ForMutableTreeNode(properties,"Number of intact column",""));
                    tree2.add(new ForMutableTreeNode(properties,"Number of sequences",""+obj.getNbSequence()));
                    tree2.add(new ForMutableTreeNode(properties,"Fasta",""+obj.getFasta()));
                    tree2.add(new ForMutableTreeNode(properties,"Phylip",""+obj.getPhylip()));
                 }
                 if (type.equalsIgnoreCase("Tree")) {
                    Tree obj=new Tree(id);
                    //tree2.add(new ForMutableTreeNode(properties,"this",obj.toString()));
                    tree2.add(new ForMutableTreeNode(properties,"Name",obj.getName()));
                    tree2.add(new ForMutableTreeNode(properties,"Note",obj.getNote()));
                 }
                 if (type.equalsIgnoreCase("MultipleTree")) {

                 }
                 if (type.equalsIgnoreCase("Text")) {

                 }
             }
        }



//        ForMutableTreeNode parent=new ForMutableTreeNode(properties,properties.getName(),"");
//             tree1.add(parent);
//                ForMutableTreeNode tree2 = (ForMutableTreeNode) tree1.getLastLeaf();
//                parent.setLeaf(false);
//                for (Object k:properties.keySet()) {
//                    String key=(String)k;
//                    //--Add if 1. Unusual type and 2. Not default properties
//                    if (!dic.isValidValue(key, properties.get(key))&&!key.startsWith("default")&&!key.startsWith("output_")&&!key.startsWith("input_")&&!key.startsWith("For_")) {
//                        ForMutableTreeNode n=new ForMutableTreeNode(properties,key, properties.get(key));
//                        String name=properties.getName()+"."+key;
//                        tree2.add(n);
//                    }
//                }
       
        AbstractTreeModel treeModel = new AbstractTreeModel(tree1);
        treeModel.setRoot(tree1);
        treeModel.reload();
        jTree1.setModel(treeModel);
        jTree1.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);

    }
    
   /////////////////////////////////////////////////////////////////////////////
   /// Main display
    
    public void display(workflow_properties properties) {
       this.properties=properties;
        initComponents();
        this.NamejTextField.setText(properties.getName());
        //excelAdapterTable myAd = new excelAdapterTable(jTable1);
        this.createTree();
        //Message("Note: Some variables might not be available if set to \"Default\".","");
        setIconImage(Config.image);
        //updateUI();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension d = getSize();
        setLocation((screenSize.width-d.width)/2,
					(screenSize.height-d.height)/2);
        this.setAlwaysOnTop(true);
        this.setVisible(true);
    }

     public void saveImage(String filename) {
        BufferedImage bi;
        try {
            bi = new Robot().createScreenCapture(this.getBounds()); 
            ImageIO.write(bi, "png", new File(filename));
            this.setVisible(false);
        } catch (Exception ex) {
           Config.log("Unable to save "+filename+" dialog image");
        }            
    }
    

//    public workflow_object getWorkflowObjectFromProperties(workflow_properties prop) {
//
//        return null;
//    }

}
