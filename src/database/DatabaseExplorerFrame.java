/*
 *  Armadillo Workflow Platform v1.0
 *  A simple pipeline system for phylogenetic analysis
 *  
 *  Copyright (C) 2009-2011  Etienne Lord, Mickael Leclercq
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DatabaseExplorer.java
 *
 * Created on 2009-08-10, 14:13:28
 */

package database;

import biologic.seqclasses.InformationJDialog;
import configuration.Config;
import configuration.Util;
import java.awt.Dimension;
import java.awt.event.ActionListener;
import javax.swing.event.PopupMenuListener;
import java.awt.Frame;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.event.PopupMenuEvent;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
/**
 *
 * @author bioinfo
 */
public class DatabaseExplorerFrame extends javax.swing.JFrame implements ActionListener, PopupMenuListener {

    ////////////////////////////////////////////////////////////////////////////
    /// Variables

    public databaseFunction df=new databaseFunction();
    //public database db = new database();
    Config config=new Config();
    //Workbox workbox=new Workbox();      //--Debug
    Frame frame=this.frame;
    CorrespondencesMaps cm = new CorrespondencesMaps();
    static ExplorerTreeMutableTreeNode node = null;
    TreeNode root;
    TreePath path;
    public static boolean treeSearch=false;
    public static boolean treeSearchComplete=false;


    ////////////////////////////////////////////////////////////////////////////
    //////// popup menu variables
    ///tree
    public JPopupMenu popup;
    public JMenuItem item;
    public boolean overRoot = false;
    public Point loc;
    public String keyword;
    private InformationJDialog loading;




    ////////////////////////////////////////////////////////////////////////////
    /// Main constructor

    @SuppressWarnings("static-access")
    public DatabaseExplorerFrame() {
        initComponents();
        this.setTitle("Database Explorer");
        this.setIconImage(Config.icon.getImage());
        this.setResizable(true);
        //hasmap to put right data in tree leafs
        for (int i=0;i<cm.tablesSQL.length;i++) {
            cm.treeNode.put(cm.tablesSQL[i], cm.selectForTreeLeafs[i]);
        }
        
        //hashmap to rename columns when selecting a node leaf in the table (in SQL)
        for (int i=0;i<cm.selectForTableModelColumnsRenamed.length;i++) {
            cm.tableNode.put(cm.tablesSQL[i],cm.selectForTableModelColumnsRenamed[i]);
        }
        //hashmap to have the link between renamed columns and original ones
        for (int i=0;i<cm.ColumnsSQLOriginal.length;i++) {
            cm.Columns.put(cm.ColumnsSQLAlias[i],cm.ColumnsSQLOriginal[i]);
        }
        //this.createTree(); //--Done in reload
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension d = getSize();
        setLocation((screenSize.width-d.width)/2,(screenSize.height-d.height)/2);

    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollBar1 = new javax.swing.JScrollBar();
        DatabaseExplorer_jPanel = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        search_jButton = new javax.swing.JButton();
        search_jTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        close_jButton = new javax.swing.JButton();
        display_jButton = new javax.swing.JButton();
        remove_jButton = new javax.swing.JButton();
        refresh_jButton = new javax.swing.JButton();
        jInfo1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();

        setTitle("Armadillo Main Database");

        DatabaseExplorer_jPanel.setBackground(new java.awt.Color(255, 255, 255));

        jTree.setModel(new AbstractTreeModel(null));
        jTree.setCellRenderer(new ExplorerTreeCellRenderer());
        jTree.setDragEnabled(true);
        jTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTreeMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTreeMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTreeMouseReleased(evt);
            }
        });
        jTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTreeValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTree);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
        );

        jSplitPane2.setLeftComponent(jPanel4);

        jTable1.setModel(new ExplorerTableModel());
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable1MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTable1MouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        jSplitPane2.setRightComponent(jScrollPane2);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        search_jButton.setText("Search");
        search_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_jButtonActionPerformed(evt);
            }
        });

        search_jTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                search_jTextFieldKeyPressed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 2, 11));
        jLabel1.setText("Search");

        jLabel3.setText("Note : You can use java-compatible regex for advanced query");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(search_jTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 674, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(search_jButton)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(search_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(search_jButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(jLabel3))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        close_jButton.setText("Close");
        close_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                close_jButtonActionPerformed(evt);
            }
        });

        display_jButton.setText("Display Details");
        display_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                display_jButtonActionPerformed(evt);
            }
        });

        remove_jButton.setText("Remove");
        remove_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remove_jButtonActionPerformed(evt);
            }
        });

        refresh_jButton.setBackground(new java.awt.Color(255, 255, 255));
        refresh_jButton.setForeground(new java.awt.Color(255, 255, 255));
        refresh_jButton.setIcon(new javax.swing.ImageIcon(config.imagePath()+"//reload.png"));
        refresh_jButton.setToolTipText("Refresf results");
        refresh_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refresh_jButtonActionPerformed(evt);
            }
        });

        jInfo1.setEditable(false);
        jInfo1.setBorder(null);

        jLabel2.setText("Informations");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(remove_jButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(display_jButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(refresh_jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 541, Short.MAX_VALUE)
                .addComponent(close_jButton))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jInfo1, javax.swing.GroupLayout.DEFAULT_SIZE, 737, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jInfo1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(close_jButton)
                        .addComponent(remove_jButton)
                        .addComponent(display_jButton))
                    .addComponent(refresh_jButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout DatabaseExplorer_jPanelLayout = new javax.swing.GroupLayout(DatabaseExplorer_jPanel);
        DatabaseExplorer_jPanel.setLayout(DatabaseExplorer_jPanelLayout);
        DatabaseExplorer_jPanelLayout.setHorizontalGroup(
            DatabaseExplorer_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DatabaseExplorer_jPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(DatabaseExplorer_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSplitPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 824, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        DatabaseExplorer_jPanelLayout.setVerticalGroup(
            DatabaseExplorer_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DatabaseExplorer_jPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jMenu2.setText("Database functions");

        jMenuItem3.setText("Re-Create database");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setText("Clean-Up database");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 844, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(DatabaseExplorer_jPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 603, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(DatabaseExplorer_jPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTreeMouseClicked

        if (SwingUtilities.isRightMouseButton(evt)){
            int row = getJTree().getClosestRowForLocation(evt.getX(), evt.getY());
            if (row>0) getJTree().setSelectionRow(row);
        }
        treeSelect();
        treePopup(evt);

        ExplorerTreeMutableTreeNode selectedNode = (ExplorerTreeMutableTreeNode) getJTree().getLastSelectedPathComponent();
        if(evt.getClickCount()>1&&selectedNode.isLeaf()) display();
}//GEN-LAST:event_jTreeMouseClicked

    private void jTreeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTreeMousePressed
        if (SwingUtilities.isRightMouseButton(evt)){
            int row = getJTree().getClosestRowForLocation(evt.getX(), evt.getY());
            if (row>0) getJTree().setSelectionRow(row);
        }
//        treeSelect();
        treePopup(evt);
}//GEN-LAST:event_jTreeMousePressed

    private void jTreeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTreeMouseReleased
        if (SwingUtilities.isRightMouseButton(evt)){
            int row = getJTree().getClosestRowForLocation(evt.getX(), evt.getY());
            if (row>0) getJTree().setSelectionRow(row);
        }
//        treeSelect();
        treePopup(evt);
}//GEN-LAST:event_jTreeMouseReleased

    private void jTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTreeValueChanged
        ExplorerTreeMutableTreeNode selectedNode = (ExplorerTreeMutableTreeNode) getJTree().getLastSelectedPathComponent();
        if (selectedNode!=null)
            if (selectedNode.isLeaf()&&!selectedNode.isTable()){
                ExplorerTreeMutableTreeNode leaf = selectedNode;
                node = (ExplorerTreeMutableTreeNode) selectedNode.getParent();
                this.setTableLeafContent(node, leaf);
            } else {
            node = (ExplorerTreeMutableTreeNode)selectedNode;
            this.setTableNodeContent(node);
            }
}//GEN-LAST:event_jTreeValueChanged

    private void refresh_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refresh_jButtonActionPerformed
        refreshTable();
        reloadTree();
}//GEN-LAST:event_refresh_jButtonActionPerformed

    private void remove_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remove_jButtonActionPerformed
        ExplorerTreeMutableTreeNode selectedNode = (ExplorerTreeMutableTreeNode) getJTree().getLastSelectedPathComponent();
        if (selectedNode==null){
            node.getType();
        }else node = selectedNode;
        Remove2();
    }//GEN-LAST:event_remove_jButtonActionPerformed

    private void display_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_display_jButtonActionPerformed
        display();
}//GEN-LAST:event_display_jButtonActionPerformed

    private void search_jTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search_jTextFieldKeyPressed
        char c=evt.getKeyChar(); //Hack to catch V_ENTER key;
        if (c==KeyEvent.VK_ENTER){
            keyword = this.search_jTextField.getText();
            search(keyword);
        }
}//GEN-LAST:event_search_jTextFieldKeyPressed

    private void search_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_jButtonActionPerformed
        keyword = this.search_jTextField.getText();
        search(keyword);
}//GEN-LAST:event_search_jButtonActionPerformed

    private void close_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_close_jButtonActionPerformed
       this.setVisible(false);
    }//GEN-LAST:event_close_jButtonActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if (evt.getClickCount()>1){
            display();
        }
        treePopup(evt);
    }//GEN-LAST:event_jTable1MouseClicked

    private void jTable1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MousePressed
        if (SwingUtilities.isRightMouseButton(evt)){
        }
        treePopup(evt);
    }//GEN-LAST:event_jTable1MousePressed

    private void jTable1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseReleased
        treePopup(evt);
    }//GEN-LAST:event_jTable1MouseReleased

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        int choice=JOptionPane.showConfirmDialog(null, "Are you sure you want to recreate the entire database?","Recreate "+df.db.dbFileName+"?",JOptionPane.YES_NO_OPTION);
        switch(choice) {
            case JOptionPane.OK_OPTION: recreateTable();break;
        }

    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        int choice=JOptionPane.showConfirmDialog(null, "Are you sure you want to clean-up the database?","Clean Up "+df.db.dbFileName+"?",JOptionPane.YES_NO_OPTION);
        switch(choice) {
            case JOptionPane.OK_OPTION: cleanupDatabase();break;
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    /////////////////////////////////////////////////////////////////////////
    /// Database function


    /**
     * Simple thread to load file into the project
     */
    private void recreateTable() {

       SwingWorker<Integer, Object> loadSwingWorker2=new SwingWorker<Integer, Object>() {
            String filename="";

            @Override
            protected Integer doInBackground() throws Exception {
                //We dont check for cancelled

                while (!isCancelled()) {
                    df.deleteAllTables();
                    setProgress(50);
                    df.createTables();
                    setProgress(90);
                    return 0;
                 }
                return 1;
            }

            @Override
            public void process(List<Object> chunk) {

            } //End process

            @Override
            public void done() {
                refreshTable();
                reloadTree();
                 setProgress(100);
                loading.setVisible(false);
             }

        }; //End SwingWorker definition

        loadSwingWorker2.addPropertyChangeListener(
                 new PropertyChangeListener() {
                    public  void propertyChange(PropertyChangeEvent evt) {
                        if ("progress".equals(evt.getPropertyName())) {
                            SwingWorker o = (SwingWorker)evt.getSource();
                            if (!o.isDone()) {
                                int progress=(Integer)evt.getNewValue();
                                loading.setProgress(progress);
                            }
                            else if (o.isDone()&&!o.isCancelled()) {
                               //Handled in done() fucntion in SwingWorker
                            }
                        }//End progress update
                 } //End populateNetworkPropertyChange
                 });
        //Finally. Show a load dialog :: Warning Work-In-Progress
        loading=new InformationJDialog(this, false, loadSwingWorker2,"");
        loading.setProgress(0); //Put 0% as the start progress
        loading.Message("Recreating database...", "");
        loadSwingWorker2.execute();


    }


     /**
     * Simple thread to load file into the project
     */
    private void cleanupDatabase() {

       SwingWorker<Integer, Object> loadSwingWorker2=new SwingWorker<Integer, Object>() {
            String filename="";

            @Override
            protected Integer doInBackground() throws Exception {
                //We dont check for cancelled

                while (!isCancelled()) {
                    df.execute("VACUUM;");
                    setProgress(100);
                    return 0;
                 }
                return 1;
            }

            @Override
            public void process(List<Object> chunk) {

            } //End process

            @Override
            public void done() {
                loading.setVisible(false);
             }

        }; //End SwingWorker definition

        loadSwingWorker2.addPropertyChangeListener(
                 new PropertyChangeListener() {
                    public  void propertyChange(PropertyChangeEvent evt) {
                        if ("progress".equals(evt.getPropertyName())) {
                            SwingWorker o = (SwingWorker)evt.getSource();
                            if (!o.isDone()) {
                                int progress=(Integer)evt.getNewValue();
                                loading.setProgress(progress);
                            }
                            else if (o.isDone()&&!o.isCancelled()) {
                               //Handled in done() fucntion in SwingWorker
                            }
                        }//End progress update
                 } //End populateNetworkPropertyChange
                 });
        //Finally. Show a load dialog :: Warning Work-In-Progress
        loading=new InformationJDialog(this, false, loadSwingWorker2,"");
        loading.setProgress(0); //Put 0% as the start progress
        loading.Message("Recreating database...", "");
        loadSwingWorker2.execute();


    }

    /////////////////////////////////////////////////////////////////////////
    ////// SEARCH FUNCTION
    public void search (String keyword){
        ArrayList <String> tableList = new ArrayList <String>();
        tableList = df.getTablesAtoZforTree();

        try {
            if (!keyword.isEmpty()) {
                ExplorerTreeMutableTreeNode tree1 = new ExplorerTreeMutableTreeNode("Search Results","",0);
                ExplorerTreeCellRenderer renderer = new ExplorerTreeCellRenderer();
                AbstractTreeModel treeModel = new AbstractTreeModel(tree1);
                tree1.removeAllChildren();
                int k=0;
                int l=0;
                boolean nextTable= false;

                for (int i = 0; i < tableList.size(); i++) {
                    int countResult=0;      //--Count Search result
                    //--Parent node (each database table)
                    ExplorerTreeMutableTreeNode parent=new ExplorerTreeMutableTreeNode(tableList.get(i),tableList.get(i),0);
                    parent.setIsTable(true); //--Met que ce parent est une table
                    nextTable = true;        //--Set that we need to create a new node if the table has results
                    String query = String.format("select * from %s", tableList.get(i));
                    ResultSet rs = df.getDatabase().executeQuery(query);
                    while (rs.next()) {
                        ResultSetMetaData rsmd = rs.getMetaData();
                        Pattern  p;
                        try {
                            p= Pattern.compile(keyword, Pattern.CASE_INSENSITIVE);
                        }  catch(java.util.regex.PatternSyntaxException e) {return;}
                        for (int j = 1; j < rsmd.getColumnCount(); j++) {
                            String result = rs.getString(j);
                            if (result!=null){
                                Matcher m = p.matcher(result);
                                if (m.find()) {
                                    if (nextTable){
                                        tree1.add(parent);
                                        l++;
                                        if (l>1) k++;
                                    }
                                    countResult++;
                                    ExplorerTreeMutableTreeNode tree2 = (ExplorerTreeMutableTreeNode) tree1.getChildAt(k);
                                    String value = cm.treeNode.get(tree2.getType());
                                    String selectField=(value==null?"":value);
                                    tree2.add(new ExplorerTreeMutableTreeNode(rs.getString(selectField),tree2.getType(), 0));
                                    nextTable = false;
                                }
                            }
                        }
                    }
                    parent.setCountResult(countResult);

                }
                //--Affiche l'arbre
                treeModel.setRoot(tree1);
                treeModel.reload();
                getJTree().setModel(treeModel);
                getJTree().setCellRenderer(renderer);
                treeSearch=true;
            } else reloadTree();
        } catch (Exception e) {
            e.printStackTrace();
            Config.log("Unable to get tables");
            reloadTree();
        }
    }


    ///////////////////////////////////////////////////////////////////////////
    /// TAB Database explorer


    /**
     * Check if the selected node is a leaf or parent
     */
    public void treeSelect(){
        ExplorerTreeMutableTreeNode selectedNode = (ExplorerTreeMutableTreeNode) getJTree().getLastSelectedPathComponent();
        if (selectedNode!=null)
            if (selectedNode.isLeaf()&&!selectedNode.isTable()){
                ExplorerTreeMutableTreeNode leaf = selectedNode;
                node = (ExplorerTreeMutableTreeNode) selectedNode.getParent();
                this.setTableLeafContent(node, leaf);
            } else {
                node = (ExplorerTreeMutableTreeNode) selectedNode;
                this.setTableNodeContent(node);
            }
    }
    
    /**
     * Create the tree model from the database table.
     * tree1 is the first parent, tree2 the first child, etc..
     */
    public void createTree(){
        ExplorerTreeMutableTreeNode tree1 = new ExplorerTreeMutableTreeNode("Database Content","",0);
        for (String s:df.getTablesAtoZforTree()) {
            ExplorerTreeMutableTreeNode parent=new ExplorerTreeMutableTreeNode(s,s,0);
            tree1.add(parent);
            parent.setIsTable(true); //--Set as parent node
            ExplorerTreeMutableTreeNode tree2 = (ExplorerTreeMutableTreeNode) tree1.getLastLeaf();
            if (df.checkTableContent(s)){
                this.setTreeNodeContent(tree2);
            }
        }
        AbstractTreeModel treeModel = new AbstractTreeModel(tree1);
        treeModel.setRoot(tree1);
        treeModel.reload();
        getJTree().setModel(treeModel);
    }

    /**
     * show the content of the node in the table
     * @param node
     */
    public void setTableNodeContent(ExplorerTreeMutableTreeNode node){
        
        if (treeSearch) {
            try {
                String columns = cm.tableNode.get(node.getType());
                String column = cm.treeNode.get(node.getType());
                ExplorerTableModel qt = (ExplorerTableModel) this.jTable1.getModel();
                qt.data.clear();
                for (int i=0;i<node.getCountResult();i++){
                    ExplorerTreeMutableTreeNode leaf = (ExplorerTreeMutableTreeNode) node.getChildAt(i);
                    String row = leaf.getName();
                    String str = String.format("Select %s from %s where %s='%s';", columns, node.getType(), column, row);
                    ResultSet rs = df.executeQuery(str);
                    qt.setDataSearch(rs);
                }
                qt.fireTableStructureChanged();
                this.jTable1.setModel(qt);
                this.jTable1.changeSelection(0, 1, false, false);
                
            } catch (Exception e) {
                Config.log("Unable to access to database...");
            }
        } else {
             try {
                String columns = cm.tableNode.get(node.getType());
                String str = String.format("Select %s from %s;", columns, node.getType());
                ResultSet rs = df.executeQuery(str);
                ExplorerTableModel qt = (ExplorerTableModel) this.jTable1.getModel();
                qt.setData(rs);
                qt.fireTableStructureChanged();
                this.jTable1.setModel(qt);
                this.jTable1.changeSelection(0, 1, false, false);
            } catch (Exception e) {
                Config.log("Unable to access to database...");
            }
        }
    }

        /**
     * show the content of a selected leaf in the table
     * @param node
     */


    public void setTableLeafContent(ExplorerTreeMutableTreeNode node, ExplorerTreeMutableTreeNode leaf){
        String columns = cm.tableNode.get(node.getType());
        String column = cm.treeNode.get(node.getType());
        String str = String.format("Select %s from %s where %s='%s';",columns, node.getType(), column, leaf.getName());
        try {
            ResultSet rs = df.executeQuery(str);
            ExplorerTableModel qt = (ExplorerTableModel) this.jTable1.getModel();
            qt.setData(rs);
            qt.fireTableStructureChanged();
            this.jTable1.setModel(qt);
            this.jTable1.changeSelection(0, 1, false, false);
        } catch (Exception e) {
            Config.log("Unable to access to database...");
        }
    }

    /**
     * expand the tree
     * @param node
     */
    public void setTreeNodeContent(ExplorerTreeMutableTreeNode node){
        String value = cm.treeNode.get(node.getUserObject());
        String selectField=(value==null?"":value);

        String stri = String.format("select distinct %s from %s;", selectField,node.getType());
        Config.log(stri);
        int countResult=0;
        try {
            ResultSet rs = df.executeQuery(stri);
            while (rs.next()) {
                node.add(new ExplorerTreeMutableTreeNode(rs.getString(1),node.getType(), 0));
                countResult++;
            }
            node.setCountResult(countResult);
        } catch (Exception e) {
            Config.log("Unable to access database");
        }

    }



    public void reloadTree (){
        //->TO DO
//        new DatabaseExplorerFrame();
//        treeSearch=false;
//        String type = node.getType();
//        AbstractTreeModel d=(AbstractTreeModel)getJTree().getModel();
//        d.fireNewRoot();
//        d.reload();
//        createTree();
//        getJTree().expandPath(path);
//        getJTree().makeVisible(path);
//        node.setType(type);
        this.createTree();
    }

    public void refreshTable(){
        this.setTableNodeContent(node);
        ExplorerTableModel qt = (ExplorerTableModel) this.jTable1.getModel();
        qt.fireTableStructureChanged();
        this.jTable1.setModel(qt);
    }


    public void display (){
        int[] selectedRows = jTable1.getSelectedRows();
        for (int i=0; i<selectedRows.length;i++) {
            @SuppressWarnings("static-access")
            String columnName1 = cm.Columns.get(jTable1.getModel().getColumnName(0));
            if (columnName1==null) columnName1 = jTable1.getModel().getColumnName(0);
            String columnName2 = cm.Columns.get(jTable1.getModel().getColumnName(1));
            if (columnName2==null) columnName2 = jTable1.getModel().getColumnName(1);
            Object value1 = jTable1.getModel().getValueAt(selectedRows[i], 0);
            Object value2 = jTable1.getModel().getValueAt(selectedRows[i], 1);
            String str = String.format("Select * from %s where %s = '%s' AND %s = '%s';",node.getType(), columnName1, value1, columnName2, value2);
            ResultSet rs = df.executeQuery(str);
            DatabaseExplorerDisplayDialog dbexpl = new DatabaseExplorerDisplayDialog (this.frame, false, rs);
            dbexpl.setVisible(true);
        }
    }


    /**
     * Warning: Need to be included in databaseFunction
     * -Etienne
     * @deprecated
     */
    @Deprecated
    public void remove (){
        int[] selectedRows = jTable1.getSelectedRows();
        df.setAutoCommit(false);
        for (int i=0; i<selectedRows.length;i++) {
            String columnName1 = cm.Columns.get(jTable1.getModel().getColumnName(0));
            if (columnName1==null) columnName1 = jTable1.getModel().getColumnName(0);
            String columnName2 = cm.Columns.get(jTable1.getModel().getColumnName(1));
            if (columnName2==null) columnName2 = jTable1.getModel().getColumnName(1);
            Object value1 = jTable1.getModel().getValueAt(selectedRows[i], 0);
            Object value2 = jTable1.getModel().getValueAt(selectedRows[i], 1);
            String str = String.format("delete from %s where %s = '%s' AND %s = '%s';",node.getType(), columnName1, value1, columnName2, value2);
            df.execute(str);
        }
        df.setAutoCommit(true);
        this.message("selection(s) removed!", jInfo1);
        this.reloadTree();
        refreshTable();
    }


    ////////////////////////////////////////////////////////////////////////////
    /// HELPER FUNCTION

            /**
     * Affiche un message dans la status bar
     * La provenance peut être mise dans un tooltip
     * @param text Le texte
     * @param tooltip Le tooltip texte
     */
    void message(String text,JTextField jStatusMessage) {
        jStatusMessage.setForeground(new java.awt.Color(0, 51, 153));
        jStatusMessage.setText(text);
    }


    ///////////////////////////////////////////////////////////////////////////
    /// Table POPUP MENU (RIGHT CLIC)
    public void tablePopup(MouseEvent e){
        popup = new JPopupMenu();
        popup.setInvoker(this.jTable1);
        JMenu menu = new JMenu("Options");
        //JMenu menu2 = new JMenu("Options 2");
        popup.add(menu);
        menu.add(getMenuItem("Display details"));
        menu.add(getMenuItem("Remove"));
        popup.addPopupMenuListener(this);
        if(e.isPopupTrigger()) {
            loc = e.getPoint();
            Integer row  = jTable1.getSelectedRow();
            if(row == null) {
                return;
            }
            popup.show(jTable1, loc.x, loc.y);
        }
    }

    ///////////////////////////////////////////////////////////////////////////
    /// TREE POPUP MENU (RIGHT CLIC)
    public void treePopup(MouseEvent e){
        popup = new JPopupMenu();
        popup.setInvoker(getJTree());
        JMenu menu = new JMenu("Options");
        //JMenu menu2 = new JMenu("Options 2");
        popup.add(menu);
        menu.add(getMenuItem("Display details"));
        menu.add(getMenuItem("Remove"));
        popup.addPopupMenuListener(this);
        if(e.isPopupTrigger()) {
            loc = e.getPoint();
            TreePath path  = getJTree().getPathForLocation(loc.x, loc.y);
            if(path == null) {
                return;
            }
            TreeNode root = (TreeNode)getJTree().getModel().getRoot();
            overRoot = path.getLastPathComponent() == root;
            popup.show(getJTree(), loc.x, loc.y);
        }
    }

    private JMenuItem getMenuItem(String s) {
        JMenuItem menuItem = new JMenuItem(s);
        menuItem.addActionListener(this);
        return menuItem;
    }

    public JPopupMenu getPopup() {
        return popup;
    }

    public void actionPerformed(ActionEvent e) {
       String ac = e.getActionCommand();
       if(ac.equals("Display details")){
            display();
       }
        if(ac.equals("Remove")){
            remove();
        }

    }

    public void popupMenuWillBecomeVisible(PopupMenuEvent e) {}
    public void popupMenuCanceled(PopupMenuEvent e) {}
    public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {}


    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DatabaseExplorerFrame().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel DatabaseExplorer_jPanel;
    private javax.swing.JButton close_jButton;
    private javax.swing.JButton display_jButton;
    private javax.swing.JTextField jInfo1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTree jTree;
    private javax.swing.JButton refresh_jButton;
    private javax.swing.JButton remove_jButton;
    private javax.swing.JButton search_jButton;
    private javax.swing.JTextField search_jTextField;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the jTree
     */
    public javax.swing.JTree getJTree() {
        return jTree;
    }

    private void Remove2() {
        final int[] selectedRows = jTable1.getSelectedRows();
        final int size=selectedRows.length;

      SwingWorker<Integer, String> infoSwingWorker=new SwingWorker<Integer, String>()  {

       @Override
        protected Integer doInBackground() throws Exception {
            //--Commit only at the end...
            df.setAutoCommit(false);
            for (int i=0; i<selectedRows.length;i++) {
                String columnName1 = cm.Columns.get(jTable1.getModel().getColumnName(0));
                if (columnName1==null) columnName1 = jTable1.getModel().getColumnName(0);
                String columnName2 = cm.Columns.get(jTable1.getModel().getColumnName(1));
                if (columnName2==null) columnName2 = jTable1.getModel().getColumnName(1);
                Object value1 = jTable1.getModel().getValueAt(selectedRows[i], 0);
                Object value2 = jTable1.getModel().getValueAt(selectedRows[i], 1);
                String str = String.format("delete from %s where %s = '%s' AND %s = '%s';",node.getType(), columnName1, value1, columnName2, value2);
                String msg = String.format("Removing from %s where %s = '%s' AND %s = '%s';",node.getType(), columnName1, value1, columnName2, value2);
                df.execute(str);
                publish(msg);
                setProgress((i+1)*100/size);
            }
                 df.setAutoCommit(true);
            return 0;
            }

            @Override
            protected void process(List<String> chunks) {
                for (String s:chunks) loading.Message(s, "");
            }


           @Override
           protected void done(){
               loading.setVisible(false);
                message("selection(s) removed!", jInfo1);
                reloadTree();
                refreshTable();
                
           }

        }; //End SwingWorker declaration

        infoSwingWorker.addPropertyChangeListener(
                 new PropertyChangeListener() {
                    public  void propertyChange(PropertyChangeEvent evt) {
                     if ("progress".equals(evt.getPropertyName())) {
                            SwingWorker o = (SwingWorker)evt.getSource();
                            if (!o.isDone()) {
                                int progress=(Integer)evt.getNewValue();
                                loading.setProgress(progress);
                            }
                            else if (o.isDone()&&!o.isCancelled()) {
                               //Handled in done() fucntion in SwingWorker
                            }
                        }//End progress update
                 } //End populateNetworkPropertyChange
                 });
        loading=new InformationJDialog(this, false, infoSwingWorker, "Removing Element(s) form table...");
        loading.setProgress(0); //Put 0% as the start progress
        loading.Message("Removing "+size+" Element(s) from database...", "");
        infoSwingWorker.execute();
    }
}
