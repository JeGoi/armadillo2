/*
 *  Armadillo Workflow Platform v1.0
 *  A simple pipeline system for phylogenetic analysis
 *  
 *  Copyright (C) 2009-2011  Etienne Lord, Mickael Leclercq
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NewJFrame.java
 *
 * Created on 2009-10-21, 10:57:56
 */

package editor;

import biologic.Alignment;
import biologic.MultipleSequences;
import biologic.RunWorkflow;
import biologic.Sequence;
import biologic.Workflows;
import biologic.seqclasses.InformationJDialog;
import configuration.Config;
import database.databaseFunction;
import editors.BiologicEditor;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Toolkit;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Vector;
import javax.swing.SwingWorker;
import programs.kmeans;
import static tools.ToolJInternalFrame.df;
import tools.Toolbox;
import workflows.Workbox;
import workflows.armadillo_workflow;
import workflows.armadillo_workflow.workflow_object;
import workflows.workflow_properties;
import workflows.workflow_properties_dictionnary;

/**
 *
 * @author Lorde
 */
public class WorkflowExplorerJFrame extends javax.swing.JFrame {

    public static databaseFunction df = new databaseFunction();
    public static Config config=new Config();
    public static Workbox workbox=new Workbox();
    public static Toolbox toolbox=new Toolbox();
    public static  kmeans km=null;
    public static ArrayList<Integer> runworkflow_ids=new ArrayList<Integer>();
    public static HashMap<Integer,Workflows> workflows=new HashMap<Integer,Workflows>();
    SwingWorker<Integer, Integer> loadWorkflowSwingWorker=null;
    Frame frame;
    workflow_properties properties;
    armadillo_workflow parent_workflow;
    workflow_properties_dictionnary dic=new workflow_properties_dictionnary();
    private InformationJDialog loading;
    
    /** Creates new form NewJFrame */
    public WorkflowExplorerJFrame(java.awt.Frame parent) {
        this.frame=parent;
       
        initComponents();
        setIconImage(Config.image);
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension d = getSize();
        setLocation((screenSize.width-d.width)/2,(screenSize.height-d.height)/2);
        loading=new InformationJDialog(frame, false, null,"Loading...",false); 
        //--Load all workflows
      
        
    }

     public WorkflowExplorerJFrame() {
          initComponents();
     }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        RunWorkflowjList = new javax.swing.JList();

        setTitle("Workflow Explorer");

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setDoubleBuffered(true);

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new WorkflowExplorerTableModel());
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(jTable1);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Executed workflows"));

        RunWorkflowjList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        RunWorkflowjList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                RunWorkflowjListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(RunWorkflowjList);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 2000, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RunWorkflowjListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_RunWorkflowjListValueChanged
       
//--This will uptathe the table
        int currentRunWorkflows=runworkflow_ids.get(this.RunWorkflowjList.getSelectedIndex());
        RunWorkflow r=new RunWorkflow(currentRunWorkflows);        
        WorkflowExplorerTableModel tm=(WorkflowExplorerTableModel)this.jTable1.getModel();
         System.out.println("Here: "+currentRunWorkflows);
        tm.data.clear();
        for (int id:r.getExecution_workflow_id()) {            
            Workflows w=this.workflows.get(id);
            //System.out.println(w);
            tm.addData(w);
        }
        //--Load the different elemnent
        Workflows wk=this.workflows.get(r.getOriginal_workflow_id());
        wk.workflow=new armadillo_workflow();
        wk.StringToWorkflow();
        //--Extract object in workflow
        String[] qualifier=new String[wk.workflow.workflow.outputExecution().size()+2];
        qualifier[0]="Selected";
        qualifier[1]="Workflows";
        int index=2;        
        for (workflow_object obj:wk.workflow.workflow.outputExecution()) {            
            workflow_properties properties=obj.getProperties();                        
            //System.out.println(properties.get("ObjectType")+": "+properties.getName());
            qualifier[index++]=properties.get("ObjectType")+":"+properties.getName();
            //System.out.println(properties.Inputed());
             // System.out.println(properties.Outputed());
             // System.out.println("====");
              
        }
        tm.qualifier=qualifier;
        tm.fireTableStructureChanged();
         tm.fireTableDataChanged();
        this.jTable1.setModel(tm);         
    }//GEN-LAST:event_RunWorkflowjListValueChanged

    void loadWorkflow() {
        
        
        loadWorkflowSwingWorker=new SwingWorker<Integer, Integer>()  {

       
             
       @Override
        protected Integer doInBackground() throws Exception {
           int total=df.getAllWorkflowsID().size()-workflows.size();
           int total_done=0;
            if (total>0) {  
                   //Note: this is blocking, need to be async...          
                       Vector<Integer> wids=df.getAllWorkflowsID();
                        for (int id:wids) {
                            if (!workflows.containsKey(id)) {
                                Workflows w=df.getWorkflows(id);                                
                                workflows.put(w.getId(), w);
                                w.workflow=new armadillo_workflow();
                                
                                total_done++;
                                setProgress((total_done*100)/total);
                            }

                        }
                   }
            
            return 0;
            }

            @Override
            protected void process(List<Integer> chunks) {

            }

           @Override
           protected void done(){
               loading.setProgress(100);
               loading.setVisible(false);
               loading.setProgress(0);
             
           }

        }; //End SwingWorker declaration

        loadWorkflowSwingWorker.addPropertyChangeListener(
                 new PropertyChangeListener() {
                    public  void propertyChange(PropertyChangeEvent evt) {
                     if ("progress".equals(evt.getPropertyName())) {
                            SwingWorker o = (SwingWorker)evt.getSource();
                            if (!o.isDone()) {
                                int progress=(Integer)evt.getNewValue();
                                loading.setProgress(progress);
                            }
                            else if (o.isDone()&&!o.isCancelled()) {
                               //Handled in done() fucntion in SwingWorker
                            }
                        }//End progress update
                 } //End populateNetworkPropertyChange
                 });
       
         loading.setSwingWorker(loadWorkflowSwingWorker);
         loading.setTitle("Loading");
         loading.setProgress(0); //Put 0% as the start progress
         loading.Message("Loading workflow...", "");
         loading.setVisible(true);
         loadWorkflowSwingWorker.execute();    
    }
    
      public void display() {
        loadWorkflow();
        refreshTable();
        this.setVisible(true);
    }
    
      public void refreshTable() {
          Vector<Integer> ids=df.getAllRunWorkflowID();
          runworkflow_ids.clear();
          runworkflow_ids.addAll(ids);
          this.RunWorkflowjList.removeAll();
          ArrayList<String>names=new ArrayList<String>();
          for (int id:ids) {
              String name=df.getRunWorkflowName(id);
              names.add(name);
          }
          this.RunWorkflowjList.setListData(names.toArray());
      }
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WorkflowExplorerJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList RunWorkflowjList;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

}
