/*
 *  Armadillo Workflow Platform v1.0
 *  A simple pipeline system for phylogenetic analysis
 *  
 *  Copyright (C) 2009-2011  Etienne Lord, Mickael Leclercq
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package editors;

import biologic.Alignment;
import biologic.ImageFile;
import biologic.seqclasses.ModelTestJDialog;
import biologic.MultipleSequences;
import biologic.Sequence;
import com.lowagie.tools.arguments.ImageFilter;
import configuration.Config;

import configuration.SequenceFilter;
import database.databaseFunction;
import editor.AlignmentViewer;
import editor.EditorInterface;
import editor.ImageViewer;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Robot;
import java.awt.image.BufferedImage;
import java.io.File;
import java.net.URI;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import workflows.armadillo_workflow;
import workflows.workflow_properties;

/**
 *
 * @author Lorde
 */
public class ImageEditor extends javax.swing.JFrame implements EditorInterface {

    Frame frame;
    workflow_properties properties;
    armadillo_workflow parent_workflow;
    ImageViewer viewer=new ImageViewer();
    databaseFunction df=new databaseFunction();
    Config config=new Config();

    /** Creates new form SimplePhyloJFrame */
    public ImageEditor(java.awt.Frame parent, armadillo_workflow parent_workflow) {
       
        this.parent_workflow=parent_workflow;
        frame=parent;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel3 = new javax.swing.JPanel();
        scrollPane1 = new java.awt.ScrollPane();
        jButton2 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jPanel3PropertyChange(evt);
            }
        });

        scrollPane1.add(viewer);

        jButton2.setText("Save Image");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addContainerGap(701, Short.MAX_VALUE))
                    .addComponent(scrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 790, Short.MAX_VALUE)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(scrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jPanel3PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jPanel3PropertyChange
       
    }//GEN-LAST:event_jPanel3PropertyChange

  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel3;
    private java.awt.ScrollPane scrollPane1;
    // End of variables declaration//GEN-END:variables

    public void display(workflow_properties properties) {

        this.properties=properties;
        initComponents();
        if (frame==null) frame=this;

        int ImageID=properties.getOutputID("imagefile");
        if (ImageID!=0) {
            ImageFile f=new ImageFile(ImageID);
            f.Output(f.getFilename());           
            viewer.init(f.getFilename());
            while(!viewer.isInitialized()) {}
        } 
        int w=frame.getSize().width;
         Dimension d=new Dimension();
         d.setSize(w, 400);
         setSize(d);
         setPreferredSize(d);

         this.setIconImage(Config.image);
         this.setAlwaysOnTop(true);
         this.setVisible(true);
    }
    
   public void saveImage(String filename) {
        BufferedImage bi;
        try {
            bi = new Robot().createScreenCapture(this.getBounds()); 
            ImageIO.write(bi, "png", new File(filename));
            this.setVisible(false);
        } catch (Exception ex) {
           Config.log("Unable to save "+filename+" dialog image");
        }            
    }

    //--To change later
    public static void showAlignment(final Alignment align) {
    java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    ImageEditor a=new ImageEditor(null, null);
                    a.setDefaultCloseOperation(ImageEditor.HIDE_ON_CLOSE);
                    a.display(align.returnProperties());
                    //a.ModelTest_jMenuItem.setEnabled(Desktop.getDesktop().isSupported(Desktop.Action.BROWSE));
                }
            });
    }

    public static void showSequencet(final Sequence sequence) {
    java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    ImageEditor a=new ImageEditor(null, null);
                    a.setDefaultCloseOperation(ImageEditor.HIDE_ON_CLOSE);
                    a.display(sequence.returnProperties());
                    //a.ModelTest_jMenuItem.setEnabled(false);
                }

            });
    }

    public static void showAlignment(final MultipleSequences multi) {
    java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    ImageEditor a=new ImageEditor(null, null);
                    a.setDefaultCloseOperation(ImageEditor.HIDE_ON_CLOSE);
                    a.display(multi.returnProperties());
                    //a.ModelTest_jMenuItem.setEnabled(Desktop.getDesktop().isSupported(Desktop.Action.BROWSE));
                }
            });
    }
}
