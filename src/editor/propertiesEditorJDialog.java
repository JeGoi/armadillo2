/*
 *  Armadillo Workflow Platform v1.0
 *  A simple pipeline system for phylogenetic analysis
 *  
 *  Copyright (C) 2009-2011  Etienne Lord, Mickael Leclercq
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package editor;


import biologic.Workflows;
import workflows.workflow_properties_TableModel;
import workflows.workflow_properties;
import configuration.Config;
import configuration.Util;
import database.databaseFunction;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Toolkit;
import java.io.File;
import java.util.LinkedList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.RowSorterEvent;
import javax.swing.table.TableColumn;
import tools.Toolbox;
import workflows.Workbox;
import workflows.workflow_properties_cellRenderer;
import workflows.workflow_properties_dictionnary;

/**
 * This is a properties editor (Used mostly for program preference)
 * @author Etienne Lord
 * @since July 2009
 * Modified May 2013
 */
public class propertiesEditorJDialog extends javax.swing.JDialog {

    Config config=new Config();
    String selected="";             // Selected properties
    Frame frame;
    workflow_properties properties;
    Workbox workbox=new Workbox();
    Toolbox toolbox=new Toolbox();
    databaseFunction df=new databaseFunction();

    /** Creates new form propertiesJDialog */
    public propertiesEditorJDialog(java.awt.Frame parent,workflow_properties properties, String title) {
        super(parent, true);
        frame=parent;
        this.properties=properties;
        initComponents();
        setIconImage(Config.image);
        setPropertiesList();
        Message(properties.getName(),"");
        // Set position and title
        setTitle(title+" - "+properties.getName());
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension d = getSize();
        setLocation((screenSize.width-d.width)/2,
					(screenSize.height-d.height)/2);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        ReloadjButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jStatusMessage = new javax.swing.JLabel();
        AddjButton = new javax.swing.JButton();
        DeletejButton = new javax.swing.JButton();
        ClosejButton = new javax.swing.JButton();
        UpdatejButton = new javax.swing.JButton();
        TimeRunningjTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        KeywordjTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        setTitle("Properties");

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        ReloadjButton.setText("Reload From Disk");
        ReloadjButton.setFocusable(false);
        ReloadjButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ReloadjButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ReloadjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReloadjButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(ReloadjButton);

        jButton1.setText("Save to Disk");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jStatusMessage.setText("Info");

        AddjButton.setText("Add Key");
        AddjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddjButtonActionPerformed(evt);
            }
        });

        DeletejButton.setText("Delete Key");
        DeletejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeletejButtonActionPerformed(evt);
            }
        });

        ClosejButton.setText("Close");
        ClosejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClosejButtonActionPerformed(evt);
            }
        });

        UpdatejButton.setText("Update");
        UpdatejButton.setToolTipText("Save new properties to current workflow (Update)");
        UpdatejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdatejButtonActionPerformed(evt);
            }
        });

        TimeRunningjTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TimeRunningjTextFieldActionPerformed(evt);
            }
        });
        TimeRunningjTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TimeRunningjTextFieldFocusLost(evt);
            }
        });

        jLabel1.setText("Time Running(ms)");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jStatusMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(AddjButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DeletejButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(UpdatejButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TimeRunningjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ClosejButton))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jStatusMessage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddjButton)
                    .addComponent(DeletejButton)
                    .addComponent(ClosejButton)
                    .addComponent(UpdatejButton)
                    .addComponent(TimeRunningjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)))
        );

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new workflow_properties_TableModel());
        for (int i=0; i<jTable1.getColumnCount();i++) {
            TableColumn tm=jTable1.getColumnModel().getColumn(i);
            tm.setCellRenderer(new workflow_properties_cellRenderer());
        }
        jScrollPane1.setViewportView(jTable1);

        KeywordjTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                KeywordjTextFieldFocusLost(evt);
            }
        });

        jLabel2.setText("Associated keywords");
        jLabel2.setToolTipText("Separate each keyword by a comma (,)");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(KeywordjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(KeywordjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Preferences", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AddjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddjButtonActionPerformed
       AddKeyJDialog ak=new AddKeyJDialog(frame, properties);
       setPropertiesList();
       //workflow_properties_TableModel tm=(workflow_properties_TableModel)this.jTable1.getModel();
       
}//GEN-LAST:event_AddjButtonActionPerformed

    private void ClosejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClosejButtonActionPerformed
        this.setVisible(false);
}//GEN-LAST:event_ClosejButtonActionPerformed

    private void ReloadjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReloadjButtonActionPerformed
        
        if(properties.load()) {
            Message("Successfull reload of "+properties.getName(),"");
        } else {
            MessageError("Unable to reload "+properties.getName(),"");
        }
        setPropertiesList();
    }//GEN-LAST:event_ReloadjButtonActionPerformed

    private void DeletejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeletejButtonActionPerformed
        int selectedRow=this.jTable1.getSelectedRow();
        if (selectedRow!=-1) {
            String keyToDelete=(String)this.jTable1.getValueAt(selectedRow, 0);
            properties.remove(keyToDelete);
            setPropertiesList();
        }
    }//GEN-LAST:event_DeletejButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser jf=new JFileChooser(config.getExplorerPath());
        jf.setAcceptAllFileFilterUsed(false);
        jf.setName("Saving Properties to ...");
        int result=jf.showSaveDialog(this);
           if (result==JFileChooser.APPROVE_OPTION) {
               String filename=jf.getSelectedFile().getAbsolutePath();
               String path=jf.getSelectedFile().getPath();
               config.setExplorerPath(path);
               config.Save();
               properties.save(filename);
            }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void UpdatejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdatejButtonActionPerformed
        Workflows current=workbox.getCurrentWorkflows();       
        current.setNote(current.getNote()+"\nUpdated "+Util.returnCurrentDateAndTime()+"\n");
        current.setDate_modified(Util.returnCurrentDateAndTime());
        current.setWorkflow_in_txt(current.workflowToString());
        current.updateDatabase();
    }//GEN-LAST:event_UpdatejButtonActionPerformed

    private void TimeRunningjTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TimeRunningjTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TimeRunningjTextFieldActionPerformed

    private void TimeRunningjTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TimeRunningjTextFieldFocusLost
       int second=Integer.valueOf(this.TimeRunningjTextField.getText());
       properties.put("TimeRunning",second);
    }//GEN-LAST:event_TimeRunningjTextFieldFocusLost

    private void KeywordjTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_KeywordjTextFieldFocusLost
         LinkedList<String> keywords=new LinkedList<String>();
         String keyword=this.KeywordjTextField.getText();
         String[] stri=keyword.split(",");
         int index=0;
         //--Remove previous
         for (int i=0; i<100;i++) if (properties.isSet("Keyword"+i)) properties.remove("Keyword"+i);
         for (int i=0; i<stri.length;i++) properties.put("Keyword"+i,stri[i].trim());
    }//GEN-LAST:event_KeywordjTextFieldFocusLost

//    /**
//     * This duplicate a properties to a new name
//     * @param sourceName
//     * @param newName
//     * @return True if success
//     */
//    private boolean duplicateProperties(String sourceName, String newName) {
//        workflow_properties tmp=new workflow_properties();
//        if (tmp.load(sourceName, config.get("propertiesPath"))) {
//            if (tmp.save(newName, config.get("propertiesPath"))) return true;
//        }
//        MessageError("Unable to duplicate "+sourceName,"");
//        return false;
//    }
//
//    /**
//     * This delete from disk a properties in the propertiesPath
//     * @param propertiesName
//     * @return True if success
//     */
//    private boolean deleteProperties(String propertiesName) {
//        File fileToDelete=new File(config.get("propertiesPath")+"//"+propertiesName);
//        if (fileToDelete.delete()) return true;
//        MessageError("Unable to delete "+propertiesName+" from "+config.get("propertiesPath"),"");
//        return false;
//    }
//

    private void setPropertiesList() {
       workflow_properties_TableModel tm=(workflow_properties_TableModel)this.jTable1.getModel();      
       tm.setData(properties);       
       tm.fireTableDataChanged();
       this.jTable1.setModel(tm);
       this.TimeRunningjTextField.setText(""+properties.getInt("TimeRunning"));
       //--Keyword
         String keyword="";       
         for (int i=0; i<100;i++) if (properties.isSet("Keyword"+i)) keyword+=properties.get("Keyword"+i)+", ";
         this.KeywordjTextField.setText(keyword);       
    }

     ///////////////////////////////////////////////////////////////////////////
    /// MESSAGE FONCTION

    /**
     * Affiche un message dans la status bar
     * La provenance peut être mise dans un tooltip
     * @param text Le texte
     * @param tooltip Le tooltip texte
     */
    void Message(String text, String tooltip) {
        this.jStatusMessage.setEnabled(true);
        this.jStatusMessage.setForeground(new java.awt.Color(0, 51, 153));
        this.jStatusMessage.setBackground(Color.WHITE);
        this.jStatusMessage.setToolTipText(tooltip);
        this.jStatusMessage.setText(text);
    }

    /**
     * Affiche un message d'erreur en rouge dans la status bar
     * La provenance peut être mise dans un tooltip
     * @param text Le texte
     * @param tooltip Le tooltip texte
     */
    void MessageError(String text, String tooltip) {
        this.jStatusMessage.setEnabled(true);
        this.jStatusMessage.setForeground(Color.RED);
        this.jStatusMessage.setBackground(Color.WHITE);
        this.jStatusMessage.setToolTipText(tooltip);
        this.jStatusMessage.setText(text);
    }
    
     /**
     * This set the Properties
     * @param properties
     */
    public void setProperties(workflow_properties properties) {
        this.properties=properties;
        setPropertiesList();
    }

     /**
     * This set the Properties
     * @param properties
     */
    public void setProperties(String filename, String path) {
        workflow_properties tmp=new workflow_properties();
        tmp.load(filename, path);
        this.properties=tmp;
        setPropertiesList();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddjButton;
    private javax.swing.JButton ClosejButton;
    private javax.swing.JButton DeletejButton;
    private javax.swing.JTextField KeywordjTextField;
    private javax.swing.JButton ReloadjButton;
    private javax.swing.JTextField TimeRunningjTextField;
    private javax.swing.JButton UpdatejButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jStatusMessage;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

}
