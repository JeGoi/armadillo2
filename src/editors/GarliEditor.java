/*
 *  Armadillo Workflow Platform v1.0
 *  A simple pipeline system for phylogenetic analysis
 *  
 *  Copyright (C) 2009-2011  Etienne Lord, Mickael Leclercq
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package editors;


import biologic.seqclasses.GeneticCode;
import biologic.seqclasses.Translator;
import workflows.workflow_properties;
import configuration.Config;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Toolkit;
import java.io.File;
import editor.EditorInterface;
import java.awt.Font;
import java.awt.Robot;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import program.*;
import workflows.armadillo_workflow;
import workflows.workflow_properties_dictionnary;

/**
 * Editor of the object properties in the Main Workflow
 * Note: Only called if object doesnt have a Custum Editor
 * @author Etienne Lord
 * @since July 2009
 */
public class GarliEditor extends javax.swing.JDialog implements EditorInterface {

    ////////////////////////////////////////////////////////////////////////////
    /// VARIABLES

    Config config=new Config();
    //ConnectorInfoBox connectorinfobox;
    workflow_properties_dictionnary dict=new workflow_properties_dictionnary();
    String selected="";             // Selected properties
    Frame frame;
    workflow_properties properties;
    armadillo_workflow parent_workflow;
    Translator translator=new Translator();

    ////////////////////////////////////////////////////////////////////////////
    /// CONSTANT
    public final String defaultNameString=" Name";
    
   
    

    /** Creates new form propertiesJDialog */
    public GarliEditor(java.awt.Frame parent, armadillo_workflow parent_workflow) {
        super(parent, false);
        this.parent_workflow=parent_workflow;      
        frame=parent;             
    }

    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        nst_ComboBox1 = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        AllowedGap_jComboBox2 = new javax.swing.JComboBox();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel9 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        NamejTextField = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        ratematrix = new javax.swing.JComboBox();
        jLabel23 = new javax.swing.JLabel();
        statefrequencies = new javax.swing.JComboBox();
        jLabel24 = new javax.swing.JLabel();
        ratehetmodel = new javax.swing.JComboBox();
        numratecats = new javax.swing.JComboBox();
        jLabel25 = new javax.swing.JLabel();
        invariantsites = new javax.swing.JComboBox();
        jLabel26 = new javax.swing.JLabel();
        Fast_Evolutionnary_mode = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel48 = new javax.swing.JLabel();
        availablememory = new javax.swing.JComboBox();
        Fast_Evolutionnary_mode2 = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        datatype = new javax.swing.JComboBox();
        jLabel21 = new javax.swing.JLabel();
        geneticcode = new javax.swing.JComboBox();
        OutgroupjCheckBox1 = new javax.swing.JCheckBox();
        Outgroup_jTextField = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        Pre_Set_config = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        searchreps = new javax.swing.JComboBox();
        bootstrapreps = new javax.swing.JComboBox();
        jLabel16 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel7 = new javax.swing.JPanel();
        jLabel27 = new javax.swing.JLabel();
        selectionintensity = new javax.swing.JComboBox();
        jLabel28 = new javax.swing.JLabel();
        stopgen = new javax.swing.JComboBox();
        jLabel29 = new javax.swing.JLabel();
        stoptime = new javax.swing.JComboBox();
        startoptprec = new javax.swing.JComboBox();
        jLabel30 = new javax.swing.JLabel();
        minoptprec = new javax.swing.JComboBox();
        jLabel31 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        numberofprecreductions = new javax.swing.JComboBox();
        jLabel18 = new javax.swing.JLabel();
        treerejectionthreshold = new javax.swing.JComboBox();
        topoweight = new javax.swing.JComboBox();
        jLabel19 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        modweight = new javax.swing.JComboBox();
        brlenweight = new javax.swing.JComboBox();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        randnniweight = new javax.swing.JComboBox();
        jLabel35 = new javax.swing.JLabel();
        randsprweight = new javax.swing.JComboBox();
        jLabel36 = new javax.swing.JLabel();
        limsprweight = new javax.swing.JComboBox();
        intervallength = new javax.swing.JComboBox();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        intervalstostore = new javax.swing.JComboBox();
        jLabel39 = new javax.swing.JLabel();
        limsprrange = new javax.swing.JComboBox();
        jLabel40 = new javax.swing.JLabel();
        meanbrlenmuts = new javax.swing.JComboBox();
        jLabel41 = new javax.swing.JLabel();
        gammashapebrlen = new javax.swing.JComboBox();
        jLabel42 = new javax.swing.JLabel();
        gammashapemodel = new javax.swing.JComboBox();
        jLabel43 = new javax.swing.JLabel();
        uniqueswapbias = new javax.swing.JComboBox();
        jLabel44 = new javax.swing.JLabel();
        distanceswapbias = new javax.swing.JComboBox();
        jLabel49 = new javax.swing.JLabel();
        nindivs = new javax.swing.JComboBox();
        jLabel50 = new javax.swing.JLabel();
        holdover = new javax.swing.JComboBox();
        jLabel51 = new javax.swing.JLabel();
        holdoverpenalty = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        significanttopochange = new javax.swing.JComboBox();
        jLabel47 = new javax.swing.JLabel();
        genthreshfortopoterm = new javax.swing.JComboBox();
        jLabel46 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        scorethreshforterm = new javax.swing.JComboBox();
        attachmentspertaxon = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        ClosejButton = new javax.swing.JButton();
        run_jButton = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();

        jTextField1.setText("jTextField1");

        jTextField2.setText("jTextField2");

        jLabel3.setText("jLabel3");

        jLabel7.setText("Substitution Rates (lset nst)");

        nst_ComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "F81 (1)", "HKY (2)", "GTR (6)" }));
        nst_ComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nst_ComboBox1ActionPerformed(evt);
            }
        });

        jLabel10.setText("Replicates (searchreps) :");

        AllowedGap_jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "default", "None", "With Half", "All" }));
        AllowedGap_jComboBox2.setToolTipText("default: None");
        AllowedGap_jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AllowedGap_jComboBox2ActionPerformed(evt);
            }
        });

        setTitle("Properties");

        jTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabbedPane1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jTabbedPane1ComponentShown(evt);
            }
        });

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setText("Name");

        jButton4.setText("Rename");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(NamejTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel1)
                .addComponent(NamejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jButton4))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Evolutionnary Model"));

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel22.setText("Rate matrix");

        ratematrix.setEditable(true);
        ratematrix.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-- Select one --", "--DNA or Codons--", "1rate", "2rate", "6rate", "fixed", "<Custorm>", "--Amino acids--", "poisson", "dayhoff", "jones", "wag" }));
        ratematrix.setToolTipText("Default: standard\nGenetic code to be used for codon or codon-aminoacid datatypes");
        ratematrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ratematrixActionPerformed(evt);
            }
        });
        ratematrix.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ratematrixFocusLost(evt);
            }
        });

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel23.setText("State frequency");
        jLabel23.setToolTipText("The equilibrium state frequencies to use for DNA (equal, empirical, estimate) for Amino acids (equal, empirical, dayhoff, jones, wag) for Codons (equal, empirical, F1x4, F3x4)");

        statefrequencies.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-- Select one --", "-- DNA --", "equal", "empirical", "estimate", "-- Amino acids --", "equal", "empirical", "dayhoff", "jones", "wag", "-- Codons --", "equa", "empirical", "F1x4", " F3x4" }));
        statefrequencies.setToolTipText("The equilibrium state frequencies to use\nfor DNA (equal, empirical, estimate)\nfor Amino acids (equal, empirical, dayhoff, jones, wag)\nfor Codons (equal, empirical, F1x4, F3x4)");
        statefrequencies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statefrequenciesActionPerformed(evt);
            }
        });
        statefrequencies.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                statefrequenciesFocusLost(evt);
            }
        });

        jLabel24.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel24.setText("Rate het model");
        jLabel24.setToolTipText("The model of rate heterogeneity assumed. “gammafixed” requires that the alpha shape parameter is provided, and a setting of “gamma” estimates it.");

        ratehetmodel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-- Select one --", "--  DNA or Amino acids --", "none", "gamma", "gammafixed", "-- Codons -- ", "none", "nonsynonymous" }));
        ratehetmodel.setToolTipText("for DNA or Amino acids (none, gamma, gammafixed)\nfor Codons (none, nonsynonymous)");
        ratehetmodel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ratehetmodelActionPerformed(evt);
            }
        });
        ratehetmodel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ratehetmodelFocusLost(evt);
            }
        });

        numratecats.setEditable(true);
        numratecats.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "default", "4", "1", " " }));
        numratecats.setToolTipText("Default: 4 (1 to 20)\nFor ratehetmodel none this must be 1\nFor ratehetmodel gamma, the number of discrete rates to assume\nFor ratehetmodel nonsynonymous, the number of discrete \nnonsynonymous/synonymous rate ratios (aka omegas)");
        numratecats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numratecatsActionPerformed(evt);
            }
        });
        numratecats.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                numratecatsFocusLost(evt);
            }
        });

        jLabel25.setText("Number of rate categories");
        jLabel25.setToolTipText("Number of overall substitution rate categories");

        invariantsites.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "none", "estimate", "fixed" }));
        invariantsites.setToolTipText("");
        invariantsites.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invariantsitesActionPerformed(evt);
            }
        });
        invariantsites.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                invariantsitesFocusLost(evt);
            }
        });

        jLabel26.setText("Invariant site");

        Fast_Evolutionnary_mode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Custom", "JC\t", "F81", "K80\t", "HKY\t", "TrNef\t", "TrN", "K3P", "K3Puf", "TIMef", "TIM", "TVMef", "TVM", "SYM", "GTR" }));
        Fast_Evolutionnary_mode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Fast_Evolutionnary_modeActionPerformed(evt);
            }
        });

        jLabel6.setText("Fast Evolutionnary model setting");

        jLabel48.setFont(new java.awt.Font("Tahoma", 2, 11));
        jLabel48.setText("Memory (mb)");

        availablememory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "default", "128", "256", "512", "1024", "2048", " " }));
        availablememory.setToolTipText("Allocated memory (mb)\nDefault: 512 mb");
        availablememory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availablememoryActionPerformed(evt);
            }
        });
        availablememory.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                availablememoryFocusLost(evt);
            }
        });

        Fast_Evolutionnary_mode2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Custom", "+I", "+G", "+I+G" }));
        Fast_Evolutionnary_mode2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Fast_Evolutionnary_mode2ActionPerformed(evt);
            }
        });

        jLabel14.setText("Options (+I, +G)");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Fast_Evolutionnary_mode, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Fast_Evolutionnary_mode2, 0, 109, Short.MAX_VALUE))
                    .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 609, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel24))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel48, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel22)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(availablememory, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ratematrix, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ratehetmodel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel25, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel23, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel26, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(invariantsites, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(numratecats, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(statefrequencies, javax.swing.GroupLayout.Alignment.TRAILING, 0, 144, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(Fast_Evolutionnary_mode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Fast_Evolutionnary_mode2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(ratematrix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(statefrequencies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(jLabel25)
                    .addComponent(numratecats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ratehetmodel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(invariantsites, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26)
                    .addComponent(jLabel48)
                    .addComponent(availablememory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("General"));

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel20.setText("Sequence type");

        datatype.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "dna", "aminoacid", "codon-aminoacid", "codon" }));
        datatype.setToolTipText("Default Nucleic Acid: 15.0, Protein: 10.0");
        datatype.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                datatypeActionPerformed(evt);
            }
        });
        datatype.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                datatypeFocusLost(evt);
            }
        });

        jLabel21.setText("Genetic code");

        geneticcode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "standard", "vertmito", "invertmito" }));
        geneticcode.setToolTipText("Default: standard\nGenetic code to be used for codon or codon-aminoacid datatypes");
        geneticcode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geneticcodeActionPerformed(evt);
            }
        });
        geneticcode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                geneticcodeFocusLost(evt);
            }
        });

        OutgroupjCheckBox1.setText("Outgroup (Optional - sequence number)");
        OutgroupjCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OutgroupjCheckBox1ActionPerformed(evt);
            }
        });

        Outgroup_jTextField.setText("1");
        Outgroup_jTextField.setEnabled(false);
        Outgroup_jTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                Outgroup_jTextFieldFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(datatype, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(OutgroupjCheckBox1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(geneticcode, 0, 217, Short.MAX_VALUE))
                    .addComponent(Outgroup_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(datatype, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20)
                    .addComponent(jLabel21)
                    .addComponent(geneticcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OutgroupjCheckBox1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Outgroup_jTextField)))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Software configuration"));

        jLabel4.setFont(new java.awt.Font("Tahoma", 2, 11));
        jLabel4.setText("Pre-set  software configuration");

        Pre_Set_config.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Fast search", "Moderately intense search (default)", "Intensive search", "Custom" }));
        Pre_Set_config.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Pre_Set_configActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel9.setText("Replicates per run  (searchreps) :");
        jLabel9.setToolTipText("The number of independent searches to perform on the input data or per bootstrap  reweighting");

        searchreps.setEditable(true);
        searchreps.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "default", "1", "5", "10", "20", "100" }));
        searchreps.setToolTipText("default: 1");
        searchreps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchrepsActionPerformed(evt);
            }
        });

        bootstrapreps.setEditable(true);
        bootstrapreps.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "default", "0", "100", "200", "1000", " " }));
        bootstrapreps.setToolTipText("default: 0\nNumber of bootstrap replicates. \nNote that GARLI does NOT do the bootstrap consensus or calculate the bootstrap proportions itself. It simply infers the trees and are the input to that consensus. The trees in the .boot.tre file will need to be read into a program such as SumTrees (or PAUP* or CONSENSE) to do a majority-rule consensus and obtain your bootstrap support values. See the following part of the \"Advanced topics\" page for suggestions on making the consensus:");
        bootstrapreps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bootstraprepsActionPerformed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel16.setText("Bootstrap  (bootstrapreps) :");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addGap(39, 39, 39)
                        .addComponent(bootstrapreps, 0, 402, Short.MAX_VALUE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Pre_Set_config, 0, 404, Short.MAX_VALUE)
                            .addComponent(searchreps, 0, 404, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Pre_Set_config, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(searchreps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(bootstrapreps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Genetic algorithm and termination condition (advanced settings by option name)"));

        jPanel7.setMaximumSize(new java.awt.Dimension(389, 843));

        jLabel27.setText("Selection Intensity (selectionintensity)");

        selectionintensity.setEditable(true);
        selectionintensity.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "default", "0.01", "0.05", "0.1", "0.5", "1.0", " " }));
        selectionintensity.setToolTipText("Default:0.5 (0.01 to 5.0)\n- Strength of selection in genetic algorithm population. Larger numbers mean stronger selection.\n");
        selectionintensity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectionintensityActionPerformed(evt);
            }
        });

        jLabel28.setText("Stop generation (stopgen)");
        jLabel28.setToolTipText("maximum number of generations to run");

        stopgen.setEditable(true);
        stopgen.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "default", "100000", "500000", " " }));
        stopgen.setToolTipText("Default: 500000\nMaximum number of generations to run");
        stopgen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopgenActionPerformed(evt);
            }
        });
        stopgen.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                stopgenFocusLost(evt);
            }
        });

        jLabel29.setText("Stop time (stoptime)");
        jLabel29.setToolTipText("maximum time to run");

        stoptime.setEditable(true);
        stoptime.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "default", "100000", "500000" }));
        stoptime.setToolTipText("Default: 500000\n- Maximum time to run in second");
        stoptime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stoptimeActionPerformed(evt);
            }
        });

        startoptprec.setEditable(true);
        startoptprec.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "default", "0.005", "0.01", "0.1", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "2.0", "3.0", "4.0", "5.0", " " }));
        startoptprec.setToolTipText("Default: 0.5 (0.005 to 5.0)\nThe branch-length optimization precision at the start of a search. \n Lower values mean more intensive optimization.\n");
        startoptprec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startoptprecActionPerformed(evt);
            }
        });

        jLabel30.setText("The beginning optimization precision (startoptprec)");
        jLabel30.setToolTipText("The beginning optimization precision");

        minoptprec.setEditable(true);
        minoptprec.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0.01", " " }));
        minoptprec.setToolTipText("Default: 0.01 (0.001 to startoptprec)\n- The minimum allowed value of the optimization precision");
        minoptprec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minoptprecActionPerformed(evt);
            }
        });

        jLabel31.setText("The minimum allowed value of the optimization precision (minoptprec)");

        jLabel17.setText("(numberofprecreductions) - see website");
        jLabel17.setToolTipText(" Specify the number of steps that it will take for the optimization precision to decrease (linearly) from startoptprec to minoptprec");

        numberofprecreductions.setEditable(true);
        numberofprecreductions.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "default", "0", "1", "5", "10", "20", "100" }));
        numberofprecreductions.setToolTipText("Default: 10 (0 to 100)\n- Specify the number of steps that it will take for the optimization precision to decrease (linearly) from startoptprec to minoptprec.");
        numberofprecreductions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numberofprecreductionsActionPerformed(evt);
            }
        });

        jLabel18.setText("(treerejectionthreshold) - see website");

        treerejectionthreshold.setEditable(true);
        treerejectionthreshold.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "default", "1", "5", "10", "20", "100" }));
        treerejectionthreshold.setToolTipText("Default: 50 (0 to 500)\n- This setting controls which trees have more extensive branch-length optimization applied to them..\n");
        treerejectionthreshold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treerejectionthresholdActionPerformed(evt);
            }
        });

        topoweight.setEditable(true);
        topoweight.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "default", "0", "0.5", "1.0", "5.0", "10.0", "20.0", "100.0" }));
        topoweight.setToolTipText("default: 1.0 (0 to infinity)\n- Weight on topology mutations");
        topoweight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topoweightActionPerformed(evt);
            }
        });

        jLabel19.setText("Weight on topology mutations (topoweight)");

        jLabel32.setText("Weight on model parameter mutations (modweight)");

        modweight.setEditable(true);
        modweight.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "default", "1", "5", "10", "20", "100" }));
        modweight.setToolTipText("Default: 0.05 (0 to infinity)\n- The prior weight assigned to the class of model mutations. Note that setting this at 0.0 fixes the model during the run.\n");
        modweight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modweightActionPerformed(evt);
            }
        });

        brlenweight.setEditable(true);
        brlenweight.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "default", "0", "0.2", "0.5", "1.0", "10", "100" }));
        brlenweight.setToolTipText("Default: 0.2 (0 to infinity)\n- Weight on branch-length parameter mutations");
        brlenweight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brlenweightActionPerformed(evt);
            }
        });

        jLabel33.setText("Weight on branch-length mutations (brlenweight)");

        jLabel34.setText("Weight on SPR topology changes (randnniweight)");

        randnniweight.setEditable(true);
        randnniweight.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "default", "0.1", "0.2", "0.5", "1.0", "10", "100", " " }));
        randnniweight.setToolTipText("Default: 0.1 (0 to infinity)\n-Weight on NNI topology changes");
        randnniweight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randnniweightActionPerformed(evt);
            }
        });

        jLabel35.setText("Weight on localized SPR topology changes (randsprweight)");

        randsprweight.setEditable(true);
        randsprweight.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "default", "0", "0.3", "0.5", "1.0", "10", "100", "1000" }));
        randsprweight.setToolTipText("Default: 0.3 (0 to infinity)\n- Weight on SPR topology changes");
        randsprweight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randsprweightActionPerformed(evt);
            }
        });

        jLabel36.setText("(weight on localized SPR topology changes (limsprweight)");

        limsprweight.setEditable(true);
        limsprweight.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "default", "0", "0.6", "1.0", "10", "100", "1000" }));
        limsprweight.setToolTipText("Default: 0.6 (0 to infinity)\n - Weight on localized SPR topology changes");
        limsprweight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limsprweightActionPerformed(evt);
            }
        });

        intervallength.setEditable(true);
        intervallength.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "default", "1", "5", "10", "20", "100" }));
        intervallength.setToolTipText("Default: 100 (10 to 1000)\n- The number of generations in each interval during which the number and benefit of each mutation type are stored.");
        intervallength.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                intervallengthActionPerformed(evt);
            }
        });

        jLabel37.setText("(intervallength) - see website");

        jLabel38.setText("(intervalstostore) - see website");

        intervalstostore.setEditable(true);
        intervalstostore.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "default", "1", "5", "10" }));
        intervalstostore.setToolTipText("Default: 5 (1 to 10)\n- The number of intervals to be stored. Thus, records of mutations are kept for the last (intervallength x intervalstostore) generations. Every intervallength generations the probabilities of the mutation types are updated by the scheme described above.");
        intervalstostore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                intervalstostoreActionPerformed(evt);
            }
        });

        jLabel39.setText("Max range for localized SPR topology changes (limsprrange)");

        limsprrange.setEditable(true);
        limsprrange.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "default", "6" }));
        limsprrange.setToolTipText("Default: 6 (0 to infinity)\nMax range for localized SPR topology changes");
        limsprrange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limsprrangeActionPerformed(evt);
            }
        });

        jLabel40.setText("Mean # of branch lengths to change per mutation (meanbrlenmuts)");

        meanbrlenmuts.setEditable(true);
        meanbrlenmuts.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "default", "1", "2", "3", "4", "5", "5", "7", "8", "9", "10", "11", "12", "13", "14", "15" }));
        meanbrlenmuts.setToolTipText("Default:  5, (1 to # taxa)\n- Mean # of branch lengths to change per mutation");
        meanbrlenmuts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                meanbrlenmutsActionPerformed(evt);
            }
        });

        jLabel41.setText("Magnitude of branch-length mutations (gammashapebrlen)");
        jLabel41.setToolTipText("Magnitude of branch-length mutations");

        gammashapebrlen.setEditable(true);
        gammashapebrlen.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "default", "50", "100", "200", "300", "400", "500", "600", "700", "800", "900", "1000", "2000" }));
        gammashapebrlen.setToolTipText("Default: 1000 (50 to 2000)\n- The shape parameter of the gamma distribution (with a mean of 1.0) from which the branch-length multipliers are drawn for branch-length mutations. Larger numbers cause smaller changes in branch lengths. (Note that this has nothing to do with gamma rate heterogeneity.)");
        gammashapebrlen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gammashapebrlenActionPerformed(evt);
            }
        });

        jLabel42.setText("Magnitude of model parameter mutations (gammashapemodel)");
        jLabel42.setToolTipText("Magnitude of model parameter mutations");

        gammashapemodel.setEditable(true);
        gammashapemodel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "default", "50", "100", "200", "300", "400", "500", "600", "700", "800", "900", "1000", "2000" }));
        gammashapemodel.setToolTipText("Default: 1000 (50 to 2000)\n- Magnitude of model parameter mutations.");
        gammashapemodel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gammashapemodelActionPerformed(evt);
            }
        });

        jLabel43.setText("(uniqueswapbias) - see website");
        jLabel43.setToolTipText("Relative weight assigned to already attempted branch swaps");

        uniqueswapbias.setEditable(true);
        uniqueswapbias.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "default", "0.01", "0.1", "0.5", "0.75", "1.0" }));
        uniqueswapbias.setToolTipText("Default: 0.1 (0.01 to 1.0)\n- Relative weight assigned to already attempted branch swaps");
        uniqueswapbias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uniqueswapbiasActionPerformed(evt);
            }
        });

        jLabel44.setText("(distanceswapbias) - see website");
        jLabel44.setToolTipText("Relative weight assigned to branch swaps based on locality");

        distanceswapbias.setEditable(true);
        distanceswapbias.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "default", "0.1", "0.2", "0.3", "0.4", "0.5", "1.0", "2.0", "3.0", "4.0", "5.0", "6.0", "7.0", "8.0", "9.0", "10.0" }));
        distanceswapbias.setToolTipText("Default: 1.0 (0.1 to 10)\n- Relative weight assigned to branch swaps based on locality");
        distanceswapbias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                distanceswapbiasActionPerformed(evt);
            }
        });

        jLabel49.setText("Number of individuals in population (nindivs)");
        jLabel49.setToolTipText(" The number of individuals in the population. This may be increased, but doing so is generally not beneficial. Note that typical genetic algorithms tend to have much, much larger population sizes than GARLI's defaults");

        nindivs.setEditable(true);
        nindivs.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "4" }));
        nindivs.setToolTipText("Default 4 (2 to 100)\n- Number of individuals the in the genetic algorithm population");
        nindivs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nindivsActionPerformed(evt);
            }
        });

        jLabel50.setText("Unmutated copies of best individual (holdover)");
        jLabel50.setToolTipText("fitness handicap for best individua");

        holdover.setEditable(true);
        holdover.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1" }));
        holdover.setToolTipText("Default: 1 to nindivs-1\n- Unmutated copies of best individual\n");
        holdover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                holdoverActionPerformed(evt);
            }
        });

        jLabel51.setText("Fitness handicap for best individua (holdoverpenalty)");
        jLabel51.setToolTipText("This can be used to bias the probability of reproduction of the best individual downward. Because the best individual is automatically copied into the next generation, it has a bit of an unfair advantage and can cause all population variation to be lost due to genetic drift, especially with small populations sizes. The value specified here is subtracted from the best individual’s lnL score before calculating the probabilities of reproduction. It seems plausible that this might help maintain variation, but I have not seen it cause a measurable effect.");

        holdoverpenalty.setEditable(true);
        holdoverpenalty.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "default", "0", "1", "10", "20", "30", "40", "50", "90", "70", "80", "90", "100" }));
        holdoverpenalty.setToolTipText("Default: 0 (0 to 100)\n- Fitness handicap for best individual\n");
        holdoverpenalty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                holdoverpenaltyActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Branch-length optimization settings");
        jLabel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Population settings");
        jLabel8.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Settings controlling the proportions of the mutation types");
        jLabel11.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        significanttopochange.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "default", "0.001 ", "0.01", "0.05", "0.1", "0.5", "0.9", "1.0", " " }));
        significanttopochange.setToolTipText("Default:  0.01 (0.001 – 1.0) -\nThe minimum improvement in score needed for a topology to be considered “new”\nfor purposes of the termination condition\n");
        significanttopochange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                significanttopochangeActionPerformed(evt);
            }
        });

        jLabel47.setText("(significanttopochange) :");
        jLabel47.setToolTipText(" The minimum improvement in score needed for a topology to be considered “new”  for purposes of the termination conditio");

        genthreshfortopoterm.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "default", "1000", "2000", "5000", "10000", "50000", "100000", " " }));
        genthreshfortopoterm.setToolTipText("Default: 10000 (1000 – 100,000)\n- The number of generations without a topology improvement before the run is automatically terminated.\n");
        genthreshfortopoterm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genthreshfortopotermActionPerformed(evt);
            }
        });

        jLabel46.setText("(scorethreshforterm) :");
        jLabel46.setToolTipText("Once precision parameter has reached minimum value, the threshold amount of  improvement in log-likelihood over recent generations allowed for termination");

        jLabel45.setText("(genthreshfortopoterm) :");

        scorethreshforterm.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "default", "0.001 ", "0.01", "0.05", "0.1", "0.5", "0.9", "1.0", " " }));
        scorethreshforterm.setToolTipText("Default: 0.05 (0.001 – 1.0)\n- Once precision parameter has reached minimum value, the threshold amount of\nimprovement in log-likelihood over recent generations allowed for termination.\n");
        scorethreshforterm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scorethreshfortermActionPerformed(evt);
            }
        });

        attachmentspertaxon.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "default", "5", "50" }));
        attachmentspertaxon.setToolTipText("Default: 50 \n- Control creation of stepwise addition starting tree");
        attachmentspertaxon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attachmentspertaxonActionPerformed(evt);
            }
        });

        jLabel15.setText(" (attachmentspertaxon) :");
        jLabel15.setToolTipText("The number of attachments considered per taxon");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Termination condition");
        jLabel12.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("Settings controlling mutation details");
        jLabel13.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel32)
                        .addContainerGap(211, Short.MAX_VALUE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel35)
                        .addContainerGap(167, Short.MAX_VALUE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel36)
                        .addContainerGap(172, Short.MAX_VALUE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel37)
                        .addContainerGap(350, Short.MAX_VALUE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel38)
                        .addContainerGap(338, Short.MAX_VALUE))
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
                    .addComponent(jLabel46)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel45)
                            .addComponent(jLabel47)
                            .addComponent(jLabel15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(significanttopochange, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(scorethreshforterm, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(attachmentspertaxon, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(genthreshfortopoterm, 0, 90, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel39)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                        .addComponent(limsprrange, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel49)
                            .addComponent(jLabel50)
                            .addComponent(jLabel51)
                            .addComponent(jLabel27)
                            .addComponent(jLabel28)
                            .addComponent(jLabel29))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(stoptime, 0, 0, Short.MAX_VALUE)
                            .addComponent(stopgen, 0, 0, Short.MAX_VALUE)
                            .addComponent(selectionintensity, 0, 0, Short.MAX_VALUE)
                            .addComponent(holdoverpenalty, 0, 0, Short.MAX_VALUE)
                            .addComponent(holdover, 0, 0, Short.MAX_VALUE)
                            .addComponent(nindivs, 0, 88, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel31)
                            .addComponent(jLabel30)
                            .addComponent(jLabel17)
                            .addComponent(jLabel18))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(treerejectionthreshold, 0, 82, Short.MAX_VALUE)
                            .addComponent(numberofprecreductions, 0, 82, Short.MAX_VALUE)
                            .addComponent(startoptprec, 0, 82, Short.MAX_VALUE)
                            .addComponent(minoptprec, 0, 82, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19)
                            .addComponent(jLabel33)
                            .addComponent(jLabel34))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 136, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(randnniweight, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(brlenweight, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(modweight, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(topoweight, javax.swing.GroupLayout.Alignment.TRAILING, 0, 67, Short.MAX_VALUE)
                            .addComponent(randsprweight, 0, 83, Short.MAX_VALUE)
                            .addComponent(limsprweight, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(intervalstostore, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(intervallength, 0, 81, Short.MAX_VALUE)))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel44, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel43))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(uniqueswapbias, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(distanceswapbias, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(245, Short.MAX_VALUE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel40)
                            .addComponent(jLabel42)
                            .addComponent(jLabel41))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(gammashapebrlen, javax.swing.GroupLayout.Alignment.TRAILING, 0, 108, Short.MAX_VALUE)
                            .addComponent(meanbrlenmuts, 0, 108, Short.MAX_VALUE)
                            .addComponent(gammashapemodel, javax.swing.GroupLayout.Alignment.TRAILING, 0, 108, Short.MAX_VALUE)))))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel45, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(genthreshfortopoterm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(attachmentspertaxon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel46)
                    .addComponent(scorethreshforterm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(significanttopochange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel47))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel49)
                    .addComponent(nindivs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel50)
                    .addComponent(holdover, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel51)
                    .addComponent(holdoverpenalty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(selectionintensity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel28))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(stopgen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(stoptime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel29))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(startoptprec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(minoptprec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(numberofprecreductions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(treerejectionthreshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(topoweight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel32)
                    .addComponent(modweight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel33)
                    .addComponent(brlenweight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(randnniweight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel35)
                    .addComponent(randsprweight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36)
                    .addComponent(limsprweight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel37)
                    .addComponent(intervallength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel38)
                    .addComponent(intervalstostore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel39)
                    .addComponent(limsprrange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel40)
                    .addComponent(meanbrlenmuts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel41)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(gammashapebrlen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(gammashapemodel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel42))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel43)
                        .addComponent(uniqueswapbias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel44)
                            .addComponent(distanceswapbias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel7);

        jLabel5.setFont(new java.awt.Font("Tahoma", 2, 11));
        jLabel5.setForeground(new java.awt.Color(255, 51, 51));
        jLabel5.setText("Instructions: see the website https://www.nescent.org/wg_garli/GARLI_Configuration_Settings");
        jLabel5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 617, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 568, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        ClosejButton.setText("<html><b>Close</b></html>");
        ClosejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClosejButtonActionPerformed(evt);
            }
        });

        run_jButton.setText("Run");
        run_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                run_jButtonActionPerformed(evt);
            }
        });

        jButton8.setText("Stop");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton6.setText("Reset default values");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jButton6)
                        .addGap(18, 18, 18)
                        .addComponent(jButton8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(run_jButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 249, Short.MAX_VALUE)
                        .addComponent(ClosejButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(126, 126, 126))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6)
                    .addComponent(jButton8)
                    .addComponent(run_jButton)
                    .addComponent(ClosejButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Garli", jPanel9);

        jButton7.setText("?");
        jButton7.setToolTipText("Help / Informations");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(662, Short.MAX_VALUE)
                .addComponent(jButton7)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 724, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 730, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ClosejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClosejButtonActionPerformed
        //-- 2. Close dialog
       
       //testOPtion();
        
        this.setVisible(false);
}//GEN-LAST:event_ClosejButtonActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
       properties.put("Name", this.NamejTextField.getText());
       parent_workflow.updateCurrentWorkflow(properties);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void run_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_run_jButtonActionPerformed
        if(properties.isSet("ClassName")) {
           this.parent_workflow.workflow.updateDependance();
           programs prog=new programs(parent_workflow.workbox.getCurrentWorkflows());
           prog.Run(properties);
        }
}//GEN-LAST:event_run_jButtonActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        properties.put("Status", Config.status_nothing);
        properties.killThread();
}//GEN-LAST:event_jButton8ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        properties.load();             //--reload current properties from file
        this.setProperties(properties);//--Update current field
}//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        HelpEditor help = new HelpEditor(this.frame, false, properties);
        help.setVisible(true);
}//GEN-LAST:event_jButton7ActionPerformed

    private void jTabbedPane1ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jTabbedPane1ComponentShown
        
}//GEN-LAST:event_jTabbedPane1ComponentShown

    private void datatypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_datatypeActionPerformed
         String item=(String)this.datatype.getSelectedItem();
        properties.put("datatype",item);
        //--TO DO ENABLE action here...
}//GEN-LAST:event_datatypeActionPerformed

    private void datatypeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_datatypeFocusLost
        
}//GEN-LAST:event_datatypeFocusLost

    private void nst_ComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nst_ComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nst_ComboBox1ActionPerformed

    private void geneticcodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_geneticcodeActionPerformed
         String item=(String)this.geneticcode.getSelectedItem();
         properties.put("geneticcode",item);
        //--TO DO ENABLE action here...
    }//GEN-LAST:event_geneticcodeActionPerformed

    private void geneticcodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_geneticcodeFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_geneticcodeFocusLost

    private void ratematrixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ratematrixActionPerformed
        String item=(String)this.ratematrix.getSelectedItem();
         if (!item.startsWith("--")) properties.put("ratematrix",item);
    }//GEN-LAST:event_ratematrixActionPerformed

    private void ratematrixFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ratematrixFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_ratematrixFocusLost

    private void statefrequenciesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statefrequenciesActionPerformed
         String item=(String)this.statefrequencies.getSelectedItem();
         if (!item.startsWith("--")) properties.put("statefrequencies",item);
    }//GEN-LAST:event_statefrequenciesActionPerformed

    private void statefrequenciesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_statefrequenciesFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_statefrequenciesFocusLost

    private void ratehetmodelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ratehetmodelActionPerformed
       String item=(String)this. ratehetmodel.getSelectedItem();
        if (!item.startsWith("--")) properties.put("ratehetmodel",item);
        //--TO DO CHANGE numtaecats
        if (item.equalsIgnoreCase("none")) {
            this.numratecats.setSelectedItem("1");
            this.numratecats.setEditable(false);
            this.numratecats.setEnabled(false);
            properties.put("numratecats","1"); 
        } else {
            this.numratecats.setEditable(true);
            this.numratecats.setEnabled(true);
        } 
        
    }//GEN-LAST:event_ratehetmodelActionPerformed

    private void ratehetmodelFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ratehetmodelFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_ratehetmodelFocusLost

    private void numratecatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numratecatsActionPerformed
        String item=(String)this.numratecats.getSelectedItem();
          if (item.equals("default")) {
            properties.remove("numratecats");
        } else properties.put("numratecats",item);         
    }//GEN-LAST:event_numratecatsActionPerformed

    private void numratecatsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_numratecatsFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_numratecatsFocusLost

    private void invariantsitesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invariantsitesActionPerformed
       String item=(String)this. invariantsites.getSelectedItem();
        if (!item.startsWith("--")) properties.put("invariantsites",item);
        
    }//GEN-LAST:event_invariantsitesActionPerformed

    private void invariantsitesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_invariantsitesFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_invariantsitesFocusLost

    private void Pre_Set_configActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Pre_Set_configActionPerformed
        int index=this.Pre_Set_config.getSelectedIndex();
        //--Remove ambigious properties
        properties.put("Pre_Set", this.Pre_Set_config.getSelectedItem());
        
        switch(index) {
            //--Fast
            case 0: 
                properties.put("attachmentspertaxon",5);
                properties.put("genthreshfortopoterm",5000);
                properties.put("numberofprecreductions",1);
                properties.put("treerejectionthreshold",20);
            break;
            //--Moderately intense search
            case 1:
                properties.put("attachmentspertaxon",50);
                properties.put("genthreshfortopoterm",10000);
                properties.put("numberofprecreductions",10);
                properties.put("treerejectionthreshold",50);                
                break;
            //--Intensive search
            case 2:                
                properties.put("attachmentspertaxon", 50);
                properties.put("genthreshfortopoterm",50000);
                properties.put("numberofprecreductions",20);
                properties.put("treerejectionthreshold",100);
                
                break;
            case 3:               
              break;
        }
        
        //--Remvoe replicate
        //if (properties.isSet("bootstrapreps")) properties.put("bootstrapreps",0);
        //if (properties.isSet("bootstrapreps")) properties.put("bootstrapreps",0);
        //--Remove master setting...
       
        if (properties.isSet("nindivs")) {
            properties.remove("nindivs");
        } 
        if (properties.isSet("holdover")) {            
            properties.remove("holdover");
        } 
        if (properties.isSet("selectionintensity")) {
          properties.remove("selectionintensity");
        } 
        if (properties.isSet("holdoverpenalty")) {
            properties.remove("holdoverpenalty");
        } 
        if (properties.isSet("stopgen")) {
             properties.remove("stopgen");
        } 
        if (properties.isSet("stoptime")) {
             properties.remove("stoptime");
        } 
        if (properties.isSet("startoptprec")) {
             properties.remove("startoptprec");
        } 
        if (properties.isSet("minoptprec")) {
             properties.remove("minoptprec");
        } 
        if (properties.isSet("numberofprecreductions")) {
             properties.remove("numberofprecreductions");
        } 
        if (properties.isSet("treerejectionthreshold")) {
             properties.remove("treerejectionthreshold");
        } 
         
        //--Settings controlling the proportions of the mutation types
        if (properties.isSet("topoweight")) {
             properties.remove("topoweight");
        } 
        if (properties.isSet("modweight")) {
             properties.remove("modweight");
        } 
        if (properties.isSet("brlenweight")) {
             properties.remove("brlenweight");
        } 
        if (properties.isSet("randnniweight")) {
             properties.remove("randnniweight");
        } 
        if (properties.isSet("randsprweight")) {
             properties.remove("randsprweight");
        } 
        if (properties.isSet("limsprweight")) {
             properties.remove("limsprweight");
        } 
        if (properties.isSet("intervallength")) {
             properties.remove("intervallength");
        } 
        
        if (properties.isSet("intervalstostore")) {
             properties.remove("intervalstostore");
        } 
        if (properties.isSet("limsprrange")) {
             properties.remove("limsprrange");
        } 
        if (properties.isSet("meanbrlenmuts")) {
             properties.remove("meanbrlenmuts");
        } 
        if (properties.isSet("gammashapebrlen")) {
             properties.remove("gammashapebrlen");
        } 
         if (properties.isSet("gammashapemodel")) {
             properties.remove("gammashapemodel");
        } 
        
         if (properties.isSet("uniqueswapbias")) {
             properties.remove("uniqueswapbias");
        }  
          if (properties.isSet("distanceswapbias")) {
             properties.remove("distanceswapbias");
        } 
        
        
        
        //--Replace the defaut properties
        this.setProperties(properties);
}//GEN-LAST:event_Pre_Set_configActionPerformed

    private void searchrepsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchrepsActionPerformed
        String item=(String)this.searchreps.getSelectedItem();
        if (item.equals("default")) {
            properties.remove("searchreps");
        } else properties.put("searchreps",item);
}//GEN-LAST:event_searchrepsActionPerformed

    private void AllowedGap_jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AllowedGap_jComboBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AllowedGap_jComboBox2ActionPerformed

    private void selectionintensityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectionintensityActionPerformed
        String item=(String)this.selectionintensity.getSelectedItem();
        if (item.equals("default")) {
            properties.remove("selectionintensity");
        } else properties.put("selectionintensity",item);
    }//GEN-LAST:event_selectionintensityActionPerformed

    private void stopgenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopgenActionPerformed
       String item=(String)this.stopgen.getSelectedItem();
        if (item.equals("default")) {
            properties.remove("stopgen");
        } else properties.put("stopgen",item);
    }//GEN-LAST:event_stopgenActionPerformed

    private void stopgenFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_stopgenFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_stopgenFocusLost

    private void stoptimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stoptimeActionPerformed
         String item=(String)this.stoptime.getSelectedItem();
        if (item.equals("default")) {
            properties.remove("stoptime");
        } else properties.put("stoptime",item);
    }//GEN-LAST:event_stoptimeActionPerformed

    private void startoptprecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startoptprecActionPerformed
         String item=(String)this.startoptprec.getSelectedItem();
        if (item.equals("default")) {
            properties.remove("startoptprec");
        } else properties.put("startoptprec",item);
    }//GEN-LAST:event_startoptprecActionPerformed

    private void minoptprecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minoptprecActionPerformed
        String item=(String)this.minoptprec.getSelectedItem();
        if (item.equals("default")) {
            properties.remove("minoptprec");
        } else properties.put("minoptprec",item);
    }//GEN-LAST:event_minoptprecActionPerformed

    private void numberofprecreductionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numberofprecreductionsActionPerformed
        String item=(String)this.numberofprecreductions.getSelectedItem();
        if (item.equals("default")) {
            properties.remove("numberofprecreductions");
        } else properties.put("numberofprecreductions",item);
    }//GEN-LAST:event_numberofprecreductionsActionPerformed

    private void treerejectionthresholdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_treerejectionthresholdActionPerformed
        String item=(String)this.treerejectionthreshold.getSelectedItem();
        if (item.equals("default")) {
            properties.remove("treerejectionthreshold");
        } else properties.put("treerejectionthreshold",item);
    }//GEN-LAST:event_treerejectionthresholdActionPerformed

    private void topoweightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topoweightActionPerformed
         String item=(String)this.topoweight.getSelectedItem();
        if (item.equals("default")) {
            properties.remove("topoweight");
        } else properties.put("topoweight",item);
    }//GEN-LAST:event_topoweightActionPerformed

    private void modweightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modweightActionPerformed
        String item=(String)this.modweight.getSelectedItem();
        if (item.equals("default")) {
            properties.remove("modweight");
        } else properties.put("modweight",item);
    }//GEN-LAST:event_modweightActionPerformed

    private void brlenweightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brlenweightActionPerformed
        String item=(String)this.brlenweight.getSelectedItem();
        if (item.equals("default")) {
            properties.remove("brlenweight");
        } else properties.put("brlenweight",item);
    }//GEN-LAST:event_brlenweightActionPerformed

    private void randnniweightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randnniweightActionPerformed
         String item=(String)this.randnniweight.getSelectedItem();
        if (item.equals("default")) {
            properties.remove("randnniweight");
        } else properties.put("randnniweight",item);
    }//GEN-LAST:event_randnniweightActionPerformed

    private void randsprweightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randsprweightActionPerformed
        String item=(String)this.randsprweight.getSelectedItem();
        if (item.equals("default")) {
            properties.remove("randsprweight");
        } else properties.put("randsprweight",item);
    }//GEN-LAST:event_randsprweightActionPerformed

    private void limsprweightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limsprweightActionPerformed
       String item=(String)this.limsprweight.getSelectedItem();
        if (item.equals("default")) {
            properties.remove("limsprweight");
        } else properties.put("limsprweight",item);
    }//GEN-LAST:event_limsprweightActionPerformed

    private void intervallengthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_intervallengthActionPerformed
        String item=(String)this.intervallength.getSelectedItem();
        if (item.equals("default")) {
            properties.remove("intervallength");
        } else properties.put("intervallength",item);
    }//GEN-LAST:event_intervallengthActionPerformed

    private void intervalstostoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_intervalstostoreActionPerformed
         String item=(String)this.intervalstostore.getSelectedItem();
        if (item.equals("default")) {
            properties.remove("intervalstostore");
        } else properties.put("intervalstostore",item);
    }//GEN-LAST:event_intervalstostoreActionPerformed

    private void limsprrangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limsprrangeActionPerformed
         String item=(String)this.limsprrange.getSelectedItem();
        if (item.equals("default")) {
            properties.remove("limsprrange");
        } else properties.put("limsprrange",item);
    }//GEN-LAST:event_limsprrangeActionPerformed

    private void meanbrlenmutsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_meanbrlenmutsActionPerformed
        String item=(String)this.meanbrlenmuts.getSelectedItem();
        if (item.equals("default")) {
            properties.remove("meanbrlenmuts");
        } else properties.put("meanbrlenmuts",item);
    }//GEN-LAST:event_meanbrlenmutsActionPerformed

    private void gammashapebrlenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gammashapebrlenActionPerformed
       String item=(String)this.gammashapebrlen.getSelectedItem();
        if (item.equals("default")) {
            properties.remove("gammashapebrlen");
        } else properties.put("gammashapebrlen",item);
    }//GEN-LAST:event_gammashapebrlenActionPerformed

    private void gammashapemodelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gammashapemodelActionPerformed
        String item=(String)this.gammashapemodel.getSelectedItem();
        if (item.equals("default")) {
            properties.remove("gammashapemodel");
        } else properties.put("gammashapemodel",item);
    }//GEN-LAST:event_gammashapemodelActionPerformed

    private void uniqueswapbiasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uniqueswapbiasActionPerformed
        String item=(String)this.uniqueswapbias.getSelectedItem();
        if (item.equals("default")) {
            properties.remove("uniqueswapbias");
        } else properties.put("uniqueswapbias",item);
    }//GEN-LAST:event_uniqueswapbiasActionPerformed

    private void distanceswapbiasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_distanceswapbiasActionPerformed
        String item=(String)this.distanceswapbias.getSelectedItem();
        if (item.equals("default")) {
            properties.remove("distanceswapbias");
        } else properties.put("distanceswapbias",item);
    }//GEN-LAST:event_distanceswapbiasActionPerformed

    private void Fast_Evolutionnary_modeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Fast_Evolutionnary_modeActionPerformed
        String item=(String)this.Fast_Evolutionnary_mode.getSelectedItem();
        properties.put("Fast_Evolutionnary_mode",item);
        //--See https://www.nescent.org/wg_garli/FAQ#Model_choices
        if (item.equals("JC")) {
            properties.put("ratematrix","1rate");
            properties.put("statefrequencies","equal");
            properties.put("invariantsites","none");
            properties.put("ratehetmodel", "none");
            properties.put("numratecats", "1");
            properties.put("Fast_Evolutionnary_mode2", "Custom");
        }        
        if (item.equals("F81")) {
           properties.put("ratematrix","1rate");
            properties.put("statefrequencies","estimate");
            properties.put("invariantsites","none");
            properties.put("ratehetmodel", "none");
            properties.put("numratecats", "1");
            properties.put("Fast_Evolutionnary_mode2", "Custom");
        }
        if (item.equals("K80")) {
           properties.put("ratematrix","2rate");
            properties.put("statefrequencies","equal");
            properties.put("invariantsites","none");
            properties.put("ratehetmodel", "none");
            properties.put("numratecats", "1");
            properties.put("Fast_Evolutionnary_mode2", "Custom");
        }
        if (item.equals("HKY")) {
           properties.put("ratematrix","2rate");
            properties.put("statefrequencies","estimate");
            properties.put("invariantsites","none");
            properties.put("ratehetmodel", "none");
            properties.put("numratecats", "1");
            properties.put("Fast_Evolutionnary_mode2", "Custom");
        }
        if (item.equals("TrNef")) {
           properties.put("ratematrix","(0 1 0 0 2 0)");
            properties.put("statefrequencies","equal");
            properties.put("invariantsites","none");
            properties.put("ratehetmodel", "none");
            properties.put("numratecats", "1");
            properties.put("Fast_Evolutionnary_mode2", "Custom");
        }
        if (item.equals("TrN")) {
           properties.put("ratematrix","(0 1 0 0 2 0)");
            properties.put("statefrequencies","estimate");
            properties.put("invariantsites","none");
            properties.put("ratehetmodel", "none");
            properties.put("numratecats", "1");
            properties.put("Fast_Evolutionnary_mode2", "Custom");
        }
        if (item.equals("K3P")) {
           properties.put("ratematrix","(0 1 2 2 1 0)");
            properties.put("statefrequencies","equal");
            properties.put("invariantsites","none");
            properties.put("ratehetmodel", "none");
            properties.put("numratecats", "1");
            properties.put("Fast_Evolutionnary_mode2", "Custom");
        }
        if (item.equals("K3Puf")) {
           properties.put("ratematrix","(0 1 2 2 1 0)");
            properties.put("statefrequencies","estimate");
            properties.put("invariantsites","none");
            properties.put("ratehetmodel", "none");
            properties.put("numratecats", "1");
            properties.put("Fast_Evolutionnary_mode2", "Custom");
        }
        if (item.equals("TIMef")) {
           properties.put("ratematrix","(0 1 2 2 3 0)");
            properties.put("statefrequencies","equal");
            properties.put("invariantsites","none");
            properties.put("ratehetmodel", "none");
            properties.put("numratecats", "1");
            properties.put("Fast_Evolutionnary_mode2", "Custom");
        }
        if (item.equals("TIM")) {
           properties.put("ratematrix","(0 1 2 2 3 0)");
            properties.put("statefrequencies","estimate");
            properties.put("invariantsites","none");
            properties.put("ratehetmodel", "none");
            properties.put("numratecats", "1");
            properties.put("Fast_Evolutionnary_mode2", "Custom");
        }
        if (item.equals("TVMef")) {
           properties.put("ratematrix","(0 1 2 3 1 4)");
            properties.put("statefrequencies","equal");
            properties.put("invariantsites","none");
            properties.put("ratehetmodel", "none");
            properties.put("numratecats", "1");
            properties.put("Fast_Evolutionnary_mode2", "Custom");
        }
        if (item.equals("TVM")) {
           properties.put("ratematrix","(0 1 2 3 1 4)");
            properties.put("statefrequencies","estimate");
            properties.put("invariantsites","none");
            properties.put("ratehetmodel", "none");
            properties.put("numratecats", "1");
            properties.put("Fast_Evolutionnary_mode2", "Custom");
        }
        if (item.equals("SYM")) {
           properties.put("ratematrix","6rate");
            properties.put("statefrequencies","equal");
            properties.put("invariantsites","none");
            properties.put("ratehetmodel", "none");
            properties.put("numratecats", "1");
            properties.put("Fast_Evolutionnary_mode2", "Custom");
        }
        if (item.equals("GTR")) {
           properties.put("ratematrix","6rate");
            properties.put("statefrequencies","estimate");
            properties.put("invariantsites","none");
            properties.put("ratehetmodel", "none");
            properties.put("numratecats", "1");
            properties.put("Fast_Evolutionnary_mode2", "Custom");
        }
        this.setProperties(properties);
    }//GEN-LAST:event_Fast_Evolutionnary_modeActionPerformed

    private void bootstraprepsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bootstraprepsActionPerformed
        String item=(String)this.bootstrapreps.getSelectedItem();
        if (item.equals("default")) {
            properties.remove("bootstrapreps");
        } else properties.put("bootstrapreps",item);
    }//GEN-LAST:event_bootstraprepsActionPerformed

    private void attachmentspertaxonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attachmentspertaxonActionPerformed
        String item=(String)this.attachmentspertaxon.getSelectedItem();
        if (item.equals("default")) {
            properties.remove("attachmentspertaxon");
        } else properties.put("attachmentspertaxon",item);
    }//GEN-LAST:event_attachmentspertaxonActionPerformed

    private void genthreshfortopotermActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genthreshfortopotermActionPerformed
       String item=(String)this.genthreshfortopoterm.getSelectedItem();
        if (item.equals("default")) {
            properties.remove("genthreshfortopoterm");
        } else properties.put("genthreshfortopoterm",item);
    }//GEN-LAST:event_genthreshfortopotermActionPerformed

    private void scorethreshfortermActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scorethreshfortermActionPerformed
        String item=(String)this.scorethreshforterm.getSelectedItem();
        if (item.equals("default")) {
            properties.remove("scorethreshforterm");
        } else properties.put("scorethreshforterm",item);     
    }//GEN-LAST:event_scorethreshfortermActionPerformed

    private void significanttopochangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_significanttopochangeActionPerformed
        String item=(String)this.significanttopochange.getSelectedItem();
        if (item.equals("default")) {
            properties.remove("significanttopochange");
        } else properties.put("significanttopochange",item); 
    }//GEN-LAST:event_significanttopochangeActionPerformed

    private void availablememoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_availablememoryActionPerformed
       String item=(String)this.availablememory.getSelectedItem();
        if (item.equals("default")) {
            properties.remove("availablememory");
        } else properties.put("availablememory",item);    
    }//GEN-LAST:event_availablememoryActionPerformed

    private void availablememoryFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_availablememoryFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_availablememoryFocusLost

    private void OutgroupjCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OutgroupjCheckBox1ActionPerformed
        if (this.OutgroupjCheckBox1.isSelected()){
            this.Outgroup_jTextField.setEnabled(true);
            properties.put("outgroup", this.Outgroup_jTextField.getText());
        } else{
            properties.remove("outgroup");
            this.Outgroup_jTextField.setEnabled(false);
        }
}//GEN-LAST:event_OutgroupjCheckBox1ActionPerformed

    private void Outgroup_jTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Outgroup_jTextFieldFocusLost
        properties.put("outgroup",this.Outgroup_jTextField.getText());
}//GEN-LAST:event_Outgroup_jTextFieldFocusLost

    private void nindivsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nindivsActionPerformed
      properties.put("nindivs",this.nindivs.getSelectedItem());
    }//GEN-LAST:event_nindivsActionPerformed

    private void holdoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_holdoverActionPerformed
        properties.put("holdover",this.holdover.getSelectedItem());
    }//GEN-LAST:event_holdoverActionPerformed

    private void holdoverpenaltyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_holdoverpenaltyActionPerformed
        properties.put("holdoverpenalty", this.holdoverpenalty.getSelectedItem());
    }//GEN-LAST:event_holdoverpenaltyActionPerformed

    private void Fast_Evolutionnary_mode2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Fast_Evolutionnary_mode2ActionPerformed
        //--See https://www.nescent.org/wg_garli/FAQ#Model_choices
        String item=(String)this.Fast_Evolutionnary_mode2.getSelectedItem();
        properties.put("Fast_Evolutionnary_mode2", item);
        if (item.equals("+I")) {
            properties.put("invariantsites","estimate");
            properties.put("ratehetmodel","none");
            properties.put("numratecats","1");
        } 
        if (item.equals("+G")) {
            properties.put("ratehetmodel","gamma");
            properties.put("numratecats","4");
            properties.put("invariantsites","none");
        }
        if (item.equals("+I+G")) {
            properties.put("invariantsites","estimate");
            properties.put("ratehetmodel","gamma");
            properties.put("numratecats","4");
        }
        this.setProperties(properties);
    }//GEN-LAST:event_Fast_Evolutionnary_mode2ActionPerformed

  
    /**
     * This set the Properties
     * @param properties
     */
    public void setProperties(workflow_properties properties) {
        this.properties=properties;
        setTitle(properties.getName());      
        this.NamejTextField.setText(properties.getName());
        
        //if (properties.isSet("garli.conf")) this.jTextArea1.setText(properties.get("garli.conf"));        
         
         //if (properties.isSet("Description")) this.Notice.setText(properties.get("Description"));
         
         if (properties.isSet("availablememory")) this.availablememory.setSelectedItem(properties.get("availablememory"));
         if (properties.isSet("Fast_Evolutionnary_mode")) this.Fast_Evolutionnary_mode.setSelectedItem(properties.get("Fast_Evolutionnary_mode"));
         if (properties.isSet("Fast_Evolutionnary_mode2")) this.Fast_Evolutionnary_mode2.setSelectedItem(properties.get("Fast_Evolutionnary_mode2"));
         if (properties.isSet("searchreps")) this.searchreps.setSelectedItem(properties.get("searchreps"));
         if (properties.isSet("genthreshfortopoterm")) this.genthreshfortopoterm.setSelectedItem(properties.get("genthreshfortopoterm"));
         if (properties.isSet("attachmentspertaxon")) this.attachmentspertaxon.setSelectedItem(properties.get("attachmentspertaxon"));
         if (properties.isSet("scorethreshforterm")) this.scorethreshforterm.setSelectedItem(properties.get("scorethreshforterm"));
         if (properties.isSet("significanttopochange")) this.significanttopochange.setSelectedItem(properties.get("significanttopochange"));
         
         
          if (properties.isSet("outgroup")) {
            this.Outgroup_jTextField.setEnabled(true);
            this.OutgroupjCheckBox1.setSelected(true);
            this.Outgroup_jTextField.setText(properties.get("outgroup"));
        } else {
            this.Outgroup_jTextField.setText("1");
            this.OutgroupjCheckBox1.setSelected(false);
            this.Outgroup_jTextField.setEnabled(false);
        }
         
         //--Model
         if (properties.isSet("datatype")) this.datatype.setSelectedItem(properties.get("datatype"));
         if (properties.isSet("Pre_Set")) this.Pre_Set_config.setSelectedItem(properties.get("Pre_Set"));
         //--TO DO Enforce datatype specific option here
         
         if (properties.isSet("bootstrapreps")) this.bootstrapreps.setSelectedItem(properties.get("bootstrapreps"));
         if (properties.isSet("statefrequencies")) this.statefrequencies.setSelectedItem(properties.get("statefrequencies"));
         if (properties.isSet("ratematrix")) this.ratematrix.setSelectedItem(properties.get("ratematrix"));
         if (properties.isSet("ratehetmodel")) this.ratehetmodel.setSelectedItem(properties.get("ratehetmodel"));
         if (properties.isSet("invariantsites")) this.invariantsites.setSelectedItem(properties.get("invariantsites"));
         if (properties.isSet("numratecats")) this.numratecats.setSelectedItem(properties.get("numratecats"));
         //--Population settings
         if (properties.isSet("nindivs")) this.nindivs.setSelectedItem(properties.get("nindivs"));
         if (properties.isSet("holdover")) this.holdover.setSelectedItem(properties.get("holdover"));
         if (properties.isSet("holdoverpenalty")) this.holdoverpenalty.setSelectedItem(properties.get("holdoverpenalty"));
         if (properties.isSet("selectionintensity")) this.selectionintensity.setSelectedItem(properties.get("selectionintensity"));
         if (properties.isSet("stopgen")) this.stopgen.setSelectedItem(properties.get("stopgen"));
         if (properties.isSet("stoptime")) this.stoptime .setSelectedItem(properties.get("stoptime"));
         //--Branch-length optimization settings
         if (properties.isSet("startoptprec")) this.startoptprec.setSelectedItem(properties.get("startoptprec"));
         if (properties.isSet("minoptprec")) this.minoptprec.setSelectedItem(properties.get("minoptprec"));
         if (properties.isSet("numberofprecreductions")) this.numberofprecreductions.setSelectedItem(properties.get("numberofprecreductions"));
         if (properties.isSet("treerejectionthreshold")) this.treerejectionthreshold.setSelectedItem(properties.get("treerejectionthreshold"));         
         //--Settings controlling the proportions of the mutation types
         if (properties.isSet("topoweight")) this.topoweight .setSelectedItem(properties.get("topoweight"));
         if (properties.isSet("modweight")) this.modweight.setSelectedItem(properties.get("modweight"));
         if (properties.isSet("brlenweight")) this.brlenweight .setSelectedItem(properties.get("brlenweight"));
         if (properties.isSet("randnniweight")) this.randnniweight.setSelectedItem(properties.get("randnniweight"));
         if (properties.isSet("randsprweight")) this.randsprweight.setSelectedItem(properties.get("randsprweight"));
         if (properties.isSet("limsprweight")) this.limsprweight.setSelectedItem(properties.get("limsprweight"));
         if (properties.isSet("intervallength")) this.intervallength .setSelectedItem(properties.get("intervallength"));
         if (properties.isSet("intervalstostore")) this.intervalstostore.setSelectedItem(properties.get("intervalstostore"));
         //--Settings controlling mutation details
         if (properties.isSet("limsprrange")) this.limsprrange.setSelectedItem(properties.get("limsprrange"));
         if (properties.isSet("meanbrlenmuts")) this.meanbrlenmuts .setSelectedItem(properties.get("meanbrlenmuts"));
         if (properties.isSet("gammashapebrlen")) this.gammashapebrlen.setSelectedItem(properties.get("gammashapebrlen"));
         if (properties.isSet("gammashapemodel")) this.gammashapemodel.setSelectedItem(properties.get("gammashapemodel"));
         if (properties.isSet("uniqueswapbias")) this.uniqueswapbias.setSelectedItem(properties.get("uniqueswapbias"));  
         if (properties.isSet("distanceswapbias")) this.distanceswapbias .setSelectedItem(properties.get("distanceswapbias"));   
    }

      

  

    ///////////////////////////////////////////////////////////////////////////
    /// DISPLAY MAIN FUNCTION

    public void display(workflow_properties properties) {
        initComponents();

        setIconImage(Config.image);
        setProperties(properties);
        //this.jTextArea1.setFont(new java.awt.Font(Font.MONOSPACED, Font.PLAIN, 11));
        // Set position 
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension d = getSize();
        setLocation((screenSize.width-d.width)/2,
					(screenSize.height-d.height)/2);
        this.setAlwaysOnTop(true);
        this.setProperties(properties);
        this.setVisible(true);
    }

     public void saveImage(String filename) {
        BufferedImage bi;
        try {
            bi = new Robot().createScreenCapture(this.getBounds()); 
            ImageIO.write(bi, "png", new File(filename));
            this.setVisible(false);
        } catch (Exception ex) {
           Config.log("Unable to save "+filename+" dialog image");
        }            
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox AllowedGap_jComboBox2;
    private javax.swing.JButton ClosejButton;
    private javax.swing.JComboBox Fast_Evolutionnary_mode;
    private javax.swing.JComboBox Fast_Evolutionnary_mode2;
    private javax.swing.JTextField NamejTextField;
    private javax.swing.JTextField Outgroup_jTextField;
    private javax.swing.JCheckBox OutgroupjCheckBox1;
    private javax.swing.JComboBox Pre_Set_config;
    private javax.swing.JComboBox attachmentspertaxon;
    private javax.swing.JComboBox availablememory;
    private javax.swing.JComboBox bootstrapreps;
    private javax.swing.JComboBox brlenweight;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox datatype;
    private javax.swing.JComboBox distanceswapbias;
    private javax.swing.JComboBox gammashapebrlen;
    private javax.swing.JComboBox gammashapemodel;
    private javax.swing.JComboBox geneticcode;
    private javax.swing.JComboBox genthreshfortopoterm;
    private javax.swing.JComboBox holdover;
    private javax.swing.JComboBox holdoverpenalty;
    private javax.swing.JComboBox intervallength;
    private javax.swing.JComboBox intervalstostore;
    private javax.swing.JComboBox invariantsites;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JComboBox limsprrange;
    private javax.swing.JComboBox limsprweight;
    private javax.swing.JComboBox meanbrlenmuts;
    private javax.swing.JComboBox minoptprec;
    private javax.swing.JComboBox modweight;
    private javax.swing.JComboBox nindivs;
    private javax.swing.JComboBox nst_ComboBox1;
    private javax.swing.JComboBox numberofprecreductions;
    private javax.swing.JComboBox numratecats;
    private javax.swing.JComboBox randnniweight;
    private javax.swing.JComboBox randsprweight;
    private javax.swing.JComboBox ratehetmodel;
    private javax.swing.JComboBox ratematrix;
    private javax.swing.JButton run_jButton;
    private javax.swing.JComboBox scorethreshforterm;
    private javax.swing.JComboBox searchreps;
    private javax.swing.JComboBox selectionintensity;
    private javax.swing.JComboBox significanttopochange;
    private javax.swing.JComboBox startoptprec;
    private javax.swing.JComboBox statefrequencies;
    private javax.swing.JComboBox stopgen;
    private javax.swing.JComboBox stoptime;
    private javax.swing.JComboBox topoweight;
    private javax.swing.JComboBox treerejectionthreshold;
    private javax.swing.JComboBox uniqueswapbias;
    // End of variables declaration//GEN-END:variables



}
