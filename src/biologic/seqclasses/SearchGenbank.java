/*
 *  Armadillo Workflow Platform v1.0
 *  A simple pipeline system for phylogenetic analysis
 *  
 *  Copyright (C) 2009-2011  Etienne Lord, Mickael Leclercq
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package biologic.seqclasses;

 
import biologic.InfoSequence;
import configuration.Util;
import biologic.seqclasses.*;
import configuration.Config;
import database.databaseFunction;
import editor.GenbankJDialog;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.InputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import javax.swing.SwingWorker;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;
import org.ensembl.compara.driver.ComparaDriver;
import org.ensembl.compara.driver.ComparaDriverFactory;
import org.ensembl.datamodel.Gene;
import org.ensembl.datamodel.Location;
import org.ensembl.driver.CoreDriver;
import org.ensembl.driver.CoreDriverFactory;
import org.ensembl.registry.Registry;

/**
 * Show a Dialog with search and Import capability of Sequence from Genbank and Ensembl
 * @author Etienne Lord, Michael Leclerq, ...
 * @since Avril 2009
 */
public class SearchGenbank extends javax.swing.JDialog {
    
    //The project pour que l'on ajoute les nouvelle sequence au projet
    java.awt.Frame parent;                              //JFrame parent
    //Project project;
    Config config=new Config();
    databaseFunction df=new databaseFunction();
    SwingWorker<Integer, InfoSequence>  infoSwingWorker;
    SwingWorker<Integer, InfoSequence>  loadSwingWorker;
    SwingWorker<Integer, Object>        loadSwingWorker2; //--To load Genbank Info
    //--Selected sequences
    static DatabaseInfoSummary databaseInfoSummary=new DatabaseInfoSummary();
    static DatabaseHGNC databasehgnc=new DatabaseHGNC();
    String lastSearch="";
    int lastSearchType=0;
    InformationJDialog loading;
    boolean stateSelected=true;         //do we Select or Unselect
    
    //--Status and message
    private int status=-1;
    static final int status_done=1;
    static final int status_import=2;
    private static final String default_search_string=" Type Search String Here";

    /** Creates new form SearchGenbank */
    public SearchGenbank(java.awt.Frame parent) {
        super(parent, true);
        
        this.parent=parent;
                //this.lastSearchType=project.lastSearchType;

        initComponents();
        //Initialise last options
        this.RechercheJTextField.setText(default_search_string);
        this.RechercheJTextField.setForeground(Color.LIGHT_GRAY);
        //We have already data from a last search
        this.Database_ComboBox.setSelectedIndex(0);
        Message("No sequence searched yet...","");
        if (databaseInfoSummary.getSize()>0) {
            Message("Last search found "+databaseInfoSummary.getSize()+" result(s)","");
            GenbankTableModel tm=(GenbankTableModel)this.jTable1.getModel();
            tm.setData(databaseInfoSummary.Data);
            tm.fireTableDataChanged();
            this.jTable1.setModel(tm);
        }
        //Enable Import Button if we have selected sequence, or disable it
        if (databaseInfoSummary.getNbSelected()>0) {
            this.ImportSequencejButton.setEnabled(true);
        }  else {
            this.ImportSequencejButton.setEnabled(false);
        }

        // Set position and set Visible
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension d = getSize();
        setLocation((screenSize.width-d.width)/2,
					(screenSize.height-d.height)/2);
        setVisible(true);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel5 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        Search_Jbutton = new javax.swing.JButton();
        RechercheJTextField = new javax.swing.JTextField();
        Stop_jToggleButton = new javax.swing.JToggleButton();
        Database_ComboBox = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jStatusMessage = new javax.swing.JTextField();
        SelectUnSelect_JButton = new javax.swing.JButton();
        Clustering_ComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        ImportSequencejButton = new javax.swing.JButton();
        Done_JButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setTitle("Search Internet");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Search Web Databases"));

        Search_Jbutton.setText("Search");
        Search_Jbutton.setToolTipText("<html>Launch the Search<br>\nIf you search by location on ensembl. See those exemples:<br>\n# \"chromosome:20:50000000-51000000:0\" Bases from both strands of chromosome 20 in the range 50m to 51m using the default version of the \"chromosome\" coordinate system.<br>\n# \"chromosome:20\" All of chromosome 20.<br>\n# \"chromosome:20:33\" All of Chromosome 20 from the 33rd base onwards.<br>\n# \"chromosome_2:20:33\" All of Chromosome 20 from the 33rd base onwards from coordinate system \"chromosome\" version \"2\".<br>\n# \"chromosome:20:33-\" Same.<br>\n# \"chromosome:20:33-40\" All of Chromosome 20 from the 33rd to the 40th base inclusive.<br>\n# \"chromosome:20:33-40:1\" The positive strand of chromosome 20 from the 33rd to the 40 base inclusive.<br>\n# \"chromosome:20:-40\" The first 40 bases of chromosome 20.<br>\n# \"chromosome:20:-:1\" The positive strand of chromosome 20.<br>\n# \"chromosome:x:1000000-2000000\" X chromsome from 10m to 20m bases.<br>\n# \"chromosome:x:1m-2m\" Same.<br>\n# \"chromosome:x:1,000,000-2,000,000:1\" Same.<br>\n# \"chromosome:x:1k-2k\" X chromsome from 1,000 to 2,000 bases. <br>\n</html>");
        Search_Jbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Search_JbuttonActionPerformed(evt);
            }
        });

        RechercheJTextField.setText(" type search string here");
        RechercheJTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                RechercheJTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                RechercheJTextFieldFocusLost(evt);
            }
        });
        RechercheJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                RechercheJTextFieldKeyPressed(evt);
            }
        });

        Stop_jToggleButton.setText("Stop ");
        Stop_jToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Stop_jToggleButtonActionPerformed(evt);
            }
        });

        Database_ComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ncbi (Nucleotides)", "Ncbi (Genome)", "Ncbi (Protein)", "Ncbi (SNP)", "Ncbi (Gene)", "Ncbi (popset)", "HGNC (HUGO Gene Nomenclature Committee)", "Ensembl (All databases)", "Ensembl (Human)", "Ensembl (Human) by Location ", "Ensembl (Mouse)", "Ensembl (Mouse) by Location", "Ensembl (Rat)", "Ensembl (Rat) by Location " }));
        Database_ComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Database_ComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(RechercheJTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 511, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Search_Jbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Stop_jToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(Database_ComboBox, 0, 678, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RechercheJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Stop_jToggleButton)
                    .addComponent(Search_Jbutton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Database_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Results and Informations"));

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new GenbankTableModel());
        TableColumn column = null;
        for (int i = 0; i < jTable1.getColumnCount(); i++) {
            column = jTable1.getColumnModel().getColumn(i);
            //column.setCellRenderer(new InfoSequence_cellRenderer());
            if (i == 3) {
                column.setPreferredWidth(500); //3' Desc column is bigger
            } else if (i ==4) {
                column.setPreferredWidth(100); //4' bp column is bigger
            } else {
                column.setPreferredWidth(50);
            }
        }
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jStatusMessage.setEditable(false);
        jStatusMessage.setForeground(new java.awt.Color(0, 51, 153));
        jStatusMessage.setText("No sequence searched");
        jStatusMessage.setBorder(null);

        SelectUnSelect_JButton.setText("Select / Unselect");
        SelectUnSelect_JButton.setToolTipText("<html>Select or Unselect the current results selection. <br>If nothing is selected, select or unselect all the results</html>");
        SelectUnSelect_JButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectUnSelect_JButtonActionPerformed(evt);
            }
        });

        Clustering_ComboBox.setEditable(true);
        Clustering_ComboBox.setModel(new javax.swing.DefaultComboBoxModel(config.ClusteringOption));
        Clustering_ComboBox.setToolTipText("Filter your results. Enter a search string");
        Clustering_ComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Clustering_ComboBoxActionPerformed(evt);
            }
        });

        jLabel1.setText("Filter your sequences :");

        ImportSequencejButton.setText("Import selected sequences");
        ImportSequencejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImportSequencejButtonActionPerformed(evt);
            }
        });

        Done_JButton.setText("Cancel");
        Done_JButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Done_JButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(SelectUnSelect_JButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 324, Short.MAX_VALUE)
                .addComponent(ImportSequencejButton, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Done_JButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Clustering_ComboBox, 0, 584, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 698, Short.MAX_VALUE)
            .addComponent(jStatusMessage, javax.swing.GroupLayout.DEFAULT_SIZE, 698, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Clustering_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jStatusMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Done_JButton)
                    .addComponent(ImportSequencejButton)
                    .addComponent(SelectUnSelect_JButton))
                .addGap(33, 33, 33))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenu1.setText("File");

        jMenuItem1.setText("Save Search");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Load Search");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Search_JbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Search_JbuttonActionPerformed
      Search();
}//GEN-LAST:event_Search_JbuttonActionPerformed

private void Done_JButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Done_JButtonActionPerformed
    if (infoSwingWorker!=null) infoSwingWorker.cancel(true);
    this.status=status_done;
    this.setVisible(false);
}//GEN-LAST:event_Done_JButtonActionPerformed

private void ImportSequencejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportSequencejButtonActionPerformed

    if (databaseInfoSummary.getNbSelected()>0) {
        for (InfoSequence info:databaseInfoSummary.Data) if (info.isSelected()) info.setInDatabase(true);
        if (infoSwingWorker!=null) infoSwingWorker.cancel(true);
        this.status=status_import;
        this.setVisible(false);
    }
}//GEN-LAST:event_ImportSequencejButtonActionPerformed

private void RechercheJTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_RechercheJTextFieldFocusLost
   // Si on a pas de terme de recherche, on remet un texte d'information
        if (getRechercheJTextField().getText().trim().equals("")) {
            this.getRechercheJTextField().setText(default_search_string);
            this.getRechercheJTextField().setForeground(Color.LIGHT_GRAY);
        } else {
            //On ajoute un espace avant la recherche (juste pour faire beau)
            String stri=getRechercheJTextField().getText();
            if (!stri.startsWith(" ")) getRechercheJTextField().setText(" "+stri);
        }
}//GEN-LAST:event_RechercheJTextFieldFocusLost

private void RechercheJTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_RechercheJTextFieldFocusGained
    if (getRechercheJTextField().getText().equals(default_search_string)) {
            this.getRechercheJTextField().setText("");
            this.getRechercheJTextField().setForeground(Color.BLACK);
        } // TODO add your handling code here:
}//GEN-LAST:event_RechercheJTextFieldFocusGained

private void RechercheJTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_RechercheJTextFieldKeyPressed
        char c=evt.getKeyChar(); //Hack to catch V_ENTER key;
        if (c==KeyEvent.VK_ENTER) {
           //1. On regarde si on a quelquechose dans le champs de recherche
            if (getRechercheJTextField().getText().trim().equals("")) {
                //Non, on fait du formatage et on affiche tous
                this.getRechercheJTextField().setText(default_search_string);
                this.getRechercheJTextField().setForeground(Color.LIGHT_GRAY);
            } else {
                Search();
            }
       } //End ENTER CLICKED
}//GEN-LAST:event_RechercheJTextFieldKeyPressed

private void Clustering_ComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Clustering_ComboBoxActionPerformed
    //Update the displayed data in the table
    GenbankTableModel tm=(GenbankTableModel)this.jTable1.getModel();
    int mode=this.getClustering_ComboBox().getSelectedIndex();
    String searchString=(String)this.getClustering_ComboBox().getSelectedItem();
    Pattern range=Pattern.compile("([0-9]*)-([0-9]*)");
    Matcher m=range.matcher(searchString); 
    //System.out.printf("%d Search:%s\n", mode, search);
    //DEfault mode is ALL
    if (mode==0) {
        tm.data.clear();
        tm.setData(databaseInfoSummary.Data);
        Message("Found "+databaseInfoSummary.getSize()+" sequence(s)","");
    } else {
        if (searchString.startsWith(">")) {
               searchString=searchString.substring(1);
               Vector<Integer> resultIndex=databaseInfoSummary.search(searchString, databaseInfoSummary.MODE_LENMORE);
                tm.data.clear();
                for (Integer index:resultIndex) {
                    tm.addData(databaseInfoSummary.Data.get(index));
                }
                Message("Found "+resultIndex.size()+" sequence(s)","");
            } else
            if (searchString.startsWith("<")) {
               searchString=searchString.substring(1);
                Vector<Integer> resultIndex=databaseInfoSummary.search(searchString, databaseInfoSummary.MODE_LENLESS);
                tm.data.clear();
                for (Integer index:resultIndex) {
                    tm.addData(databaseInfoSummary.Data.get(index));
                }
                Message("Found "+resultIndex.size()+" sequence(s)","");

            } else 
            //--Range
             if (m.find()) {
                try {
                    int number1=Integer.valueOf(m.group(1));
                    int number2=Integer.valueOf(m.group(2));
                     Vector<Integer> resultIndex=databaseInfoSummary.search(number1, number2);
                    tm.data.clear();
                    for (Integer index:resultIndex) {
                        tm.addData(databaseInfoSummary.Data.get(index));
                    }
                    Message("Found "+resultIndex.size()+" sequence(s)","");                   
                } catch(Exception e) {}
            }              
            else {
               //--Normal search
             Vector<Integer> resultIndex=databaseInfoSummary.search(searchString, databaseInfoSummary.MODE_ALL);
                tm.data.clear();
                for (Integer index:resultIndex) {
                    tm.addData(databaseInfoSummary.Data.get(index));
                }
                Message("Found "+resultIndex.size()+" sequence(s)","");
           }
    }
    tm.fireTableDataChanged();
    this.jTable1.setModel(tm);
}//GEN-LAST:event_Clustering_ComboBoxActionPerformed

private void Stop_jToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Stop_jToggleButtonActionPerformed
   if (this.Stop_jToggleButton.isSelected()) {
       if (infoSwingWorker!=null) infoSwingWorker.cancel(true);
       this.Stop_jToggleButton.setText("Restart");
   } else {
       loadInfoSummary2();
       this.Stop_jToggleButton.setText("Stop");
   }
}//GEN-LAST:event_Stop_jToggleButtonActionPerformed

private void Database_ComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Database_ComboBoxActionPerformed
    String db=(String)this.getDatabase_ComboBox().getSelectedItem();
    lastSearchType=this.getDatabase_ComboBox().getSelectedIndex();
    if (db.startsWith("HGNC")) {
        if (databasehgnc.isEmpty()) {
            //Load database before we can use it      
            Message("Loading HGNC database...", "");
            if (!loadHGNCdatabase(config.get("HGNCData"))) {
                MessageError("Unable to load HGNC - Make sure you have the file "+config.get("HGNCData"),"");
                String msg="<html>Warning, unable to load local HGNC database?<br><br>Do you want to download it?</html>";
                Object[] options = {"Yes","No","Cancel"};
                int n = JOptionPane.showOptionDialog(this,msg,"Unable to load HGNC - Make sure you have the file "+config.get("HGNCData"),JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,options, options[2]);
                switch(n) {
                    case 0:downloadHGNC();
                           break;
                    case 1:
                    default:
                }

            }
        }
    }
}//GEN-LAST:event_Database_ComboBoxActionPerformed

private void SelectUnSelect_JButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectUnSelect_JButtonActionPerformed
    GenbankTableModel tm=(GenbankTableModel)this.jTable1.getModel();
    //What do we do?
    int[] index=this.jTable1.getSelectedRows();
    //CAS 1. On met tout a select ou unselect
    if (index.length==0) {
        for (InfoSequence s:tm.data) s.setSelected(stateSelected);
        stateSelected=!stateSelected;
    } else {
        //CAS 2. Inversion de la sélection
        for (int i:index) {
            i=this.jTable1.convertRowIndexToModel(i);
            tm.data.get(i).setSelected(!tm.data.get(i).isSelected());
        }
        
    }
    tm.updateNbSelected();
    tm.fireTableDataChanged();
    this.jTable1.setModel(tm);
    if (tm.getNbSelected()>0) {
        this.ImportSequencejButton.setEnabled(true);
    } else {
        this.ImportSequencejButton.setEnabled(false);
    }
}//GEN-LAST:event_SelectUnSelect_JButtonActionPerformed

private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
   displaySelected();
}//GEN-LAST:event_jTable1MouseClicked

private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed
    displaySelected();
}//GEN-LAST:event_jTable1KeyPressed

private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
    if (infoSwingWorker!=null) infoSwingWorker.cancel(true);
    this.status=status_done;
    this.setVisible(false);
}//GEN-LAST:event_formWindowClosed

private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
    JFileChooser jf=new JFileChooser();
        jf.setName("Loading search...");
        int result=jf.showOpenDialog(this);
            //CAS 1: On reussi a choisir un fichier
        if (result==JFileChooser.APPROVE_OPTION) {
             String filename=jf.getSelectedFile().getAbsolutePath().toLowerCase();
              if (databaseInfoSummary.loadResults(filename)) {
                 GenbankTableModel tm =(GenbankTableModel)jTable1.getModel();
                    tm.data.clear();
                    tm.setData(databaseInfoSummary.Data);
                    Message("Done loading "+databaseInfoSummary.getSize()+" sequence(s) information from "+filename,"");
                    tm.fireTableDataChanged();
                    jTable1.setModel(tm);
              } else MessageError("Error loading search from "+filename, "");
        }
}//GEN-LAST:event_jMenuItem2ActionPerformed

private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
     JFileChooser jf=new JFileChooser();
        jf.setName("Saving search in Excel compatible format...");
        int result=jf.showSaveDialog(this);
            //CAS 1: On reussi a choisir un fichier
        if (result==JFileChooser.APPROVE_OPTION) {
             String filename=jf.getSelectedFile().getAbsolutePath().toLowerCase();
              if (databaseInfoSummary.saveResults(filename, lastSearch)) {
                    Message("Done saving "+databaseInfoSummary.getSize()+" results to "+filename,"");
              } else MessageError("Error saving search to "+filename, "");
        }
}//GEN-LAST:event_jMenuItem1ActionPerformed
/**
 * Helper SwingWorker to Download Genbank info
 * @param result
 * @return
 */
private boolean displayGenbank(Vector<InfoSequence> result) {
        final Downloader bio = new Downloader(); //Biologic object to assist in downloding
        boolean do_force_download=false;
        boolean ask_for_download_hgnc_from_ensembl=true;
        boolean download_hgnc_from_ensembl=false; //TO DO
        //int loadingIconType=InformationJDialog.mode_Ncbi; //Default Loading Screen
        final Vector<String>GenbankOutput=new Vector<String>();
        final GenbankJDialog genbankJDialog=new GenbankJDialog();
       //1. Set filename
       for (int i=result.size()-1; i>-1; i--) {
           InfoSequence search=result.get(i);
           //Set the filename and try to locate the file
           search.setFastaFilename(config.tmpDir()+File.separator+search.getAccession()+".fasta");
           search.setGenbankFilename(config.tmpDir()+File.separator+search.getAccession()+".gb");
           search.setEnsemblFilename(config.tmpDir()+File.separator+search.getEnsemblid()+".ens");
       }

        //2.Ok, maintenant, on crée une liste des objects à charcher (mais des clones)
        final LinkedList<InfoSequence> queue=new LinkedList<InfoSequence>();
        for (InfoSequence i:result) queue.add(i);

        //3. LAST VARIABLE BEFORE WE START
        final int total_to_download=queue.size();          //Number of file to download
        final boolean force_download=do_force_download;      //Ugly but need to be final
        final boolean download_from_ensembl=download_hgnc_from_ensembl;
        efetch.force_download=true;

        //Debug only
        //for (InfoSummary i:queue) Config.log(i.getAccession()+" "+i.getDescription());
        loadSwingWorker2=new SwingWorker<Integer, Object>()  {
        final int maxload=5; //Max number of loading thread

        /**
         * Function called when done
         */
       @Override
        protected Integer doInBackground() throws Exception {
            efetch fasta=null;
            efetch genbank=null;
            genbankJDialog.ClearText();
            Vector<efetch> download=new Vector<efetch>();
            InfoSequence search=null; //search item
            int downloaded=0;        //numnber of downloaded item

            //CAS 0: Kill the thread if we stop search
            if (isCancelled()&&download.size()>0) {
                for (efetch e:download) e.KillThread();
            }
            //CAS 1: ON LOAD TANT QON A DES ELEMENT DANS LA QUEUE
            while (!isCancelled()&&(queue.size()>0||download.size()>0)) {
                    // 1: On essaie de downloader donc on fait un esummary
                    if (download.size()<maxload&&queue.size()>0) {
                       search=queue.pollFirst();
                       Config.log(search.getAccession()+" "+queue.size());
                       Downloader bio=new Downloader();
                       Config.log(search.getDescription()+" "+search.getGi()+" "+search.getAccession());
                       if (search.getType()==InfoSequence.type_Ncbi) {
                            genbank=bio.getGenbankFile(search.getGi(), search.getGenbankFilename() );
                            genbank.setInfo(search);
                            download.add(genbank);
                       }
                    }

                    // 2: VERIFICATION DES DIFFERENT OBJECT {
                    Vector<efetch> mark_for_destroy=new Vector<efetch>(); // liste des efetch a detruite
                    for (efetch tmp:download) {
                        //CAS 1: FINI
                        if (tmp.getStatus()==efetch.status_done) {
                                mark_for_destroy.add(tmp);
                                //CASE 1. Genbank
                                publish("Loaded "+tmp.getInfo().getDescription()+"  ["+(tmp.getLoaded_Byte()/1024)+" kilobytes ] ");
                                publish(tmp);
                           } //end done
                        //CAS 2: Problem?
                        if (tmp.getStatus()==efetch.status_error) {
                            tmp.retry++;
                            if (tmp.retry<3) {
                                InfoSequence info=tmp.getInfo();
                                if (tmp.getRettype().equals("fasta")||tmp.getRettype().equals("gb")) {
                                    tmp.runthread(info.getGi(),(tmp.getRettype().equals("fasta")?info.getFastaFilename():info.getGenbankFilename()));
                                } else {
                                    tmp.runthreadEnsembl(info.getEnsemblid(),info.getEmsembldb(), info.getEnsemblFilename());
                                }
                            } else {
                                //WE FORGET IT AND THERE WILL BE AN ERRO
                                publish("Unable to load"+tmp.getInfo().getDescription());
                                mark_for_destroy.add(tmp);
                            }
                        }
                        //CAS 3: Running, too long
                        if (tmp.getStatus()==efetch.status_running||tmp.getStatus()==efetch.status_running_query_done) {
                            // 10 sec running? -> Print a message
                            if (tmp.getRunningTime()%10000==0) {
                                String acc="";
                                if (tmp.getInfo().getType()==InfoSequence.type_Ensembl) acc=tmp.getInfo().getEnsemblid();
                                if (tmp.getInfo().getType()==InfoSequence.type_HGNC) acc=tmp.getInfo().getHgncid()+" "+tmp.getInfo().getGi();
                                if (tmp.getInfo().getType()==InfoSequence.type_Ncbi) acc=tmp.getInfo().getAccession();
                                String msg="Still searching for "+ acc+". Searching for [ "+(tmp.getRunningTime()/1000)+" sec ] ["+(tmp.getLoaded_Byte()/Util.Mb)+" megabytes ]";
                                publish(msg);
                            }
                            // 12 Min running?-> Restart thread
                            if (tmp.getRunningTime()>720000) {
                                tmp.retry++;
                            if (tmp.retry<3) {
                                InfoSequence info=tmp.getInfo();
                                if (tmp.getRettype().equals("fasta")||tmp.getRettype().equals("gb")) {
                                    tmp.runthread(info.getGi(),(tmp.getRettype().equals("fasta")?info.getFastaFilename():info.getGenbankFilename()));
                                } else {
                                    tmp.runthreadEnsembl(info.getEnsemblid(),info.getEmsembldb(), info.getEnsemblFilename());
                                }
                            } else {
                                //WE FORGET IT AND THERE WILL BE AN ERROR REPORT
                                //publish(tmp.getInfo());
                                mark_for_destroy.add(tmp);
                            }
                            } //End time too long
                        }
                    } //End check each thread
                    // 3. UPDATE THE PROGRESS AND DESTROY THE FINISHED THREAD
                    if (mark_for_destroy.size()>0) {
                        downloaded+=mark_for_destroy.size();
                        setProgress((downloaded)*100/total_to_download);
                        Util.CleanMemory(); //--Remove extra memory...
                    }
                    for (efetch tmp:mark_for_destroy) {
                        download.remove(tmp);
                    } //End destroy thread



            } //End while not cancelled
               return 0;
            }

            //On update notre Table avec les resultats partiels


            protected void process(List<Object> chunks) {

                //1. For each Sequence, update data in the project.MultipleInfoSequence

                for (Object i:chunks) {
                    if (i instanceof efetch) {
                        efetch info=(efetch)i;
                        for (String s:Util.InputFile(info.filename)) {
                            genbankJDialog.AddText(s);
                            Config.log(s);
                        }
                    } // End i=efetch
                    if (i instanceof String) {
                        String stri=(String)i;
                        if (stri.startsWith("Unable")||stri.startsWith("Error")) {
                            loading.MessageErreur(stri, "");
                        } else {
                            loading.Message(stri, "");
                        }
                    } //End i = String
                } //End chunk
            }


           @Override
           protected void done(){
                if (!force_download) efetch.force_download=false;
               loading.setVisible(false);
               //--Show the GenbankJDialog
               GenbankJDialog genbankJDialog=new GenbankJDialog(parent);
           }

        }; //End SwingWorker declaration

        loadSwingWorker2.addPropertyChangeListener(
                 new PropertyChangeListener() {
                    public  void propertyChange(PropertyChangeEvent evt) {
                        if ("progress".equals(evt.getPropertyName())) {
                            SwingWorker o = (SwingWorker)evt.getSource();
                            if (!o.isDone()) {
                                int progress=(Integer)evt.getNewValue();
                                loading.setProgress(progress);
                            }
                            else if (o.isDone()&&!o.isCancelled()) {
                               //Handled in done() fucntion in SwingWorker
                            }
                        }//End progress update
                 } //End populateNetworkPropertyChange
                 });
        //Finally. Show a load dialog :: Warning Work-In-Progress
        loading=new InformationJDialog(parent, false, loadSwingWorker2,"Downloading sequences...");
        loading.setProgress(0); //Put 0% as the start progress
        loading.Message("Downloading "+result.size()+" sequences...", "");
        loadSwingWorker2.execute();
       return true;
    }

  ///////////////////////////////////////////////////////////////////////////
  /// Display function

 void displaySelected() {
    //Handle if selection changed
    GenbankTableModel tm = (GenbankTableModel)this.jTable1.getModel();
    if (tm.getNbSelected()>0) {
        this.ImportSequencejButton.setEnabled(true);
    } else {
        this.ImportSequencejButton.setEnabled(false);
    }
    // Update message Note: work only for the first selection
    int selection=this.jTable1.getSelectedRow();
    //--Check if Genbank possible
    if (selection<tm.data.size()) selection=this.jTable1.convertRowIndexToModel(selection);
    InfoSequence info=tm.getInfoSummary(selection);
    //GenbankjButton.setEnabled(info.getType()==InfoSequence.type_Ncbi);
    Message(info.getDescription(),"") ;
 }
  ///////////////////////////////////////////////////////////////////////////
    /// LOAD AND GETTER FUNCTION

 /**
 * Clean and return a list of InfoSummary to download
 * @return a list of of InfoSummary to download
 */

public Vector<InfoSequence> getSequences() {
     Vector<InfoSequence> tmp=new Vector<InfoSequence>();
     for (InfoSequence I:databaseInfoSummary.Data) {
         if (I.isSelected()) tmp.add(I);
     }
     return tmp;
}

   /**
    * Mimic the code in DatabaseHGNC but Update a Loading dialog
    * In a SwingWorker
    */
    boolean loadHGNCdatabase(String filename) {
       
        final long filesize=Util.FileSize(filename);
            if (filesize==0) {
                MessageError("Warning. HGNC Database not found!", "");
                Config.log("Unable to find "+filename);
                return false;
            }
        databasehgnc.filename=filename;
        databasehgnc.removeAllData(); //Just for precaution
        final long hgnc_entries=31366; //number of entries in database
        SwingWorker<Boolean, Object> loadhgnc=new SwingWorker<Boolean, Object>()  {

       @Override
        protected Boolean doInBackground() throws Exception {
           try {
           BufferedReader br = new BufferedReader(new FileReader(new File(databasehgnc.filename)));
            String id=br.readLine();
            databasehgnc.qualifier=id.split("\\t");
            long count=0;  //Byte count to updata dialog
            while (!isCancelled()&&br.ready())  {
                String stri=br.readLine();
                HGNCdata tmpdata=new HGNCdata(stri);
                publish(tmpdata);
                count++;
                if (count%1000==0) {
                    Config.log("*");
                    publish(new Long(count));
                }
            } //end while
            publish(new Long(hgnc_entries));
            br.close();
            return true;
            } catch(Exception e) {return false;}
            }

            //On update notre Table avec les resultats partiels
            @Override
            protected void process(List<Object> chunks) {
                for (Object hgnc:chunks) {
                    if (hgnc instanceof HGNCdata) databasehgnc.addData((HGNCdata)hgnc);
                    if (hgnc instanceof Long) {
                        //*100/filesize
                        Message("Loading HGNC database ["+((Long)hgnc*100/hgnc_entries)+" %] ","");
                    }
                } //End for
            }

           @Override
           protected void done(){
                Config.log("done loading hgnc with "+databasehgnc.getSize()+" entries...");
                Message("Done loading HGNC database. ","");
           }
        }; //End SwingWorker
        loadhgnc.execute();
        return true; 
    }

    private void downloadHGNC() {

      SwingWorker<Integer, Integer> infoSwingWorker=new SwingWorker<Integer, Integer>()  {

       @Override
        protected Integer doInBackground() throws Exception {

           try {
           
            URL u = new URL(config.get("hgncWebDownload"));
            URLConnection uc = u.openConnection();
            InputStream in = uc.getInputStream();
            int c = in.read();
            StringBuilder build = new StringBuilder();
            int index=0;
            while (c != -1&&!isCancelled()) {
                build.append((char) c);
                c = in.read();
                index++;
                if (index % 1024 == 1) {
                    publish(index/1024);
                }
            }
            Util util=new Util();
            util.open(config.get("HGNCData"));
            util.print(build.toString());
            util.close();
            loadHGNCdatabase(config.get("HGNCData"));
            } catch(Exception e) {e.printStackTrace();}
                return 0;
        }

            @Override
            protected void process(List<Integer> chunks) {
                for (Integer i:chunks) Message("Downloading from HGNC (http://www.genenames.org/) [ "+i+" kb ]","");
            }

           @Override
           protected void done(){
                Message("Done downloading fgrom HGNC (http://www.genenames.org/) ","");
           }

        }; //End SwingWorker declaration

        infoSwingWorker.addPropertyChangeListener(
                 new PropertyChangeListener() {
                    public  void propertyChange(PropertyChangeEvent evt) {
                     if ("progress".equals(evt.getPropertyName())) {
                            SwingWorker o = (SwingWorker)evt.getSource();
                            if (!o.isDone()) {
                                int progress=(Integer)evt.getNewValue();
                                
                            }
                            else if (o.isDone()&&!o.isCancelled()) {
                               //Handled in done() fucntion in SwingWorker
                            }
                        }//End progress update
                 } //End populateNetworkPropertyChange
                 });
//        loading=new InformationJDialog(parent, false, infoSwingWorker, "Loading sequence");
//        loading.setProgress(0); //Put 0% as the start progress
//        loading.Message("Downloading database from HGNC Website...", "");
        infoSwingWorker.execute();
    }

    ///////////////////////////////////////////////////////////////////////////
    /// SEARCH FUNCTIONS

    /**
     * Main search function
     */
    private void Search() {
        //1. ResetClusterinComboBox and Stop button
        this.getClustering_ComboBox().setSelectedIndex(0);
        this.Stop_jToggleButton.setText("Stop");
        this.Stop_jToggleButton.setSelected(false);
        
        //2. Stop searching if we are already searching
        if (infoSwingWorker!=null) infoSwingWorker.cancel(true);
        //3. Clear the table and data in lastSearch

        GenbankTableModel tm=(GenbankTableModel)this.jTable1.getModel();
        tm.data.clear();
        tm.fireTableStructureChanged();
        tm.fireTableDataChanged();
        this.jTable1.setModel(tm);
        databaseInfoSummary.removeAllData();
        
        //4. Get the search term and save
        String search_term=this.getRechercheJTextField().getText().trim();
       
        //5. Performed the search if search string is not default string
        String db=(String)this.getDatabase_ComboBox().getSelectedItem();
        if (!search_term.equals("")&&!search_term.equals(default_search_string)) {
            Message("Searching for "+search_term+"...","");
            if (db.startsWith("Ncbi")) {
                Message("Searching Ncbi for "+search_term,"");
                lastSearch="Searching Ncbi for "+search_term;
                SearchNcbi();
            } else
            if (db.startsWith("HGNC")) {
                Message("Searching local HGNC database for "+search_term,"");
                lastSearch="Searching local HGNC database for "+search_term;
                SearchHgnc();
            } else
            if (db.indexOf("Ensembl")>-1) {
                Message("Searching "+db+" for "+search_term,"");
                lastSearch="Searching "+db+" for "+search_term;
                //Try to search ensembl
                SearchEnsembl();
            } 
        } //End search
    }


    private void SearchHgnc() {
        ArrayList<HGNCdata> results=databasehgnc.search(this.getRechercheJTextField().getText().trim(), databasehgnc.MODE_ALL);
            Message("Found "+results.size()+" possible genes","");
            
            for (HGNCdata hgnc:results) {
                InfoSequence n = new InfoSequence();
                n.setType(InfoSequence.type_HGNC);
                n.setHgncid(hgnc.getHGNCid());
                n.setAccession(hgnc.getGenbankID());
                n.setGi(hgnc.getGenbankID());
                n.setEnsemblid(hgnc.getEnsemblID());
                n.setEmsembldb("human");
                if (n.getGi().startsWith("GDB:")) n.setGi(n.getGi().substring(4));
                n.setDescription(hgnc.getDescription());
                n.setGenbankdb("sequences"); //--Just to be sure...
                n.setLoaded(false);
                databaseInfoSummary.addData(n);
            }

            GenbankTableModel tm=(GenbankTableModel)this.jTable1.getModel();
            tm.setData(databaseInfoSummary.Data);
            tm.fireTableDataChanged();
            this.jTable1.setModel(tm);
    }
    
     /**
     * Helper fonction to download complete InfoSummary from Ncbi
     * In case we have HGNC data
      * NEW VERSION WITH MULTIPLE THREAD
      * CUSTOMIZATION WITH MAXLOAD (number of downloaded esummary)
      * AND MAXESUMMARY (number of thread)
     */
    public void loadInfoSummary2() {
        //Ok, maintenant, on crée une liste des objects à charcher (mais des clones)
        final LinkedList<InfoSequence> queue=new LinkedList<InfoSequence>();
        for (InfoSequence i:databaseInfoSummary.Data) if (!i.isLoaded()) queue.add(i);
        infoSwingWorker=new SwingWorker<Integer, InfoSequence>()  {
        final int maxload=200; //Max number of loaded elemant per esummary
        final int maxesummary=4;//max number of concurent essumary
        // Total number of result to download
        int total_to_load=queue.size();

       @Override
        protected Integer doInBackground() throws Exception {
            try {
            String search="";               //search String
            Vector<esummary> download=new Vector<esummary>();
            boolean firstload=true;         //If its the frist, load only 30 results
                                            //so that we don't lag...
            //CAS 0: Kill the thread if we stop search

            if (isCancelled()&&download.size()>0) {
                for (esummary e:download) e.KillThread();
            }


            //CAS 1: ON LOAD TANT QON A DES ELEMENT DANS LA QUEUE
            while (!isCancelled()&&(queue.size()>0||download.size()>0)) {
                    //CAS 1: On essaie de downloader donc on fait un esummary
                    if (download.size()<maxesummary&&queue.size()>0) {
                       //Build a search String
                        search="";
                        int loadfactor=maxload;
                        if (firstload) {
                            loadfactor=30;
                            firstload=false;
                        }
                        for (int i=0; i<loadfactor;i++) {
                            InfoSequence tmp=queue.pollFirst();
                            if (tmp==null) break;
                            search+=tmp.getGi()+",";
                        }
                        //begin a search
                        if (!search.equals("")) {
                            esummary esum=new esummary(search,true);
                            download.add(esum);
                        }
                       
                    } 

                    
                    //CAS 2: VErification de l'état des esummary
                    Vector<esummary> mark_for_destroy=new Vector<esummary>(); // liste des efetch a detruite
                    for (esummary esum:download) {
                        if (esum!=null&&esum.getStatus()==esummary.status_done) {
                            mark_for_destroy.add(esum);
                            for (InfoSequence i:esum.getData()) publish(i);

                        }
                                            
                    if (esum!=null&&esum.getStatus()==esummary.status_error) {
                        esum.retry++;
                        MessageError("Unable to download summary from Ncbi... ","");
                        if (esum.retry<3) {
                            //restart a thread
                            esum.runthread2(esum.getSearch());
                        } else {
                            mark_for_destroy.add(esum);

                        }
                    }
                    if (esum.getStatus()==esummary.status_running||esum.getStatus()==esummary.status_running_query_done) {
                            // 30 sec running? -> Retry
                            if (esum.getRunningTime()>30000) {
                                esum.retry++;
                               if (esum.retry<3) {
                                    //restart a thread
                                    esum.runthread2(esum.getSearch());
                                } else {
                                    mark_for_destroy.add(esum);
                                    }
                            }
                     }
                    }
                     //End check each thread
                    // 3. UPDATE THE PROGRESS AND DESTROY THE FINISHED THREAD
                   
                    for (esummary tmp:mark_for_destroy) {                      
                        download.remove(tmp);
                    } //End destroy thread

            } //End while not cancelled
            } catch(Exception e) {e.printStackTrace();}
            return 0;
            }

            //On update notre Table avec les resultats partiels
            @Override
            protected void process(List<InfoSequence> chunks) {
                //1. Get the table
                GenbankTableModel tm =(GenbankTableModel)jTable1.getModel();
                Message("Found "+databaseInfoSummary.getSize()+" results. [Still to download "+queue.size()+"]","");
                //2. For each InfoSummary, updata its objejTable1.getModel()ct
                for (InfoSequence data:chunks) {
                    // 2.1 Update data for the InfoSummary
                    // Needed because we use clone
                    int index=databaseInfoSummary.Data.indexOf(data);
                    if (index>-1) {
                        InfoSequence tmp=databaseInfoSummary.Data.get(index);
                        tmp.setType(data.getType());
                        tmp.setHgncid(data.getHgncid());
                        tmp.setEnsemblid(data.getEnsemblid());
                        tmp.setEmsembldb(data.getEmsembldb());
                        tmp.setGi(data.getGi());
                        tmp.setAccession(data.getAccession());
                        tmp.setDescription(data.getDescription());
                        tmp.setLen(data.getLen());
                        tmp.setLoaded(true); //--We have a summary for this sequence
                        //--Try to search for the ID in the database
                        //Vector<Integer> ids=df.getSequenceIDFromAccession(data.getAccession());
                        //if (ids.size()>0) {
                        //    tmp.setInDatabase(true);
                        //    tmp.setSequence_id(ids.get(0)); //--Set ID as the first sequence id...
                        //tmp.setAbbreviate(InfoSequence.GenerateAbbreviate(data.getDescription()));
                        //}

                    }
                      //2.2 Update the table
                     // Note: we don't check for error since the displayed
                     // Data might not be all the data
                    tm.updateData(data);

                }
                tm.fireTableDataChanged();
                jTable1.setModel(tm);
            }


           @Override
           protected void done(){
                Message("Total "+databaseInfoSummary.getSize()+" results.","");
           }

        }; //End SwingWorker declaration

        infoSwingWorker.addPropertyChangeListener(
                 new PropertyChangeListener() {
                    public  void propertyChange(PropertyChangeEvent evt) {
                        //TO DO IF WE WANT
                 } //End populateNetworkPropertyChange
                 });
        infoSwingWorker.execute();
    }

    private void SearchNcbi() {
        final Downloader bio = new Downloader();
        //Recherche du terme
        String search_term=this.getRechercheJTextField().getText().trim();
        search_term=search_term.replaceAll(" ", "%20");
        Message("Searching Ncbi for "+search_term,"");
        String db=(String)this.getDatabase_ComboBox().getSelectedItem();
        if (db.indexOf("Genome")>-1) {
            esearch.database="genome";
        } else if (db.indexOf("Protein")>-1) {
            esearch.database="protein";
        } else {
             esearch.database="nucleotide";
        }
    
    //if (!this.Ensembl_jRadioButton.isSelected()) sp.msg("Searching Ncbi...");
    if (bio.eSearch(search_term)) {
       //CAS 1: SUCCESS
        //On load les InfoSummary

        databaseInfoSummary.removeAllData();
        Vector<InfoSequence>search=bio.readEsearchFile("esearch.txt");
        for (InfoSequence info:search) {
            info.setGenbankdb(esearch.database);
            //if (esearch.database.equals("protein"))
        }
        databaseInfoSummary.Data.addAll(search);
        
        Message("Found "+databaseInfoSummary.getSize()+" results.","");
        //On rempli la table avec des info partiel
        GenbankTableModel tm =(GenbankTableModel)this.jTable1.getModel();
        tm.setData(databaseInfoSummary.Data);
        tm.fireTableDataChanged();
        this.jTable1.setModel(tm);
        //On load les infoSummary
        loadInfoSummary2();
    }
    //end if not found esearch
    else {
        MessageError("No sequences found by search","Hint: You can use * to search multiples terms (ex. NT_000*)");
    }
    }
    
    void SearchEnsembl() {
        
        String db=(String)this.getDatabase_ComboBox().getSelectedItem();
        final String ensembldb=db.substring(db.indexOf("(")+1, db.indexOf(")")).toLowerCase();
        final String search_term=getRechercheJTextField().getText().trim().replaceAll(" ", "%20");
        final int mode_location=1;
        final int mode_normal=0;
        final int mode=(db.indexOf("Location")>-1?mode_location:mode_normal);
        final LinkedList<String> dbtosearch=new LinkedList<String>();
        for (String s:config.ensembldb) {
            dbtosearch.add(s);
        }
        final int tosearch=dbtosearch.size();
        //Config.log(tosearch+" "+search_term+" "+ensembldb);
        //

            infoSwingWorker=new SwingWorker<Integer, InfoSequence>()  {

            @Override
            protected Integer doInBackground() throws Exception {
                setProgress(0);
                while(!isCancelled()) {

                          //CAS 1. SEARCH ALL DATABASE
                         if (ensembldb.indexOf("all")>-1) {
                             //We search all database
                             
                              while (dbtosearch.size()>0&&!isCancelled()) {
                                String dbe=dbtosearch.pollFirst();
                                List<Gene> genes;
                                CoreDriver coreDriver;
                                ComparaDriver comparaDriver;
                                
                                try {
                                     Message("Searching "+dbe+" for "+search_term,"");
                                     setProgress(((tosearch-dbtosearch.size())*100)/tosearch);
                                    //First we try to access the default core database
                                    if (dbe.indexOf("_core")==-1&&dbe.indexOf("_vega")==-1&&dbe.indexOf("_variation")==-1&&dbe.indexOf("_otherfeatures")==-1&&dbe.indexOf("_go")==-1&&dbe.indexOf("_ancestral")==-1&&dbe.indexOf("_website")==-1&&dbe.indexOf("_cdna")==-1&&dbe.indexOf("_funcgen")==-1) {
                                     Registry registry = Registry.createDefaultRegistry();
                                     coreDriver = registry.getGroup(dbe).getCoreDriver();
                                    } else if (dbe.indexOf("compara")>-1) {
                                        //Failed : we try to access all
                                        //TO DO
                                        comparaDriver=ComparaDriverFactory.createComparaDriver("ensembldb.ensembl.org",5306, dbe, "anonymous",null);
                                        coreDriver=CoreDriverFactory.createCoreDriver("ensembldb.ensembl.org",5306, dbe, "anonymous",null);
                                     } else {
                                         coreDriver=CoreDriverFactory.createCoreDriver("ensembldb.ensembl.org",5306, dbe, "anonymous",null);
                                     }
                                     //Config.log(coreDriver.toString());
                                     if (dbe.indexOf("compara")==-1) {
                                        genes=coreDriver.getGeneAdaptor().fetchBySynonym(search_term);
                                        if (genes==null) coreDriver.getGeneAdaptor().fetch(search_term);
                                     } else {
                                        genes=null;
                                         //genes=comparaDriver.getHomologyAdaptor().fetch("Homo sapiens", search_term, "Mus musculus","BLASTZ_NET");
                                     }
                               if (genes!=null&&genes.size()>0) {
                                  for (Gene g:genes) {
                                    InfoSequence i = new InfoSequence();
                                    i.setType(InfoSequence.type_Ensembl);
                                    i.setEmsembldb(dbe);
                                    i.setEnsemblid(g.getAccessionID());
                                    i.setDescription(g.getDisplayName()+" "+g.getDescription());
                                    i.setLoaded(true);
                                    publish(i);
                                  } //End for
                                } //End if
                                } catch(Exception e) {MessageError("Unable to connect to "+dbe,"");e.printStackTrace();}
                               
                              } //End while
                              
                         } else {
                             Registry registry = Registry.createDefaultRegistry();
                             CoreDriver coreDriver = registry.getGroup(ensembldb).getCoreDriver();
                             List<Gene> genes;
                             if (mode==mode_location) {
                                 Location location=new Location(search_term);
                                genes = coreDriver.getGeneAdaptor().fetch(location);
                             } else {
                                genes = coreDriver.getGeneAdaptor().fetchBySynonym(search_term);
                             }
                             setProgress(0);
                             int count=0;
                             if (genes.size()>0) {
                                  for (Gene g:genes) {
                                    InfoSequence i = new InfoSequence();
                                    i.setType(InfoSequence.type_Ensembl);
                                    i.setEmsembldb(ensembldb);
                                    i.setEnsemblid(g.getAccessionID());
                                    i.setDescription(g.getDisplayName()+" "+g.getDescription());
                                    i.setLoaded(true);
                                    count++;
                                    publish(i);
                                    setProgress((count*100)/genes.size());
                                }
                             }
                             if (mode!=mode_location) {
                             Gene g= coreDriver.getGeneAdaptor().fetch(search_term);
                             if (g!=null) {
                                 InfoSequence i = new InfoSequence();
                                    i.setType(InfoSequence.type_Ensembl);
                                    i.setEmsembldb(ensembldb);
                                    i.setEnsemblid(g.getAccessionID());
                                    i.setDescription(g.getDisplayName()+" "+g.getDescription());
                                    i.setLoaded(true);
                                    publish(i);
                             }
                             }
                            return 0;
                         } //End else
              
            } //End while
             return 0; //Never
           }
            
          //On update notre Table avec les resultats partiels
            @Override
            protected void process(List<InfoSequence> chunks) {
                //1. Get the table
                GenbankTableModel tm =(GenbankTableModel)jTable1.getModel();

                //2. For each InfoSummary, updata its objejTable1.getModel()ct
                for (InfoSequence data:chunks) {
                    databaseInfoSummary.addData(data);
                    tm.addData(data);
                }
                tm.fireTableDataChanged();
                jTable1.setModel(tm);
            }


           @Override
           protected void done(){
                Message("Total "+databaseInfoSummary.getSize()+" results.","");
           }
            
        };
        infoSwingWorker.addPropertyChangeListener(
                 new PropertyChangeListener() {
                    public  void propertyChange(PropertyChangeEvent evt) {
                        if ("progress".equals(evt.getPropertyName())) {
                            SwingWorker o = (SwingWorker)evt.getSource();
                            if (!o.isDone()) {
                                int progress=(Integer)evt.getNewValue();
                                String msg=String.format("Searching Ensembl [ %d databases selected ] for %s [ %d %%]",config.ensembldb.length,search_term, progress);
                                Message(msg,"");
                            }
                            else if (o.isDone()&&!o.isCancelled()) {
                               //Handled in done() fucntion in SwingWorker
                            }
                        }//End progress update
                 } //End populateNetworkPropertyChange
                 });
        loading=new InformationJDialog(this.parent, false, infoSwingWorker,"Searching Ensembl...");
        loading.setProgress(0); //Put 0% as the start progress
        loading.Message("Searching Ensembl for "+search_term, "");
        infoSwingWorker.execute(); 
    }
        
        
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox Clustering_ComboBox;
    private javax.swing.JComboBox Database_ComboBox;
    private javax.swing.JButton Done_JButton;
    private javax.swing.JButton ImportSequencejButton;
    private javax.swing.JTextField RechercheJTextField;
    private javax.swing.JButton Search_Jbutton;
    private javax.swing.JButton SelectUnSelect_JButton;
    private javax.swing.JToggleButton Stop_jToggleButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jStatusMessage;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the status
     */
    public int getStatus() {
        return status;
    }

    ///////////////////////////////////////////////////////////////////////////
    /// MESSAGE FONCTION

    /**
     * Affiche un message dans la status bar
     * La provenance peut être mise dans un tooltip
     * @param text Le texte
     * @param tooltip Le tooltip texte
     */
    void Message(String text, String tooltip) {
        this.jStatusMessage.setEnabled(true);
        this.jStatusMessage.setForeground(new java.awt.Color(0, 51, 153));
        this.jStatusMessage.setBackground(Color.WHITE);
        this.jStatusMessage.setToolTipText(tooltip);
        this.jStatusMessage.setText(text);
    }

    /**
     * Affiche un message d'erreur en rouge dans la status bar
     * La provenance peut être mise dans un tooltip
     * @param text Le texte
     * @param tooltip Le tooltip texte
     */
    void MessageError(String text, String tooltip) {
        this.jStatusMessage.setEnabled(true);
        this.jStatusMessage.setForeground(Color.RED);
        this.jStatusMessage.setBackground(Color.WHITE);
        this.jStatusMessage.setToolTipText(tooltip);
        this.jStatusMessage.setText(text);
    }

    /**
     * @return the Clustering_ComboBox
     */
    public javax.swing.JComboBox getClustering_ComboBox() {
        return Clustering_ComboBox;
    }

    /**
     * @return the Database_ComboBox
     */
    public javax.swing.JComboBox getDatabase_ComboBox() {
        return Database_ComboBox;
    }

    /**
     * @return the RechercheJTextField
     */
    public javax.swing.JTextField getRechercheJTextField() {
        return RechercheJTextField;
    }
    
} //End class

