/*
 *  Armadillo Workflow Platform v1.0
 *  A simple pipeline system for phylogenetic analysis
 *  
 *  Copyright (C) 2009-2011  Etienne Lord, Mickael Leclercq
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


package database; 

 
import configuration.Config;
import java.awt.Color;  
import java.awt.Dimension;
import java.awt.Toolkit;
import java.sql.ResultSet;  
import javax.swing.JFileChooser;

public class DatabaseMatrixFrame extends javax.swing.JDialog {

    ////////////////////////////////////////////////////////////////////////////
    /// Variables

    public static databaseFunction df=new databaseFunction();
 
    Config config=new Config(); 
     //Workbox workbox=new Workbox();      //--Debug;
 
    /** Creates new form DatabaseQuery */
    public DatabaseMatrixFrame() {
        initComponents();
        this.setTitle("Database Query");
        this.setIconImage(Config.icon.getImage());
        this.setResizable(true);      
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension d = getSize();
        setLocation((screenSize.width-d.width)/2,(screenSize.height-d.height)/2);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel22 = new javax.swing.JPanel();
        jPanel24 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jStatusMessage = new javax.swing.JTextField();

        jPanel22.setBackground(new java.awt.Color(255, 255, 255));

        jPanel24.setBackground(new java.awt.Color(255, 255, 255));
        jPanel24.setBorder(javax.swing.BorderFactory.createTitledBorder("Matrix"));

        jTable2.setAutoCreateRowSorter(true);
        jTable2.setModel(new QueryTableModel());
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jTable2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable2KeyPressed(evt);
            }
        });
        jScrollPane4.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel24Layout = new javax.swing.GroupLayout(jPanel24);
        jPanel24.setLayout(jPanel24Layout);
        jPanel24Layout.setHorizontalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel24Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 573, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel24Layout.setVerticalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 381, Short.MAX_VALUE)
        );

        jStatusMessage.setBorder(null);
        jStatusMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jStatusMessageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel22Layout = new javax.swing.GroupLayout(jPanel22);
        jPanel22.setLayout(jPanel22Layout);
        jPanel22Layout.setHorizontalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel22Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel24, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jStatusMessage, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 605, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel22Layout.setVerticalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel22Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel24, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jStatusMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        if (evt.getClickCount()<2) return;
        QueryTableModel tm=(QueryTableModel)this.jTable2.getModel();
        if (tm.getColumnCount()>0 && tm.qualifier[0].equals("TableName")) {
            String TableName=(String) tm.getValueAt(this.jTable2.getSelectedRow(), 0);
            String query="SELECT *  FROM "+TableName+";";
            //this.query_jTextArea.setText(query);
            ExecuteQuery(query);
            Message("This is a list of all data in table "+TableName);
        }
    }//GEN-LAST:event_jTable2MouseClicked

    private void jTable2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable2KeyPressed
        // TODO add your handling code here:
}//GEN-LAST:event_jTable2KeyPressed

    private void jStatusMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jStatusMessageActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jStatusMessageActionPerformed

    //////////////////////////////////////////////////////////////////////////
    /// TAB Database Query
     /**
     * This execute a SQL query and display the result in jTable2
     * @param query
     */
    void ExecuteQuery(String query) {
       if (!query.equals("")) {
           System.out.println(query);
           try {
           if (query.lastIndexOf(';')!=query.length()-1) query+=";";
            Message("Query of database for "+query);
            Config.log(query);
            ResultSet rs=null;
                rs=df.getDatabase().executeQuery(query);
              //if (!sp.isCancel()) {
                  if (rs!=null) {
                      QueryTableModel qt=(QueryTableModel)this.jTable2.getModel();
                      qt.SQLquery=query;
                      qt.setData(rs);
                      qt.fireTableStructureChanged();
                      qt.fireTableDataChanged();
                      this.jTable2.setModel(qt);
                      Message("Found "+qt.getSize()+" results");
                  }  else if (!df.getDatabase().dbSQLerror.equals("")){
                     MessageError("Error with "+query+" "+df.getDatabase().dbSQLerror);
                  } else {
                      MessageError("No results for query "+query);
                  }
              //} else { Message("Cancelled query for "+query, jInfo);}
            } catch(Exception e) {
               e.printStackTrace();
               MessageError("Error in query of database...");
            }             
        } //End if query=""

    }


    ////////////////////////////////////////////////////////////////////////////
    /// HELPER FUNCTION

            /**
     * Affiche un message dans la status bar
     * La provenance peut Ãªtre mise dans un tooltip
     * @param text Le texte
     * @param tooltip Le tooltip texte
     */
    void Message(String text) {
        this.jStatusMessage.setForeground(new java.awt.Color(0, 51, 153));
        this.jStatusMessage.setText(text);
    }
    
    void MessageError(String txt) {
        this.jStatusMessage.setForeground(Color.RED);
        this.jStatusMessage.setText(txt);
    }
  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField jStatusMessage;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables

}
