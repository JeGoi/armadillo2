/*
 *  Armadillo Workflow Platform v1.0
 *  A simple pipeline system for phylogenetic analysis
 *  
 *  Copyright (C) 2009-2011  Etienne Lord, Mickael Leclercq
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package editor;


import Class.*;
import workflows.workflow_properties;
import configuration.Config;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Toolkit;
import java.io.File;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import workflows.workflow_properties_dictionnary;

/**
 * This is a viewer of available editor in the 'editorPath'
 * @author Etienne Lord
 * @since July 2009
 */
public class editorViewJDialog extends javax.swing.JDialog {

    ////////////////////////////////////////////////////////////////////////////
    /// Variables

    Config config=new Config();
    Frame frame;
    Classdata data;                                     //Current displayed class
    Vector<Classdata>ClassList=new Vector<Classdata>(); //List of the available class
    int mode=modeMethods;                               //Current mode

    ////////////////////////////////////////////////////////////////////////////
    /// Constants
    public final static int modeMethods=1;
    public final static int modeFields=2;
    public final static int modeConstructors=3;
    public final static int modeAll=4;

    ////////////////////////////////////////////////////////////////////////////
    /// Constructor

    public editorViewJDialog(java.awt.Frame parent) {
        super(parent, true);
        frame=parent;
        initComponents();
        setIconImage(Config.image);
        setClassList();
        setList(modeMethods);
        Message("","");
        // Set position and title
        setTitle("List of availables Class");
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension d = getSize();
        setLocation((screenSize.width-d.width)/2,
					(screenSize.height-d.height)/2);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        MethodJButton = new javax.swing.JToggleButton();
        VariableJButton = new javax.swing.JToggleButton();
        constructorJButton = new javax.swing.JToggleButton();
        All = new javax.swing.JToggleButton();
        jPanel1 = new javax.swing.JPanel();
        jStatusMessage = new javax.swing.JLabel();
        ClosejButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        ClassListjComboBox = new javax.swing.JComboBox();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        Displayed = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();

        setTitle("Properties");

        jToolBar1.setBackground(new java.awt.Color(102, 102, 102));
        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        MethodJButton.setText("Methods");
        MethodJButton.setFocusable(false);
        MethodJButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        MethodJButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        MethodJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MethodJButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(MethodJButton);

        VariableJButton.setText("Variables");
        VariableJButton.setFocusable(false);
        VariableJButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        VariableJButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        VariableJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VariableJButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(VariableJButton);

        constructorJButton.setText("Constructors");
        constructorJButton.setFocusable(false);
        constructorJButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        constructorJButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        constructorJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                constructorJButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(constructorJButton);

        All.setText("All");
        All.setFocusable(false);
        All.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        All.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        All.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AllActionPerformed(evt);
            }
        });
        jToolBar1.add(All);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jStatusMessage.setText("Info");

        ClosejButton.setText("Close");
        ClosejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClosejButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jStatusMessage, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(338, Short.MAX_VALUE)
                .addComponent(ClosejButton))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jStatusMessage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ClosejButton))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setText("Class name");

        ClassListjComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ClassListjComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ClassListjComboBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ClassListjComboBox, 0, 300, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel1)
                .addComponent(ClassListjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        javax.swing.GroupLayout DisplayedLayout = new javax.swing.GroupLayout(Displayed);
        Displayed.setLayout(DisplayedLayout);
        DisplayedLayout.setHorizontalGroup(
            DisplayedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
        );
        DisplayedLayout.setVerticalGroup(
            DisplayedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Class Members", Displayed);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ClosejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClosejButtonActionPerformed
      
        this.setVisible(false);
}//GEN-LAST:event_ClosejButtonActionPerformed

    private void MethodJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MethodJButtonActionPerformed
        setList(modeMethods);
}//GEN-LAST:event_MethodJButtonActionPerformed

    private void VariableJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VariableJButtonActionPerformed
       setList(modeFields);
    }//GEN-LAST:event_VariableJButtonActionPerformed

    private void constructorJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_constructorJButtonActionPerformed
        setList(modeConstructors);
}//GEN-LAST:event_constructorJButtonActionPerformed

    private void ClassListjComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ClassListjComboBoxItemStateChanged
      Classdata tmp=(Classdata)ClassListjComboBox.getSelectedItem();
      if (tmp!=null) this.data=tmp;
      setList(mode);
    }//GEN-LAST:event_ClassListjComboBoxItemStateChanged

    private void AllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AllActionPerformed
        setList(modeAll);
    }//GEN-LAST:event_AllActionPerformed

    /**
     * This duplicate a properties to a new name
     * @param sourceName
     * @param newName
     * @return True if success
     */
    private boolean duplicateProperties(String sourceName, String newName) {
        workflow_properties tmp=new workflow_properties();
        if (tmp.load(sourceName, config.get("propertiesPath"))) {
            if (tmp.save(newName, config.get("propertiesPath"))) return true;
        }
        MessageError("Unable to duplicate "+sourceName,"");
        return false;
    }

    /**
     * This delete from disk a properties in the propertiesPath
     * @param propertiesName
     * @return True if success
     */
    private boolean deleteProperties(String propertiesName) {
        File fileToDelete=new File(config.get("propertiesPath")+File.separator+propertiesName);
        if (fileToDelete.delete()) return true;
        MessageError("Unable to delete "+propertiesName+" from "+config.get("propertiesPath"),"");
        return false;
    }

    /**
     * This list dei
     */
    private void setList(int mode) {
      this.mode=mode;
      if (data==null) return;
      switch(mode) {
          case modeMethods: this.jList1.setListData(data.method);                            
                            this.MethodJButton.setSelected(true);
                            this.VariableJButton.setSelected(false);
                            this.constructorJButton.setSelected(false);
                            this.All.setSelected(false);
                            break;
          case modeFields:  this.jList1.setListData(data.field);
                            this.MethodJButton.setSelected(false);
                            this.VariableJButton.setSelected((true));
                            this.constructorJButton.setSelected(false);
                            this.All.setSelected(false);
                            break;
          case modeConstructors:
                            this.jList1.setListData(data.constructor);
                            this.MethodJButton.setSelected(false);
                            this.VariableJButton.setSelected(false);
                            this.constructorJButton.setSelected(true);
                            this.All.setSelected(false);
                            break;
          case modeAll:
                            this.jList1.setListData(data.All);
                            this.MethodJButton.setSelected(false);
                            this.VariableJButton.setSelected(false);
//                            this.constructorJButton.setSelected(false);
                            this.All.setSelected(true);
                            break;
      }

      
      
    }

    ////////////////////////////////////////////////////////////////////////////
    /// Function

    /**
     * This set the list of class in the jComboBox
     */
    private void setClassList() {
        //--Reinitialize class list
        ClassList=workflow_properties_dictionnary.getClasslisting("editors");
        DefaultComboBoxModel cm=(DefaultComboBoxModel)this.ClassListjComboBox.getModel();
        cm.removeAllElements();
        for (Classdata c:ClassList) {
            cm.addElement(c);
        }
        this.ClassListjComboBox.setModel(cm);
        //--Set current data to the first of the list
        if (ClassList.size()>0) this.data=ClassList.get(0);
    }

     ///////////////////////////////////////////////////////////////////////////
    /// MESSAGE FONCTION

    /**
     * Affiche un message dans la status bar
     * La provenance peut être mise dans un tooltip
     * @param text Le texte
     * @param tooltip Le tooltip texte
     */
    void Message(String text, String tooltip) {
        this.jStatusMessage.setEnabled(true);
        this.jStatusMessage.setForeground(new java.awt.Color(0, 51, 153));
        this.jStatusMessage.setBackground(Color.WHITE);
        this.jStatusMessage.setToolTipText(tooltip);
        this.jStatusMessage.setText(text);
    }

    /**
     * Affiche un message d'erreur en rouge dans la status bar
     * La provenance peut être mise dans un tooltip
     * @param text Le texte
     * @param tooltip Le tooltip texte
     */
    void MessageError(String text, String tooltip) {
        this.jStatusMessage.setEnabled(true);
        this.jStatusMessage.setForeground(Color.RED);
        this.jStatusMessage.setBackground(Color.WHITE);
        this.jStatusMessage.setToolTipText(tooltip);
        this.jStatusMessage.setText(text);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton All;
    private javax.swing.JComboBox ClassListjComboBox;
    private javax.swing.JButton ClosejButton;
    private javax.swing.JPanel Displayed;
    private javax.swing.JToggleButton MethodJButton;
    private javax.swing.JToggleButton VariableJButton;
    private javax.swing.JToggleButton constructorJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jStatusMessage;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

}
