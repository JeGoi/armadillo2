/*
 *  Armadillo Workflow Platform v1.0
 *  A simple pipeline system for phylogenetic analysis
 *  
 *  Copyright (C) 2009-2011  Etienne Lord, Mickael Leclercq
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package editors;


import editor.*;
import Class.Classdata;
import workflows.workflow_properties_TableModel;
import workflows.workflow_properties;
import configuration.Config;
import configuration.ProgramsFilter;
import configuration.Util;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;
import java.util.Collections;
import java.util.LinkedList;
import java.util.Vector;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import program.programs;
import results.report;
import tools.Toolbox;
import workflows.InputOutput;
import workflows.InputOutputCellEditor;
import workflows.InputOutputTableModel;
import workflows.InputOutput_cellRenderer;
import workflows.armadillo_workflow;
import workflows.workflow_properties_cellRenderer;
import workflows.workflow_properties_dictionnary;

/**
 * Editor of object properties for the Object Editor
 * @author Etienne Lord
 * @since July 2009
 */
public class CustomEditor2 extends javax.swing.JDialog implements EditorInterface {

    ////////////////////////////////////////////////////////////////////////////
    /// VARIABLES

    Config config=new Config();
    ConnectorInfoBox connectorinfobox;
    workflow_properties_dictionnary dict=new workflow_properties_dictionnary();
    String selected="";             // Selected properties
    Frame frame;
    workflow_properties properties;
    public static armadillo_workflow workflow=null;
    armadillo_workflow parent_workflow;    
    LinkedList<String>ListType=new LinkedList<String>(); //Liste des type pour Tree Toolbox

    private int x=0; //--object x pos
    private int y=0; //--object y pos
    
    ////////////////////////////////////////////////////////////////////////////
    /// CONSTANT

    public final String defaultNameString=" Name";
    public final String defaultFilenameString=" filename";
    public final String defaultDescriptionString=" Description";
    public final String TooltipDescriptionString=" Tooltip";
    public final String WebsiteString=" Website";

    /** Creates new form propertiesJDialog */
    public CustomEditor2(java.awt.Frame parent, armadillo_workflow parent_workflow) {
        super(parent, false);
        this.parent_workflow=parent_workflow;
        //--Set variables and init
        frame=parent;       
        connectorinfobox=new ConnectorInfoBox(parent); //--Used to display Connector info
        
        //--Initialize component
        if (workflow==null) {
            if (propertiesEditorSmallWorkflowJDialog.workflow!=null) {
                propertiesEditorSmallWorkflowJDialog.workflow=new armadillo_workflow();                   
                workflow=propertiesEditorSmallWorkflowJDialog.workflow;
                workflow.setSmallEditorMode(true);
                //--workflow.simplegraph=false;
                workflow.init();
            }            
        }
     
        addWindowListener(new WindowAdapter() {
            @Override
        public void windowClosing(WindowEvent we) {
            close();
        }
        });


        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        arg1_type3 = new javax.swing.JComboBox();
        jTextField5 = new javax.swing.JTextField();
        DeleteInput3 = new javax.swing.JCheckBox();
        arg1_type6 = new javax.swing.JComboBox();
        jTextField8 = new javax.swing.JTextField();
        DeleteInput6 = new javax.swing.JCheckBox();
        arg1_type8 = new javax.swing.JComboBox();
        jTextField10 = new javax.swing.JTextField();
        DeleteInput8 = new javax.swing.JCheckBox();
        jScrollPane6 = new javax.swing.JScrollPane();
        jPanel10 = new javax.swing.JPanel();
        arg1 = new javax.swing.JTextField();
        arg1_option = new javax.swing.JComboBox();
        arg1_type = new javax.swing.JComboBox();
        arg2 = new javax.swing.JTextField();
        arg2_option = new javax.swing.JComboBox();
        arg2_type = new javax.swing.JComboBox();
        arg3_type = new javax.swing.JComboBox();
        arg3_option = new javax.swing.JComboBox();
        arg3 = new javax.swing.JTextField();
        arg4_type = new javax.swing.JComboBox();
        arg4_option = new javax.swing.JComboBox();
        arg4 = new javax.swing.JTextField();
        arg5_type = new javax.swing.JComboBox();
        arg5_option = new javax.swing.JComboBox();
        arg5 = new javax.swing.JTextField();
        arg6_type = new javax.swing.JComboBox();
        arg6_option = new javax.swing.JComboBox();
        arg6 = new javax.swing.JTextField();
        Insert_Sample_Perl_jButton = new javax.swing.JButton();
        Insert_SampleApplication_jButton = new javax.swing.JButton();
        arg7 = new javax.swing.JTextField();
        arg7_option = new javax.swing.JComboBox();
        arg7_type = new javax.swing.JComboBox();
        arg18 = new javax.swing.JTextField();
        arg18_option = new javax.swing.JComboBox();
        arg18_type = new javax.swing.JComboBox();
        arg19 = new javax.swing.JTextField();
        arg19_option = new javax.swing.JComboBox();
        arg19_type = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        arg20 = new javax.swing.JTextField();
        arg20_option = new javax.swing.JComboBox();
        arg20_type = new javax.swing.JComboBox();
        Insert_Sample_Jar_jButton = new javax.swing.JButton();
        arg12 = new javax.swing.JTextField();
        arg12_option = new javax.swing.JComboBox();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        arg13 = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        arg13_option = new javax.swing.JComboBox();
        arg13_type = new javax.swing.JComboBox();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        arg11_option = new javax.swing.JComboBox();
        arg11_type = new javax.swing.JComboBox();
        arg12_type = new javax.swing.JComboBox();
        arg11 = new javax.swing.JTextField();
        arg8_option = new javax.swing.JComboBox();
        arg8 = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        arg14 = new javax.swing.JTextField();
        arg8_type = new javax.swing.JComboBox();
        arg9 = new javax.swing.JTextField();
        arg14_type = new javax.swing.JComboBox();
        arg9_option = new javax.swing.JComboBox();
        arg14_option = new javax.swing.JComboBox();
        arg9_type = new javax.swing.JComboBox();
        arg10_type = new javax.swing.JComboBox();
        arg10_option = new javax.swing.JComboBox();
        arg10 = new javax.swing.JTextField();
        jLabel42 = new javax.swing.JLabel();
        arg15 = new javax.swing.JTextField();
        arg15_option = new javax.swing.JComboBox();
        arg15_type = new javax.swing.JComboBox();
        jLabel43 = new javax.swing.JLabel();
        arg16 = new javax.swing.JTextField();
        arg16_option = new javax.swing.JComboBox();
        arg16_type = new javax.swing.JComboBox();
        jLabel44 = new javax.swing.JLabel();
        arg17 = new javax.swing.JTextField();
        arg17_option = new javax.swing.JComboBox();
        arg17_type = new javax.swing.JComboBox();
        application_name = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        Locate_Application_jButton1 = new javax.swing.JButton();
        Break_cli_jButton2 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        NamejTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox();
        jCheckBox1 = new javax.swing.JCheckBox();
        jTextField2 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        output1 = new javax.swing.JTextField();
        OutputType1 = new javax.swing.JComboBox();
        DeleteOutput1 = new javax.swing.JCheckBox();
        OutputType2 = new javax.swing.JComboBox();
        output2 = new javax.swing.JTextField();
        DeleteOutput2 = new javax.swing.JCheckBox();
        OutputType3 = new javax.swing.JComboBox();
        output3 = new javax.swing.JTextField();
        DeleteOutput3 = new javax.swing.JCheckBox();
        OutputType4 = new javax.swing.JComboBox();
        output4 = new javax.swing.JTextField();
        DeleteOutput4 = new javax.swing.JCheckBox();
        OutputType5 = new javax.swing.JComboBox();
        output5 = new javax.swing.JTextField();
        DeleteOutput5 = new javax.swing.JCheckBox();
        OutputType6 = new javax.swing.JComboBox();
        output6 = new javax.swing.JTextField();
        DeleteOutput6 = new javax.swing.JCheckBox();
        OutputType7 = new javax.swing.JComboBox();
        output7 = new javax.swing.JTextField();
        DeleteOutput7 = new javax.swing.JCheckBox();
        OutputType8 = new javax.swing.JComboBox();
        output8 = new javax.swing.JTextField();
        DeleteOutput8 = new javax.swing.JCheckBox();
        OutputType9 = new javax.swing.JComboBox();
        output9 = new javax.swing.JTextField();
        DeleteOutput9 = new javax.swing.JCheckBox();
        OutputType10 = new javax.swing.JComboBox();
        output10 = new javax.swing.JTextField();
        DeleteOutput10 = new javax.swing.JCheckBox();
        jButton3 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jButton9 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        ClosejButton = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        jLabel2.setText("jLabel2");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("(1) Configuration options");
        jLabel10.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        arg1_type3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Sequence--", "Sequence - Fasta format - Use sequence name", "Sequence - Fasta format - Use internal sequence id", "Sequence - Fasta format - Use abbreviation", "Sequence - Phylip format - Use sequence name", "Sequence - Phylip format - Use internal sequence id", "Sequence - Phylip format - Use abbreviation", "--MultipleSequences--", "MultipleSequences - Fasta format - Use sequence name", "MultipleSequences - Fasta format - Use internal sequence id", "MultipleSequences - Fasta format - Use abbreviation", "MultipleSequences - Phylip format - Use sequence name", "MultipleSequences - Phylip format - Use internal sequence id", "MultipleSequences - Phylip format - Use abbreviation", "--Alignment--", "Alignment - Fasta format - Use sequence name", "Alignment - Fasta format - Use internal sequence id", "Alignment - Fasta format - Use abbreviation", "Alignment - Phylip format - Use sequence name", "Alignment - Phylip format - Use internal sequence id", "Alignment - Phylip format - Use abbreviation", "--Ancestor--", "Ancestor - Fasta format - Use sequence name", "Ancestor - Fasta format - Use internal sequence id", "Ancestor - Fasta format - Use abbreviation", "Ancestor - Phylip format - Use sequence name", "Ancestor - Phylip format - Use internal sequence id", "Ancestor - Phylip format - Use abbreviation", "--Matrix--", "Matrix", "--Tree--", "Tree - Newick format - Use original tree", "Tree - Newick format - Use sequence_id", "Tree - Newick format - Use abbreviation", "--MultipleTrees--", "MultipleTrees - Newick format - Use original tree", "MultipleTrees - Newick format - Use sequence_id", "MultipleTrees - Newick format - Use abbreviation", "--Phylip--", "Phylip", "Phylip_Distance", "Phylip_Seqboot", "--Results--", "Results text", "--Unknown--", "Unknown", "--Text--", "Text", "--File type (this will not load the file into the database)--", "TextFile" }));
        arg1_type3.setEnabled(false);

        jTextField5.setText("jTextField1");

        DeleteInput3.setText("Delete file after use");

        arg1_type6.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Sequence--", "Sequence - Fasta format - Use sequence name", "Sequence - Fasta format - Use internal sequence id", "Sequence - Fasta format - Use abbreviation", "Sequence - Phylip format - Use sequence name", "Sequence - Phylip format - Use internal sequence id", "Sequence - Phylip format - Use abbreviation", "--MultipleSequences--", "MultipleSequences - Fasta format - Use sequence name", "MultipleSequences - Fasta format - Use internal sequence id", "MultipleSequences - Fasta format - Use abbreviation", "MultipleSequences - Phylip format - Use sequence name", "MultipleSequences - Phylip format - Use internal sequence id", "MultipleSequences - Phylip format - Use abbreviation", "--Alignment--", "Alignment - Fasta format - Use sequence name", "Alignment - Fasta format - Use internal sequence id", "Alignment - Fasta format - Use abbreviation", "Alignment - Phylip format - Use sequence name", "Alignment - Phylip format - Use internal sequence id", "Alignment - Phylip format - Use abbreviation", "--Ancestor--", "Ancestor - Fasta format - Use sequence name", "Ancestor - Fasta format - Use internal sequence id", "Ancestor - Fasta format - Use abbreviation", "Ancestor - Phylip format - Use sequence name", "Ancestor - Phylip format - Use internal sequence id", "Ancestor - Phylip format - Use abbreviation", "--Matrix--", "Matrix", "--Tree--", "Tree - Newick format - Use original tree", "Tree - Newick format - Use sequence_id", "Tree - Newick format - Use abbreviation", "--MultipleTrees--", "MultipleTrees - Newick format - Use original tree", "MultipleTrees - Newick format - Use sequence_id", "MultipleTrees - Newick format - Use abbreviation", "--Phylip--", "Phylip", "Phylip_Distance", "Phylip_Seqboot", "--Results--", "Results text", "--Unknown--", "Unknown", "--Text--", "Text", "--File type (this will not load the file into the database)--", "TextFile" }));
        arg1_type6.setEnabled(false);

        jTextField8.setText("jTextField1");

        DeleteInput6.setText("Delete file after use");

        arg1_type8.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Sequence--", "Sequence - Fasta format - Use sequence name", "Sequence - Fasta format - Use internal sequence id", "Sequence - Fasta format - Use abbreviation", "Sequence - Phylip format - Use sequence name", "Sequence - Phylip format - Use internal sequence id", "Sequence - Phylip format - Use abbreviation", "--MultipleSequences--", "MultipleSequences - Fasta format - Use sequence name", "MultipleSequences - Fasta format - Use internal sequence id", "MultipleSequences - Fasta format - Use abbreviation", "MultipleSequences - Phylip format - Use sequence name", "MultipleSequences - Phylip format - Use internal sequence id", "MultipleSequences - Phylip format - Use abbreviation", "--Alignment--", "Alignment - Fasta format - Use sequence name", "Alignment - Fasta format - Use internal sequence id", "Alignment - Fasta format - Use abbreviation", "Alignment - Phylip format - Use sequence name", "Alignment - Phylip format - Use internal sequence id", "Alignment - Phylip format - Use abbreviation", "--Ancestor--", "Ancestor - Fasta format - Use sequence name", "Ancestor - Fasta format - Use internal sequence id", "Ancestor - Fasta format - Use abbreviation", "Ancestor - Phylip format - Use sequence name", "Ancestor - Phylip format - Use internal sequence id", "Ancestor - Phylip format - Use abbreviation", "--Matrix--", "Matrix", "--Tree--", "Tree - Newick format - Use original tree", "Tree - Newick format - Use sequence_id", "Tree - Newick format - Use abbreviation", "--MultipleTrees--", "MultipleTrees - Newick format - Use original tree", "MultipleTrees - Newick format - Use sequence_id", "MultipleTrees - Newick format - Use abbreviation", "--Phylip--", "Phylip", "Phylip_Distance", "Phylip_Seqboot", "--Results--", "Results text", "--Unknown--", "Unknown", "--Text--", "Text", "--File type (this will not load the file into the database)--", "TextFile" }));
        arg1_type8.setEnabled(false);

        jTextField10.setText("jTextField1");

        DeleteInput8.setText("Delete file after use");

        setTitle("Properties");

        arg1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                arg1FocusLost(evt);
            }
        });

        arg1_option.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Simple option (text)", "File (Up input port)", "File (Down input port)", "File (Both input ports)", "File (Output port)", "Option=File (Up input port)", "Option=File (Down input port)", "Option=File (Both input ports)", "Option=File (Output port)", "<File (Up input port)", "<File (Down input port)", "<File (Both input ports)", ">File (Output port)" }));
        arg1_option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arg1_optionActionPerformed(evt);
            }
        });

        arg1_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Sequence--", "Sequence - Fasta format - Use sequence name", "Sequence - Fasta format - Use internal sequence id", "Sequence - Fasta format - Use abbreviation", "Sequence - Phylip format - Use sequence name", "Sequence - Phylip format - Use internal sequence id", "Sequence - Phylip format - Use abbreviation", "--MultipleSequences--", "MultipleSequences - Fasta format - Use sequence name", "MultipleSequences - Fasta format - Use internal sequence id", "MultipleSequences - Fasta format - Use abbreviation", "MultipleSequences - Phylip format - Use sequence name", "MultipleSequences - Phylip format - Use internal sequence id", "MultipleSequences - Phylip format - Use abbreviation", "--Alignment--", "Alignment - Fasta format - Use sequence name", "Alignment - Fasta format - Use internal sequence id", "Alignment - Fasta format - Use abbreviation", "Alignment - Phylip format - Use sequence name", "Alignment - Phylip format - Use internal sequence id", "Alignment - Phylip format - Use abbreviation", "--Ancestor--", "Ancestor - Fasta format - Use sequence name", "Ancestor - Fasta format - Use internal sequence id", "Ancestor - Fasta format - Use abbreviation", "Ancestor - Phylip format - Use sequence name", "Ancestor - Phylip format - Use internal sequence id", "Ancestor - Phylip format - Use abbreviation", "--Matrix--", "Matrix", "--Tree--", "Tree - Newick format - Use original tree", "Tree - Newick format - Use sequence_id", "Tree - Newick format - Use abbreviation", "--MultipleTrees--", "MultipleTrees - Newick format - Use original tree", "MultipleTrees - Newick format - Use sequence_id", "MultipleTrees - Newick format - Use abbreviation", "--Phylip--", "Phylip", "Phylip_Distance", "Phylip_Seqboot", "--Results--", "Results text", "--Unknown--", "Unknown", "--Text--", "Text", "--File type (this will not load the file into the database)--", "TextFile" }));
        arg1_type.setEnabled(false);
        arg1_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arg1_typeActionPerformed(evt);
            }
        });

        arg2_option.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Simple option (text)", "File (Up input port)", "File (Down input port)", "File (Output port)", "Option=File (Up input port)", "Option=File (Down input port)", "Option=File (Output port)", "<File (Up input port)", "<File (Down input port)", ">File (Output port)" }));
        arg2_option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arg2_optionActionPerformed(evt);
            }
        });

        arg2_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Sequence--", "Sequence - Fasta format - Use sequence name", "Sequence - Fasta format - Use internal sequence id", "Sequence - Fasta format - Use abbreviation", "Sequence - Phylip format - Use sequence name", "Sequence - Phylip format - Use internal sequence id", "Sequence - Phylip format - Use abbreviation", "--MultipleSequences--", "MultipleSequences - Fasta format - Use sequence name", "MultipleSequences - Fasta format - Use internal sequence id", "MultipleSequences - Fasta format - Use abbreviation", "MultipleSequences - Phylip format - Use sequence name", "MultipleSequences - Phylip format - Use internal sequence id", "MultipleSequences - Phylip format - Use abbreviation", "--Alignment--", "Alignment - Fasta format - Use sequence name", "Alignment - Fasta format - Use internal sequence id", "Alignment - Fasta format - Use abbreviation", "Alignment - Phylip format - Use sequence name", "Alignment - Phylip format - Use internal sequence id", "Alignment - Phylip format - Use abbreviation", "--Ancestor--", "Ancestor - Fasta format - Use sequence name", "Ancestor - Fasta format - Use internal sequence id", "Ancestor - Fasta format - Use abbreviation", "Ancestor - Phylip format - Use sequence name", "Ancestor - Phylip format - Use internal sequence id", "Ancestor - Phylip format - Use abbreviation", "--Matrix--", "Matrix", "--Tree--", "Tree - Newick format - Use original tree", "Tree - Newick format - Use sequence_id", "Tree - Newick format - Use abbreviation", "--MultipleTrees--", "MultipleTrees - Newick format - Use original tree", "MultipleTrees - Newick format - Use sequence_id", "MultipleTrees - Newick format - Use abbreviation", "--Phylip--", "Phylip", "Phylip_Distance", "Phylip_Seqboot", "--Results--", "Results text", "--Unknown--", "Unknown", "--Text--", "Text", "--File type (this will not load the file into the database)--", "TextFile" }));
        arg2_type.setEnabled(false);
        arg2_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arg2_typeActionPerformed(evt);
            }
        });

        arg3_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Sequence--", "Sequence - Fasta format - Use sequence name", "Sequence - Fasta format - Use internal sequence id", "Sequence - Fasta format - Use abbreviation", "Sequence - Phylip format - Use sequence name", "Sequence - Phylip format - Use internal sequence id", "Sequence - Phylip format - Use abbreviation", "--MultipleSequences--", "MultipleSequences - Fasta format - Use sequence name", "MultipleSequences - Fasta format - Use internal sequence id", "MultipleSequences - Fasta format - Use abbreviation", "MultipleSequences - Phylip format - Use sequence name", "MultipleSequences - Phylip format - Use internal sequence id", "MultipleSequences - Phylip format - Use abbreviation", "--Alignment--", "Alignment - Fasta format - Use sequence name", "Alignment - Fasta format - Use internal sequence id", "Alignment - Fasta format - Use abbreviation", "Alignment - Phylip format - Use sequence name", "Alignment - Phylip format - Use internal sequence id", "Alignment - Phylip format - Use abbreviation", "--Ancestor--", "Ancestor - Fasta format - Use sequence name", "Ancestor - Fasta format - Use internal sequence id", "Ancestor - Fasta format - Use abbreviation", "Ancestor - Phylip format - Use sequence name", "Ancestor - Phylip format - Use internal sequence id", "Ancestor - Phylip format - Use abbreviation", "--Matrix--", "Matrix", "--Tree--", "Tree - Newick format - Use original tree", "Tree - Newick format - Use sequence_id", "Tree - Newick format - Use abbreviation", "--MultipleTrees--", "MultipleTrees - Newick format - Use original tree", "MultipleTrees - Newick format - Use sequence_id", "MultipleTrees - Newick format - Use abbreviation", "--Phylip--", "Phylip", "Phylip_Distance", "Phylip_Seqboot", "--Results--", "Results text", "--Unknown--", "Unknown", "--Text--", "Text", "--File type (this will not load the file into the database)--", "TextFile" }));
        arg3_type.setEnabled(false);
        arg3_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arg3_typeActionPerformed(evt);
            }
        });

        arg3_option.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Simple option (text)", "File (Up input port)", "File (Down input port)", "File (Output port)", "Option=File (Up input port)", "Option=File (Down input port)", "Option=File (Output port)", "<File (Up input port)", "<File (Down input port)", ">File (Output port)" }));
        arg3_option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arg3_optionActionPerformed(evt);
            }
        });

        arg4_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Sequence--", "Sequence - Fasta format - Use sequence name", "Sequence - Fasta format - Use internal sequence id", "Sequence - Fasta format - Use abbreviation", "Sequence - Phylip format - Use sequence name", "Sequence - Phylip format - Use internal sequence id", "Sequence - Phylip format - Use abbreviation", "--MultipleSequences--", "MultipleSequences - Fasta format - Use sequence name", "MultipleSequences - Fasta format - Use internal sequence id", "MultipleSequences - Fasta format - Use abbreviation", "MultipleSequences - Phylip format - Use sequence name", "MultipleSequences - Phylip format - Use internal sequence id", "MultipleSequences - Phylip format - Use abbreviation", "--Alignment--", "Alignment - Fasta format - Use sequence name", "Alignment - Fasta format - Use internal sequence id", "Alignment - Fasta format - Use abbreviation", "Alignment - Phylip format - Use sequence name", "Alignment - Phylip format - Use internal sequence id", "Alignment - Phylip format - Use abbreviation", "--Ancestor--", "Ancestor - Fasta format - Use sequence name", "Ancestor - Fasta format - Use internal sequence id", "Ancestor - Fasta format - Use abbreviation", "Ancestor - Phylip format - Use sequence name", "Ancestor - Phylip format - Use internal sequence id", "Ancestor - Phylip format - Use abbreviation", "--Matrix--", "Matrix", "--Tree--", "Tree - Newick format - Use original tree", "Tree - Newick format - Use sequence_id", "Tree - Newick format - Use abbreviation", "--MultipleTrees--", "MultipleTrees - Newick format - Use original tree", "MultipleTrees - Newick format - Use sequence_id", "MultipleTrees - Newick format - Use abbreviation", "--Phylip--", "Phylip", "Phylip_Distance", "Phylip_Seqboot", "--Results--", "Results text", "--Unknown--", "Unknown", "--Text--", "Text", "--File type (this will not load the file into the database)--", "TextFile" }));
        arg4_type.setEnabled(false);
        arg4_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arg4_typeActionPerformed(evt);
            }
        });

        arg4_option.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Simple option (text)", "File (Up input port)", "File (Down input port)", "File (Output port)", "Option=File (Up input port)", "Option=File (Down input port)", "Option=File (Output port)", "<File (Up input port)", "<File (Down input port)", ">File (Output port)" }));
        arg4_option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arg4_optionActionPerformed(evt);
            }
        });

        arg5_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Sequence--", "Sequence - Fasta format - Use sequence name", "Sequence - Fasta format - Use internal sequence id", "Sequence - Fasta format - Use abbreviation", "Sequence - Phylip format - Use sequence name", "Sequence - Phylip format - Use internal sequence id", "Sequence - Phylip format - Use abbreviation", "--MultipleSequences--", "MultipleSequences - Fasta format - Use sequence name", "MultipleSequences - Fasta format - Use internal sequence id", "MultipleSequences - Fasta format - Use abbreviation", "MultipleSequences - Phylip format - Use sequence name", "MultipleSequences - Phylip format - Use internal sequence id", "MultipleSequences - Phylip format - Use abbreviation", "--Alignment--", "Alignment - Fasta format - Use sequence name", "Alignment - Fasta format - Use internal sequence id", "Alignment - Fasta format - Use abbreviation", "Alignment - Phylip format - Use sequence name", "Alignment - Phylip format - Use internal sequence id", "Alignment - Phylip format - Use abbreviation", "--Ancestor--", "Ancestor - Fasta format - Use sequence name", "Ancestor - Fasta format - Use internal sequence id", "Ancestor - Fasta format - Use abbreviation", "Ancestor - Phylip format - Use sequence name", "Ancestor - Phylip format - Use internal sequence id", "Ancestor - Phylip format - Use abbreviation", "--Matrix--", "Matrix", "--Tree--", "Tree - Newick format - Use original tree", "Tree - Newick format - Use sequence_id", "Tree - Newick format - Use abbreviation", "--MultipleTrees--", "MultipleTrees - Newick format - Use original tree", "MultipleTrees - Newick format - Use sequence_id", "MultipleTrees - Newick format - Use abbreviation", "--Phylip--", "Phylip", "Phylip_Distance", "Phylip_Seqboot", "--Results--", "Results text", "--Unknown--", "Unknown", "--Text--", "Text", "--File type (this will not load the file into the database)--", "TextFile" }));
        arg5_type.setEnabled(false);
        arg5_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arg5_typeActionPerformed(evt);
            }
        });

        arg5_option.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Simple option (text)", "File (Up input port)", "File (Down input port)", "File (Output port)", "Option=File (Up input port)", "Option=File (Down input port)", "Option=File (Output port)", "<File (Up input port)", "<File (Down input port)", ">File (Output port)" }));
        arg5_option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arg5_optionActionPerformed(evt);
            }
        });

        arg6_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Sequence--", "Sequence - Fasta format - Use sequence name", "Sequence - Fasta format - Use internal sequence id", "Sequence - Fasta format - Use abbreviation", "Sequence - Phylip format - Use sequence name", "Sequence - Phylip format - Use internal sequence id", "Sequence - Phylip format - Use abbreviation", "--MultipleSequences--", "MultipleSequences - Fasta format - Use sequence name", "MultipleSequences - Fasta format - Use internal sequence id", "MultipleSequences - Fasta format - Use abbreviation", "MultipleSequences - Phylip format - Use sequence name", "MultipleSequences - Phylip format - Use internal sequence id", "MultipleSequences - Phylip format - Use abbreviation", "--Alignment--", "Alignment - Fasta format - Use sequence name", "Alignment - Fasta format - Use internal sequence id", "Alignment - Fasta format - Use abbreviation", "Alignment - Phylip format - Use sequence name", "Alignment - Phylip format - Use internal sequence id", "Alignment - Phylip format - Use abbreviation", "--Ancestor--", "Ancestor - Fasta format - Use sequence name", "Ancestor - Fasta format - Use internal sequence id", "Ancestor - Fasta format - Use abbreviation", "Ancestor - Phylip format - Use sequence name", "Ancestor - Phylip format - Use internal sequence id", "Ancestor - Phylip format - Use abbreviation", "--Matrix--", "Matrix", "--Tree--", "Tree - Newick format - Use original tree", "Tree - Newick format - Use sequence_id", "Tree - Newick format - Use abbreviation", "--MultipleTrees--", "MultipleTrees - Newick format - Use original tree", "MultipleTrees - Newick format - Use sequence_id", "MultipleTrees - Newick format - Use abbreviation", "--Phylip--", "Phylip", "Phylip_Distance", "Phylip_Seqboot", "--Results--", "Results text", "--Unknown--", "Unknown", "--Text--", "Text", "--File type (this will not load the file into the database)--", "TextFile" }));
        arg6_type.setEnabled(false);
        arg6_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arg6_typeActionPerformed(evt);
            }
        });

        arg6_option.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Simple option (text)", "File (Up input port)", "File (Down input port)", "File (Output port)", "Option=File (Up input port)", "Option=File (Down input port)", "Option=File (Output port)", "<File (Up input port)", "<File (Down input port)", ">File (Output port)" }));
        arg6_option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arg6_optionActionPerformed(evt);
            }
        });

        Insert_Sample_Perl_jButton.setText("Sample Perl script (.pl)");
        Insert_Sample_Perl_jButton.setToolTipText("Insert a sample perl script test. Note that perl must be installed on the running computer.");

        Insert_SampleApplication_jButton.setText("Sample application");
        Insert_SampleApplication_jButton.setToolTipText("This insert the HGT application as sample. This application take 2 phylogenetic trees from 2 ports and calculates the probability of an horizontal gene transfers event.");
        Insert_SampleApplication_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Insert_SampleApplication_jButtonActionPerformed(evt);
            }
        });

        arg7_option.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Simple option (text)", "File (Up input port)", "File (Down input port)", "File (Output port)", "Option=File (Up input port)", "Option=File (Down input port)", "Option=File (Output port)", "<File (Up input port)", "<File (Down input port)", ">File (Output port)" }));
        arg7_option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arg7_optionActionPerformed(evt);
            }
        });

        arg7_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Sequence--", "Sequence - Fasta format - Use sequence name", "Sequence - Fasta format - Use internal sequence id", "Sequence - Fasta format - Use abbreviation", "Sequence - Phylip format - Use sequence name", "Sequence - Phylip format - Use internal sequence id", "Sequence - Phylip format - Use abbreviation", "--MultipleSequences--", "MultipleSequences - Fasta format - Use sequence name", "MultipleSequences - Fasta format - Use internal sequence id", "MultipleSequences - Fasta format - Use abbreviation", "MultipleSequences - Phylip format - Use sequence name", "MultipleSequences - Phylip format - Use internal sequence id", "MultipleSequences - Phylip format - Use abbreviation", "--Alignment--", "Alignment - Fasta format - Use sequence name", "Alignment - Fasta format - Use internal sequence id", "Alignment - Fasta format - Use abbreviation", "Alignment - Phylip format - Use sequence name", "Alignment - Phylip format - Use internal sequence id", "Alignment - Phylip format - Use abbreviation", "--Ancestor--", "Ancestor - Fasta format - Use sequence name", "Ancestor - Fasta format - Use internal sequence id", "Ancestor - Fasta format - Use abbreviation", "Ancestor - Phylip format - Use sequence name", "Ancestor - Phylip format - Use internal sequence id", "Ancestor - Phylip format - Use abbreviation", "--Matrix--", "Matrix", "--Tree--", "Tree - Newick format - Use original tree", "Tree - Newick format - Use sequence_id", "Tree - Newick format - Use abbreviation", "--MultipleTrees--", "MultipleTrees - Newick format - Use original tree", "MultipleTrees - Newick format - Use sequence_id", "MultipleTrees - Newick format - Use abbreviation", "--Phylip--", "Phylip", "Phylip_Distance", "Phylip_Seqboot", "--Results--", "Results text", "--Unknown--", "Unknown", "--Text--", "Text", "--File type (this will not load the file into the database)--", "TextFile" }));
        arg7_type.setEnabled(false);
        arg7_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arg7_typeActionPerformed(evt);
            }
        });

        arg18_option.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Simple option (text)", "File <Up input port>", "File <Down input port>", "File <Output port>", "Option=File <Up input port>", "Option=File <Down input port>", "Option=File <Output port>" }));
        arg18_option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arg18_optionActionPerformed(evt);
            }
        });

        arg18_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Sequence--", "Sequence - Fasta format - Use sequence name", "Sequence - Fasta format - Use internal sequence id", "Sequence - Fasta format - Use abbreviation", "Sequence - Phylip format - Use sequence name", "Sequence - Phylip format - Use internal sequence id", "Sequence - Phylip format - Use abbreviation", "--MultipleSequences--", "MultipleSequences - Fasta format - Use sequence name", "MultipleSequences - Fasta format - Use internal sequence id", "MultipleSequences - Fasta format - Use abbreviation", "MultipleSequences - Phylip format - Use sequence name", "MultipleSequences - Phylip format - Use internal sequence id", "MultipleSequences - Phylip format - Use abbreviation", "--Alignment--", "Alignment - Fasta format - Use sequence name", "Alignment - Fasta format - Use internal sequence id", "Alignment - Fasta format - Use abbreviation", "Alignment - Phylip format - Use sequence name", "Alignment - Phylip format - Use internal sequence id", "Alignment - Phylip format - Use abbreviation", "--Ancestor--", "Ancestor - Fasta format - Use sequence name", "Ancestor - Fasta format - Use internal sequence id", "Ancestor - Fasta format - Use abbreviation", "Ancestor - Phylip format - Use sequence name", "Ancestor - Phylip format - Use internal sequence id", "Ancestor - Phylip format - Use abbreviation", "--Matrix--", "Matrix", "--Tree--", "Tree - Newick format - Use original tree", "Tree - Newick format - Use sequence_id", "Tree - Newick format - Use abbreviation", "--MultipleTrees--", "MultipleTrees - Newick format - Use original tree", "MultipleTrees - Newick format - Use sequence_id", "MultipleTrees - Newick format - Use abbreviation", "--Phylip--", "Phylip", "Phylip_Distance", "Phylip_Seqboot", "--Results--", "Results text", "--Unknown--", "Unknown", "--Text--", "Text", "--File type (this will not load the file into the database)--", "TextFile" }));
        arg18_type.setEnabled(false);
        arg18_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arg18_typeActionPerformed(evt);
            }
        });

        arg19_option.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Simple option (text)", "File (Up input port)", "File (Down input port)", "File (Output port)", "Option=File (Up input port)", "Option=File (Down input port)", "Option=File (Output port)", "<File (Up input port)", "<File (Down input port)", ">File (Output port)" }));
        arg19_option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arg19_optionActionPerformed(evt);
            }
        });

        arg19_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Sequence--", "Sequence - Fasta format - Use sequence name", "Sequence - Fasta format - Use internal sequence id", "Sequence - Fasta format - Use abbreviation", "Sequence - Phylip format - Use sequence name", "Sequence - Phylip format - Use internal sequence id", "Sequence - Phylip format - Use abbreviation", "--MultipleSequences--", "MultipleSequences - Fasta format - Use sequence name", "MultipleSequences - Fasta format - Use internal sequence id", "MultipleSequences - Fasta format - Use abbreviation", "MultipleSequences - Phylip format - Use sequence name", "MultipleSequences - Phylip format - Use internal sequence id", "MultipleSequences - Phylip format - Use abbreviation", "--Alignment--", "Alignment - Fasta format - Use sequence name", "Alignment - Fasta format - Use internal sequence id", "Alignment - Fasta format - Use abbreviation", "Alignment - Phylip format - Use sequence name", "Alignment - Phylip format - Use internal sequence id", "Alignment - Phylip format - Use abbreviation", "--Ancestor--", "Ancestor - Fasta format - Use sequence name", "Ancestor - Fasta format - Use internal sequence id", "Ancestor - Fasta format - Use abbreviation", "Ancestor - Phylip format - Use sequence name", "Ancestor - Phylip format - Use internal sequence id", "Ancestor - Phylip format - Use abbreviation", "--Matrix--", "Matrix", "--Tree--", "Tree - Newick format - Use original tree", "Tree - Newick format - Use sequence_id", "Tree - Newick format - Use abbreviation", "--MultipleTrees--", "MultipleTrees - Newick format - Use original tree", "MultipleTrees - Newick format - Use sequence_id", "MultipleTrees - Newick format - Use abbreviation", "--Phylip--", "Phylip", "Phylip_Distance", "Phylip_Seqboot", "--Results--", "Results text", "--Unknown--", "Unknown", "--Text--", "Text", "--File type (this will not load the file into the database)--", "TextFile" }));
        arg19_type.setEnabled(false);
        arg19_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arg19_typeActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Argument 1");

        jLabel14.setFont(new java.awt.Font("Tahoma 11", 1, 12));
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("2");

        jLabel26.setFont(new java.awt.Font("Tahoma 11 12", 1, 12));
        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel26.setText("3");

        jLabel27.setFont(new java.awt.Font("Tahoma 11 12 12", 1, 12));
        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel27.setText("4");

        jLabel28.setFont(new java.awt.Font("Tahoma 11 12 12 12", 1, 12));
        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel28.setText("5");

        jLabel29.setFont(new java.awt.Font("Tahoma 11 12 12 12 12", 1, 12));
        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel29.setText("6");

        jLabel30.setFont(new java.awt.Font("Tahoma 11 12 12 12 12 12", 1, 12));
        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel30.setText("7");

        jLabel31.setFont(new java.awt.Font("Tahoma 11 12 12 12 12 12 12", 1, 12));
        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel31.setText("18");

        jLabel32.setFont(new java.awt.Font("Tahoma 11 12 12 12 12 12 12 12", 1, 12));
        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel32.setText("19");

        jLabel33.setFont(new java.awt.Font("Tahoma 11 12 12 12 12 12 12 12 12", 1, 12));
        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel33.setText("20");

        arg20_option.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Simple option (text)", "File (Up input port)", "File (Down input port)", "File (Output port)", "Option=File (Up input port)", "Option=File (Down input port)", "Option=File (Output port)", "<File (Up input port)", "<File (Down input port)", ">File (Output port)" }));
        arg20_option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arg20_optionActionPerformed(evt);
            }
        });

        arg20_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Sequence--", "Sequence - Fasta format - Use sequence name", "Sequence - Fasta format - Use internal sequence id", "Sequence - Fasta format - Use abbreviation", "Sequence - Phylip format - Use sequence name", "Sequence - Phylip format - Use internal sequence id", "Sequence - Phylip format - Use abbreviation", "--MultipleSequences--", "MultipleSequences - Fasta format - Use sequence name", "MultipleSequences - Fasta format - Use internal sequence id", "MultipleSequences - Fasta format - Use abbreviation", "MultipleSequences - Phylip format - Use sequence name", "MultipleSequences - Phylip format - Use internal sequence id", "MultipleSequences - Phylip format - Use abbreviation", "--Alignment--", "Alignment - Fasta format - Use sequence name", "Alignment - Fasta format - Use internal sequence id", "Alignment - Fasta format - Use abbreviation", "Alignment - Phylip format - Use sequence name", "Alignment - Phylip format - Use internal sequence id", "Alignment - Phylip format - Use abbreviation", "--Ancestor--", "Ancestor - Fasta format - Use sequence name", "Ancestor - Fasta format - Use internal sequence id", "Ancestor - Fasta format - Use abbreviation", "Ancestor - Phylip format - Use sequence name", "Ancestor - Phylip format - Use internal sequence id", "Ancestor - Phylip format - Use abbreviation", "--Matrix--", "Matrix", "--Tree--", "Tree - Newick format - Use original tree", "Tree - Newick format - Use sequence_id", "Tree - Newick format - Use abbreviation", "--MultipleTrees--", "MultipleTrees - Newick format - Use original tree", "MultipleTrees - Newick format - Use sequence_id", "MultipleTrees - Newick format - Use abbreviation", "--Phylip--", "Phylip", "Phylip_Distance", "Phylip_Seqboot", "--Results--", "Results text", "--Unknown--", "Unknown", "--Text--", "Text", "--File type (this will not load the file into the database)--", "TextFile" }));
        arg20_type.setEnabled(false);
        arg20_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arg20_typeActionPerformed(evt);
            }
        });

        Insert_Sample_Jar_jButton.setText("Sample compiled Java (.jar)");
        Insert_Sample_Jar_jButton.setToolTipText("Insert a sample run for ProtTest.jar");

        arg12_option.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Simple option (text)", "File (Up input port)", "File (Down input port)", "File (Output port)", "Option=File (Up input port)", "Option=File (Down input port)", "Option=File (Output port)", "<File (Up input port)", "<File (Down input port)", ">File (Output port)" }));
        arg12_option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arg12_optionActionPerformed(evt);
            }
        });

        jLabel35.setFont(new java.awt.Font("Tahoma 11", 1, 12));
        jLabel35.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel35.setText("8");

        jLabel36.setFont(new java.awt.Font("Tahoma 11 12 12", 1, 12));
        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel36.setText("10");

        jLabel37.setFont(new java.awt.Font("Tahoma 11 12", 1, 12));
        jLabel37.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel37.setText("9");

        arg13_option.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Simple option (text)", "File (Up input port)", "File (Down input port)", "File (Output port)", "Option=File (Up input port)", "Option=File (Down input port)", "Option=File (Output port)", "<File (Up input port)", "<File (Down input port)", ">File (Output port)" }));
        arg13_option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arg13_optionActionPerformed(evt);
            }
        });

        arg13_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Sequence--", "Sequence - Fasta format - Use sequence name", "Sequence - Fasta format - Use internal sequence id", "Sequence - Fasta format - Use abbreviation", "Sequence - Phylip format - Use sequence name", "Sequence - Phylip format - Use internal sequence id", "Sequence - Phylip format - Use abbreviation", "--MultipleSequences--", "MultipleSequences - Fasta format - Use sequence name", "MultipleSequences - Fasta format - Use internal sequence id", "MultipleSequences - Fasta format - Use abbreviation", "MultipleSequences - Phylip format - Use sequence name", "MultipleSequences - Phylip format - Use internal sequence id", "MultipleSequences - Phylip format - Use abbreviation", "--Alignment--", "Alignment - Fasta format - Use sequence name", "Alignment - Fasta format - Use internal sequence id", "Alignment - Fasta format - Use abbreviation", "Alignment - Phylip format - Use sequence name", "Alignment - Phylip format - Use internal sequence id", "Alignment - Phylip format - Use abbreviation", "--Ancestor--", "Ancestor - Fasta format - Use sequence name", "Ancestor - Fasta format - Use internal sequence id", "Ancestor - Fasta format - Use abbreviation", "Ancestor - Phylip format - Use sequence name", "Ancestor - Phylip format - Use internal sequence id", "Ancestor - Phylip format - Use abbreviation", "--Matrix--", "Matrix", "--Tree--", "Tree - Newick format - Use original tree", "Tree - Newick format - Use sequence_id", "Tree - Newick format - Use abbreviation", "--MultipleTrees--", "MultipleTrees - Newick format - Use original tree", "MultipleTrees - Newick format - Use sequence_id", "MultipleTrees - Newick format - Use abbreviation", "--Phylip--", "Phylip", "Phylip_Distance", "Phylip_Seqboot", "--Results--", "Results text", "--Unknown--", "Unknown", "--Text--", "Text", "--File type (this will not load the file into the database)--", "TextFile" }));
        arg13_type.setEnabled(false);
        arg13_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arg13_typeActionPerformed(evt);
            }
        });

        jLabel38.setFont(new java.awt.Font("Tahoma 11 12 12 12 12", 1, 12));
        jLabel38.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel38.setText("12");

        jLabel39.setFont(new java.awt.Font("Tahoma 11 12 12 12", 1, 12));
        jLabel39.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel39.setText("11");

        arg11_option.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Simple option (text)", "File (Up input port)", "File (Down input port)", "File (Output port)", "Option=File (Up input port)", "Option=File (Down input port)", "Option=File (Output port)", "<File (Up input port)", "<File (Down input port)", ">File (Output port)" }));
        arg11_option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arg11_optionActionPerformed(evt);
            }
        });

        arg11_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Sequence--", "Sequence - Fasta format - Use sequence name", "Sequence - Fasta format - Use internal sequence id", "Sequence - Fasta format - Use abbreviation", "Sequence - Phylip format - Use sequence name", "Sequence - Phylip format - Use internal sequence id", "Sequence - Phylip format - Use abbreviation", "--MultipleSequences--", "MultipleSequences - Fasta format - Use sequence name", "MultipleSequences - Fasta format - Use internal sequence id", "MultipleSequences - Fasta format - Use abbreviation", "MultipleSequences - Phylip format - Use sequence name", "MultipleSequences - Phylip format - Use internal sequence id", "MultipleSequences - Phylip format - Use abbreviation", "--Alignment--", "Alignment - Fasta format - Use sequence name", "Alignment - Fasta format - Use internal sequence id", "Alignment - Fasta format - Use abbreviation", "Alignment - Phylip format - Use sequence name", "Alignment - Phylip format - Use internal sequence id", "Alignment - Phylip format - Use abbreviation", "--Ancestor--", "Ancestor - Fasta format - Use sequence name", "Ancestor - Fasta format - Use internal sequence id", "Ancestor - Fasta format - Use abbreviation", "Ancestor - Phylip format - Use sequence name", "Ancestor - Phylip format - Use internal sequence id", "Ancestor - Phylip format - Use abbreviation", "--Matrix--", "Matrix", "--Tree--", "Tree - Newick format - Use original tree", "Tree - Newick format - Use sequence_id", "Tree - Newick format - Use abbreviation", "--MultipleTrees--", "MultipleTrees - Newick format - Use original tree", "MultipleTrees - Newick format - Use sequence_id", "MultipleTrees - Newick format - Use abbreviation", "--Phylip--", "Phylip", "Phylip_Distance", "Phylip_Seqboot", "--Results--", "Results text", "--Unknown--", "Unknown", "--Text--", "Text", "--File type (this will not load the file into the database)--", "TextFile" }));
        arg11_type.setEnabled(false);
        arg11_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arg11_typeActionPerformed(evt);
            }
        });

        arg12_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Sequence--", "Sequence - Fasta format - Use sequence name", "Sequence - Fasta format - Use internal sequence id", "Sequence - Fasta format - Use abbreviation", "Sequence - Phylip format - Use sequence name", "Sequence - Phylip format - Use internal sequence id", "Sequence - Phylip format - Use abbreviation", "--MultipleSequences--", "MultipleSequences - Fasta format - Use sequence name", "MultipleSequences - Fasta format - Use internal sequence id", "MultipleSequences - Fasta format - Use abbreviation", "MultipleSequences - Phylip format - Use sequence name", "MultipleSequences - Phylip format - Use internal sequence id", "MultipleSequences - Phylip format - Use abbreviation", "--Alignment--", "Alignment - Fasta format - Use sequence name", "Alignment - Fasta format - Use internal sequence id", "Alignment - Fasta format - Use abbreviation", "Alignment - Phylip format - Use sequence name", "Alignment - Phylip format - Use internal sequence id", "Alignment - Phylip format - Use abbreviation", "--Ancestor--", "Ancestor - Fasta format - Use sequence name", "Ancestor - Fasta format - Use internal sequence id", "Ancestor - Fasta format - Use abbreviation", "Ancestor - Phylip format - Use sequence name", "Ancestor - Phylip format - Use internal sequence id", "Ancestor - Phylip format - Use abbreviation", "--Matrix--", "Matrix", "--Tree--", "Tree - Newick format - Use original tree", "Tree - Newick format - Use sequence_id", "Tree - Newick format - Use abbreviation", "--MultipleTrees--", "MultipleTrees - Newick format - Use original tree", "MultipleTrees - Newick format - Use sequence_id", "MultipleTrees - Newick format - Use abbreviation", "--Phylip--", "Phylip", "Phylip_Distance", "Phylip_Seqboot", "--Results--", "Results text", "--Unknown--", "Unknown", "--Text--", "Text", "--File type (this will not load the file into the database)--", "TextFile" }));
        arg12_type.setEnabled(false);
        arg12_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arg12_typeActionPerformed(evt);
            }
        });

        arg8_option.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Simple option (text)", "File (Up input port)", "File (Down input port)", "File (Output port)", "Option=File (Up input port)", "Option=File (Down input port)", "Option=File (Output port)", "<File (Up input port)", "<File (Down input port)", ">File (Output port)" }));
        arg8_option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arg8_optionActionPerformed(evt);
            }
        });

        jLabel40.setFont(new java.awt.Font("Tahoma 11 12 12 12 12 12", 1, 12));
        jLabel40.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel40.setText("13");

        jLabel41.setFont(new java.awt.Font("Tahoma 11 12 12 12 12 12 12", 1, 12));
        jLabel41.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel41.setText("14");

        arg8_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Sequence--", "Sequence - Fasta format - Use sequence name", "Sequence - Fasta format - Use internal sequence id", "Sequence - Fasta format - Use abbreviation", "Sequence - Phylip format - Use sequence name", "Sequence - Phylip format - Use internal sequence id", "Sequence - Phylip format - Use abbreviation", "--MultipleSequences--", "MultipleSequences - Fasta format - Use sequence name", "MultipleSequences - Fasta format - Use internal sequence id", "MultipleSequences - Fasta format - Use abbreviation", "MultipleSequences - Phylip format - Use sequence name", "MultipleSequences - Phylip format - Use internal sequence id", "MultipleSequences - Phylip format - Use abbreviation", "--Alignment--", "Alignment - Fasta format - Use sequence name", "Alignment - Fasta format - Use internal sequence id", "Alignment - Fasta format - Use abbreviation", "Alignment - Phylip format - Use sequence name", "Alignment - Phylip format - Use internal sequence id", "Alignment - Phylip format - Use abbreviation", "--Ancestor--", "Ancestor - Fasta format - Use sequence name", "Ancestor - Fasta format - Use internal sequence id", "Ancestor - Fasta format - Use abbreviation", "Ancestor - Phylip format - Use sequence name", "Ancestor - Phylip format - Use internal sequence id", "Ancestor - Phylip format - Use abbreviation", "--Matrix--", "Matrix", "--Tree--", "Tree - Newick format - Use original tree", "Tree - Newick format - Use sequence_id", "Tree - Newick format - Use abbreviation", "--MultipleTrees--", "MultipleTrees - Newick format - Use original tree", "MultipleTrees - Newick format - Use sequence_id", "MultipleTrees - Newick format - Use abbreviation", "--Phylip--", "Phylip", "Phylip_Distance", "Phylip_Seqboot", "--Results--", "Results text", "--Unknown--", "Unknown", "--Text--", "Text", "--File type (this will not load the file into the database)--", "TextFile" }));
        arg8_type.setEnabled(false);
        arg8_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arg8_typeActionPerformed(evt);
            }
        });

        arg14_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Sequence--", "Sequence - Fasta format - Use sequence name", "Sequence - Fasta format - Use internal sequence id", "Sequence - Fasta format - Use abbreviation", "Sequence - Phylip format - Use sequence name", "Sequence - Phylip format - Use internal sequence id", "Sequence - Phylip format - Use abbreviation", "--MultipleSequences--", "MultipleSequences - Fasta format - Use sequence name", "MultipleSequences - Fasta format - Use internal sequence id", "MultipleSequences - Fasta format - Use abbreviation", "MultipleSequences - Phylip format - Use sequence name", "MultipleSequences - Phylip format - Use internal sequence id", "MultipleSequences - Phylip format - Use abbreviation", "--Alignment--", "Alignment - Fasta format - Use sequence name", "Alignment - Fasta format - Use internal sequence id", "Alignment - Fasta format - Use abbreviation", "Alignment - Phylip format - Use sequence name", "Alignment - Phylip format - Use internal sequence id", "Alignment - Phylip format - Use abbreviation", "--Ancestor--", "Ancestor - Fasta format - Use sequence name", "Ancestor - Fasta format - Use internal sequence id", "Ancestor - Fasta format - Use abbreviation", "Ancestor - Phylip format - Use sequence name", "Ancestor - Phylip format - Use internal sequence id", "Ancestor - Phylip format - Use abbreviation", "--Matrix--", "Matrix", "--Tree--", "Tree - Newick format - Use original tree", "Tree - Newick format - Use sequence_id", "Tree - Newick format - Use abbreviation", "--MultipleTrees--", "MultipleTrees - Newick format - Use original tree", "MultipleTrees - Newick format - Use sequence_id", "MultipleTrees - Newick format - Use abbreviation", "--Phylip--", "Phylip", "Phylip_Distance", "Phylip_Seqboot", "--Results--", "Results text", "--Unknown--", "Unknown", "--Text--", "Text", "--File type (this will not load the file into the database)--", "TextFile" }));
        arg14_type.setEnabled(false);
        arg14_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arg14_typeActionPerformed(evt);
            }
        });

        arg9_option.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Simple option (text)", "File (Up input port)", "File (Down input port)", "File (Output port)", "Option=File (Up input port)", "Option=File (Down input port)", "Option=File (Output port)", "<File (Up input port)", "<File (Down input port)", ">File (Output port)" }));
        arg9_option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arg9_optionActionPerformed(evt);
            }
        });

        arg14_option.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Simple option (text)", "File (Up input port)", "File (Down input port)", "File (Output port)", "Option=File (Up input port)", "Option=File (Down input port)", "Option=File (Output port)", "<File (Up input port)", "<File (Down input port)", ">File (Output port)" }));
        arg14_option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arg14_optionActionPerformed(evt);
            }
        });

        arg9_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Sequence--", "Sequence - Fasta format - Use sequence name", "Sequence - Fasta format - Use internal sequence id", "Sequence - Fasta format - Use abbreviation", "Sequence - Phylip format - Use sequence name", "Sequence - Phylip format - Use internal sequence id", "Sequence - Phylip format - Use abbreviation", "--MultipleSequences--", "MultipleSequences - Fasta format - Use sequence name", "MultipleSequences - Fasta format - Use internal sequence id", "MultipleSequences - Fasta format - Use abbreviation", "MultipleSequences - Phylip format - Use sequence name", "MultipleSequences - Phylip format - Use internal sequence id", "MultipleSequences - Phylip format - Use abbreviation", "--Alignment--", "Alignment - Fasta format - Use sequence name", "Alignment - Fasta format - Use internal sequence id", "Alignment - Fasta format - Use abbreviation", "Alignment - Phylip format - Use sequence name", "Alignment - Phylip format - Use internal sequence id", "Alignment - Phylip format - Use abbreviation", "--Ancestor--", "Ancestor - Fasta format - Use sequence name", "Ancestor - Fasta format - Use internal sequence id", "Ancestor - Fasta format - Use abbreviation", "Ancestor - Phylip format - Use sequence name", "Ancestor - Phylip format - Use internal sequence id", "Ancestor - Phylip format - Use abbreviation", "--Matrix--", "Matrix", "--Tree--", "Tree - Newick format - Use original tree", "Tree - Newick format - Use sequence_id", "Tree - Newick format - Use abbreviation", "--MultipleTrees--", "MultipleTrees - Newick format - Use original tree", "MultipleTrees - Newick format - Use sequence_id", "MultipleTrees - Newick format - Use abbreviation", "--Phylip--", "Phylip", "Phylip_Distance", "Phylip_Seqboot", "--Results--", "Results text", "--Unknown--", "Unknown", "--Text--", "Text", "--File type (this will not load the file into the database)--", "TextFile" }));
        arg9_type.setEnabled(false);
        arg9_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arg9_typeActionPerformed(evt);
            }
        });

        arg10_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Sequence--", "Sequence - Fasta format - Use sequence name", "Sequence - Fasta format - Use internal sequence id", "Sequence - Fasta format - Use abbreviation", "Sequence - Phylip format - Use sequence name", "Sequence - Phylip format - Use internal sequence id", "Sequence - Phylip format - Use abbreviation", "--MultipleSequences--", "MultipleSequences - Fasta format - Use sequence name", "MultipleSequences - Fasta format - Use internal sequence id", "MultipleSequences - Fasta format - Use abbreviation", "MultipleSequences - Phylip format - Use sequence name", "MultipleSequences - Phylip format - Use internal sequence id", "MultipleSequences - Phylip format - Use abbreviation", "--Alignment--", "Alignment - Fasta format - Use sequence name", "Alignment - Fasta format - Use internal sequence id", "Alignment - Fasta format - Use abbreviation", "Alignment - Phylip format - Use sequence name", "Alignment - Phylip format - Use internal sequence id", "Alignment - Phylip format - Use abbreviation", "--Ancestor--", "Ancestor - Fasta format - Use sequence name", "Ancestor - Fasta format - Use internal sequence id", "Ancestor - Fasta format - Use abbreviation", "Ancestor - Phylip format - Use sequence name", "Ancestor - Phylip format - Use internal sequence id", "Ancestor - Phylip format - Use abbreviation", "--Matrix--", "Matrix", "--Tree--", "Tree - Newick format - Use original tree", "Tree - Newick format - Use sequence_id", "Tree - Newick format - Use abbreviation", "--MultipleTrees--", "MultipleTrees - Newick format - Use original tree", "MultipleTrees - Newick format - Use sequence_id", "MultipleTrees - Newick format - Use abbreviation", "--Phylip--", "Phylip", "Phylip_Distance", "Phylip_Seqboot", "--Results--", "Results text", "--Unknown--", "Unknown", "--Text--", "Text", "--File type (this will not load the file into the database)--", "TextFile" }));
        arg10_type.setEnabled(false);
        arg10_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arg10_typeActionPerformed(evt);
            }
        });

        arg10_option.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Simple option (text)", "File <Up input port>", "File <Down input port>", "File <Output port>", "Option=File <Up input port>", "Option=File <Down input port>", "Option=File <Output port>" }));
        arg10_option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arg10_optionActionPerformed(evt);
            }
        });

        jLabel42.setFont(new java.awt.Font("Tahoma 11 12 12 12 12 12 12 12", 1, 12));
        jLabel42.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel42.setText("15");

        arg15_option.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Simple option (text)", "File (Up input port)", "File (Down input port)", "File (Output port)", "Option=File (Up input port)", "Option=File (Down input port)", "Option=File (Output port)", "<File (Up input port)", "<File (Down input port)", ">File (Output port)" }));
        arg15_option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arg15_optionActionPerformed(evt);
            }
        });

        arg15_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Sequence--", "Sequence - Fasta format - Use sequence name", "Sequence - Fasta format - Use internal sequence id", "Sequence - Fasta format - Use abbreviation", "Sequence - Phylip format - Use sequence name", "Sequence - Phylip format - Use internal sequence id", "Sequence - Phylip format - Use abbreviation", "--MultipleSequences--", "MultipleSequences - Fasta format - Use sequence name", "MultipleSequences - Fasta format - Use internal sequence id", "MultipleSequences - Fasta format - Use abbreviation", "MultipleSequences - Phylip format - Use sequence name", "MultipleSequences - Phylip format - Use internal sequence id", "MultipleSequences - Phylip format - Use abbreviation", "--Alignment--", "Alignment - Fasta format - Use sequence name", "Alignment - Fasta format - Use internal sequence id", "Alignment - Fasta format - Use abbreviation", "Alignment - Phylip format - Use sequence name", "Alignment - Phylip format - Use internal sequence id", "Alignment - Phylip format - Use abbreviation", "--Ancestor--", "Ancestor - Fasta format - Use sequence name", "Ancestor - Fasta format - Use internal sequence id", "Ancestor - Fasta format - Use abbreviation", "Ancestor - Phylip format - Use sequence name", "Ancestor - Phylip format - Use internal sequence id", "Ancestor - Phylip format - Use abbreviation", "--Matrix--", "Matrix", "--Tree--", "Tree - Newick format - Use original tree", "Tree - Newick format - Use sequence_id", "Tree - Newick format - Use abbreviation", "--MultipleTrees--", "MultipleTrees - Newick format - Use original tree", "MultipleTrees - Newick format - Use sequence_id", "MultipleTrees - Newick format - Use abbreviation", "--Phylip--", "Phylip", "Phylip_Distance", "Phylip_Seqboot", "--Results--", "Results text", "--Unknown--", "Unknown", "--Text--", "Text", "--File type (this will not load the file into the database)--", "TextFile" }));
        arg15_type.setEnabled(false);
        arg15_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arg15_typeActionPerformed(evt);
            }
        });

        jLabel43.setFont(new java.awt.Font("Tahoma 11 12 12 12 12 12 12 12 12", 1, 12));
        jLabel43.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel43.setText("16");

        arg16_option.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Simple option (text)", "File (Up input port)", "File (Down input port)", "File (Output port)", "Option=File (Up input port)", "Option=File (Down input port)", "Option=File (Output port)", "<File (Up input port)", "<File (Down input port)", ">File (Output port)" }));
        arg16_option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arg16_optionActionPerformed(evt);
            }
        });

        arg16_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Sequence--", "Sequence - Fasta format - Use sequence name", "Sequence - Fasta format - Use internal sequence id", "Sequence - Fasta format - Use abbreviation", "Sequence - Phylip format - Use sequence name", "Sequence - Phylip format - Use internal sequence id", "Sequence - Phylip format - Use abbreviation", "--MultipleSequences--", "MultipleSequences - Fasta format - Use sequence name", "MultipleSequences - Fasta format - Use internal sequence id", "MultipleSequences - Fasta format - Use abbreviation", "MultipleSequences - Phylip format - Use sequence name", "MultipleSequences - Phylip format - Use internal sequence id", "MultipleSequences - Phylip format - Use abbreviation", "--Alignment--", "Alignment - Fasta format - Use sequence name", "Alignment - Fasta format - Use internal sequence id", "Alignment - Fasta format - Use abbreviation", "Alignment - Phylip format - Use sequence name", "Alignment - Phylip format - Use internal sequence id", "Alignment - Phylip format - Use abbreviation", "--Ancestor--", "Ancestor - Fasta format - Use sequence name", "Ancestor - Fasta format - Use internal sequence id", "Ancestor - Fasta format - Use abbreviation", "Ancestor - Phylip format - Use sequence name", "Ancestor - Phylip format - Use internal sequence id", "Ancestor - Phylip format - Use abbreviation", "--Matrix--", "Matrix", "--Tree--", "Tree - Newick format - Use original tree", "Tree - Newick format - Use sequence_id", "Tree - Newick format - Use abbreviation", "--MultipleTrees--", "MultipleTrees - Newick format - Use original tree", "MultipleTrees - Newick format - Use sequence_id", "MultipleTrees - Newick format - Use abbreviation", "--Phylip--", "Phylip", "Phylip_Distance", "Phylip_Seqboot", "--Results--", "Results text", "--Unknown--", "Unknown", "--Text--", "Text", "--File type (this will not load the file into the database)--", "TextFile" }));
        arg16_type.setEnabled(false);
        arg16_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arg16_typeActionPerformed(evt);
            }
        });

        jLabel44.setFont(new java.awt.Font("Tahoma 11 12 12 12 12 12 12 12 12 12", 1, 12));
        jLabel44.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel44.setText("17");

        arg17_option.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Simple option (text)", "File (Up input port)", "File (Down input port)", "File (Output port)", "Option=File (Up input port)", "Option=File (Down input port)", "Option=File (Output port)", "<File (Up input port)", "<File (Down input port)", ">File (Output port)" }));
        arg17_option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arg17_optionActionPerformed(evt);
            }
        });

        arg17_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Sequence--", "Sequence - Fasta format - Use sequence name", "Sequence - Fasta format - Use internal sequence id", "Sequence - Fasta format - Use abbreviation", "Sequence - Phylip format - Use sequence name", "Sequence - Phylip format - Use internal sequence id", "Sequence - Phylip format - Use abbreviation", "--MultipleSequences--", "MultipleSequences - Fasta format - Use sequence name", "MultipleSequences - Fasta format - Use internal sequence id", "MultipleSequences - Fasta format - Use abbreviation", "MultipleSequences - Phylip format - Use sequence name", "MultipleSequences - Phylip format - Use internal sequence id", "MultipleSequences - Phylip format - Use abbreviation", "--Alignment--", "Alignment - Fasta format - Use sequence name", "Alignment - Fasta format - Use internal sequence id", "Alignment - Fasta format - Use abbreviation", "Alignment - Phylip format - Use sequence name", "Alignment - Phylip format - Use internal sequence id", "Alignment - Phylip format - Use abbreviation", "--Ancestor--", "Ancestor - Fasta format - Use sequence name", "Ancestor - Fasta format - Use internal sequence id", "Ancestor - Fasta format - Use abbreviation", "Ancestor - Phylip format - Use sequence name", "Ancestor - Phylip format - Use internal sequence id", "Ancestor - Phylip format - Use abbreviation", "--Matrix--", "Matrix", "--Tree--", "Tree - Newick format - Use original tree", "Tree - Newick format - Use sequence_id", "Tree - Newick format - Use abbreviation", "--MultipleTrees--", "MultipleTrees - Newick format - Use original tree", "MultipleTrees - Newick format - Use sequence_id", "MultipleTrees - Newick format - Use abbreviation", "--Phylip--", "Phylip", "Phylip_Distance", "Phylip_Seqboot", "--Results--", "Results text", "--Unknown--", "Unknown", "--Text--", "Text", "--File type (this will not load the file into the database)--", "TextFile" }));
        arg17_type.setEnabled(false);
        arg17_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arg17_typeActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("(2) Application name (e.g. cmd.exe)");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("SAMPLES");
        jLabel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        Locate_Application_jButton1.setText("...");
        Locate_Application_jButton1.setToolTipText("Locate the application using a file browser.");
        Locate_Application_jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Locate_Application_jButton1ActionPerformed(evt);
            }
        });

        Break_cli_jButton2.setText("Break command-line");
        Break_cli_jButton2.setToolTipText("This will break a command line into its different parts automatically.");
        Break_cli_jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Break_cli_jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(Insert_SampleApplication_jButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Insert_Sample_Perl_jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Insert_Sample_Jar_jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 519, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 519, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                        .addComponent(application_name, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Locate_Application_jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Break_cli_jButton2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 444, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(arg1_type, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(arg1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(arg1_option, javax.swing.GroupLayout.Alignment.LEADING, 0, 211, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(arg2_type, 0, 356, Short.MAX_VALUE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
                    .addComponent(arg2_option, 0, 356, Short.MAX_VALUE)
                    .addComponent(arg2, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel26, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg3_type, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg3_option, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg4_type, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg4_option, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg5_type, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg5_option, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel29, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg6_type, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg6_option, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg7_type, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg7_option, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel35, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg8_type, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg8_option, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(arg9)
                    .addComponent(arg9_type, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg9_option, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel37, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel36, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg10_type, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg10_option, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel39, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg11_type, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg11_option, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel38, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg12_type, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg12_option, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel40, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg13_type, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg13_option, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel41, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg14_type, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg14_option, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel42, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg15_type, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg15_option, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel43, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg16_type, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg16_option, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel44, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg17_type, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg17_option, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg18_type, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg18_option, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel32, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg19_type, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg19_option, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel33, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg20_type, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg20_option, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arg20)))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel10Layout.createSequentialGroup()
                                    .addComponent(jLabel29)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(arg6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(arg6_option, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(arg6_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel10Layout.createSequentialGroup()
                                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel27)
                                        .addComponent(jLabel28))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel10Layout.createSequentialGroup()
                                            .addComponent(arg5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(arg5_option, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel10Layout.createSequentialGroup()
                                            .addComponent(arg4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(arg4_option, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(arg4_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(arg5_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel10Layout.createSequentialGroup()
                                        .addComponent(jLabel30)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(arg7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(arg7_option, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(arg7_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel10Layout.createSequentialGroup()
                                        .addComponent(jLabel35)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(arg8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(arg8_option, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(arg8_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addComponent(jLabel26)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(arg3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(arg2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(arg1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(arg3_option, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(arg2_option, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(arg1_option, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(arg3_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(arg2_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(arg1_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap())
                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel10Layout.createSequentialGroup()
                            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel10Layout.createSequentialGroup()
                                    .addComponent(jLabel44)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(arg17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(arg17_option, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(arg17_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel10Layout.createSequentialGroup()
                                    .addComponent(jLabel31)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(arg18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(arg18_option, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(arg18_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel10Layout.createSequentialGroup()
                                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel42)
                                        .addComponent(jLabel43))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel10Layout.createSequentialGroup()
                                            .addComponent(arg16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(arg16_option, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(arg16_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel10Layout.createSequentialGroup()
                                            .addComponent(arg15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(arg15_option, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(arg15_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel10Layout.createSequentialGroup()
                                        .addComponent(jLabel32)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(arg19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(arg19_option, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(arg19_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel10Layout.createSequentialGroup()
                                        .addComponent(jLabel33)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(arg20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(arg20_option, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(arg20_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addContainerGap())
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addComponent(jLabel41)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(arg14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(arg14_option, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(arg14_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel10Layout.createSequentialGroup()
                                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel39)
                                            .addComponent(jLabel38)
                                            .addComponent(jLabel40))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel10Layout.createSequentialGroup()
                                                .addComponent(arg13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(arg13_option, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel10Layout.createSequentialGroup()
                                                .addComponent(arg12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(arg12_option, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel10Layout.createSequentialGroup()
                                                .addComponent(arg11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(arg11_option, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(arg11_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(arg12_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(arg13_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanel10Layout.createSequentialGroup()
                                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel37)
                                            .addComponent(jLabel36))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel10Layout.createSequentialGroup()
                                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(arg10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(arg9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(arg10_option, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel10Layout.createSequentialGroup()
                                                .addGap(26, 26, 26)
                                                .addComponent(arg9_option, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(arg9_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(arg10_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanel10Layout.createSequentialGroup()
                                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel11)
                                            .addComponent(jLabel14)
                                            .addComponent(jLabel1))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(application_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(Break_cli_jButton2)
                                            .addComponent(Locate_Application_jButton1))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(Insert_SampleApplication_jButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(Insert_Sample_Perl_jButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(Insert_Sample_Jar_jButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addGap(14, 14, 14))))))
        );

        jScrollPane6.setViewportView(jPanel10);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jPanel2.add(workflow);
        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setPreferredSize(new java.awt.Dimension(500, 135));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 487, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 113, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        NamejTextField.setForeground(java.awt.Color.lightGray);
        NamejTextField.setText(" Name");
        NamejTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                NamejTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                NamejTextFieldFocusLost(evt);
            }
        });
        NamejTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                NamejTextFieldKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                NamejTextFieldKeyTyped(evt);
            }
        });

        jLabel5.setText("Name");

        jButton4.setText("Rename");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel9.setText("Description");

        jTextField3.setForeground(java.awt.Color.lightGray);
        jTextField3.setText(" Description");
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });
        jTextField3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField3FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField3FocusLost(evt);
            }
        });
        jTextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField3KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField3KeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(NamejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(NamejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel5)
                .addComponent(jButton4)
                .addComponent(jLabel9)
                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, Short.MAX_VALUE))
        );

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("(1) Configuration options");
        jLabel8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel6.setText("OS");

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Windows", "MAC OSX", "Linux" }));
        jComboBox3.setToolTipText("Choose the Operating System (OS) . This will change how the application is executed on the command-line.");

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Verify Exit value");
        jCheckBox1.setToolTipText("By default, Armadillo wait for an exit value to test the completion of a tasks. In some rare cases, this is not required.");

        jTextField2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField2.setText("0");
        jTextField2.setToolTipText("The default exit value for good application completion is 0. ");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("(3) Outputs (files if not an argument)");
        jLabel12.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        output1.setText(" filename");
        output1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                output1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                output1FocusLost(evt);
            }
        });

        OutputType1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Sequence--", "Sequence - Fasta format - Use sequence name", "Sequence - Fasta format - Use internal sequence id", "Sequence - Fasta format - Use abbreviation", "Sequence - Phylip format - Use sequence name", "Sequence - Phylip format - Use internal sequence id", "Sequence - Phylip format - Use abbreviation", "--MultipleSequences--", "MultipleSequences - Fasta format - Use sequence name", "MultipleSequences - Fasta format - Use internal sequence id", "MultipleSequences - Fasta format - Use abbreviation", "MultipleSequences - Phylip format - Use sequence name", "MultipleSequences - Phylip format - Use internal sequence id", "MultipleSequences - Phylip format - Use abbreviation", "--Alignment--", "Alignment - Fasta format - Use sequence name", "Alignment - Fasta format - Use internal sequence id", "Alignment - Fasta format - Use abbreviation", "Alignment - Phylip format - Use sequence name", "Alignment - Phylip format - Use internal sequence id", "Alignment - Phylip format - Use abbreviation", "--Ancestor--", "Ancestor - Fasta format - Use sequence name", "Ancestor - Fasta format - Use internal sequence id", "Ancestor - Fasta format - Use abbreviation", "Ancestor - Phylip format - Use sequence name", "Ancestor - Phylip format - Use internal sequence id", "Ancestor - Phylip format - Use abbreviation", "--Matrix--", "Matrix", "--Tree--", "Tree - Newick format - Use original tree", "Tree - Newick format - Use sequence_id", "Tree - Newick format - Use abbreviation", "--MultipleTrees--", "MultipleTrees - Newick format - Use original tree", "MultipleTrees - Newick format - Use sequence_id", "MultipleTrees - Newick format - Use abbreviation", "--Phylip--", "Phylip", "Phylip_Distance", "Phylip_Seqboot", "--Results--", "Results text", "--Unknown--", "Unknown", "--Text--", "Text", "--File type (this will not load the file into the database)--", "TextFile" }));
        OutputType1.setEnabled(false);
        OutputType1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OutputType1ActionPerformed(evt);
            }
        });

        DeleteOutput1.setText("Delete file after use");

        OutputType2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Sequence--", "Sequence - Fasta format - Use sequence name", "Sequence - Fasta format - Use internal sequence id", "Sequence - Fasta format - Use abbreviation", "Sequence - Phylip format - Use sequence name", "Sequence - Phylip format - Use internal sequence id", "Sequence - Phylip format - Use abbreviation", "--MultipleSequences--", "MultipleSequences - Fasta format - Use sequence name", "MultipleSequences - Fasta format - Use internal sequence id", "MultipleSequences - Fasta format - Use abbreviation", "MultipleSequences - Phylip format - Use sequence name", "MultipleSequences - Phylip format - Use internal sequence id", "MultipleSequences - Phylip format - Use abbreviation", "--Alignment--", "Alignment - Fasta format - Use sequence name", "Alignment - Fasta format - Use internal sequence id", "Alignment - Fasta format - Use abbreviation", "Alignment - Phylip format - Use sequence name", "Alignment - Phylip format - Use internal sequence id", "Alignment - Phylip format - Use abbreviation", "--Ancestor--", "Ancestor - Fasta format - Use sequence name", "Ancestor - Fasta format - Use internal sequence id", "Ancestor - Fasta format - Use abbreviation", "Ancestor - Phylip format - Use sequence name", "Ancestor - Phylip format - Use internal sequence id", "Ancestor - Phylip format - Use abbreviation", "--Matrix--", "Matrix", "--Tree--", "Tree - Newick format - Use original tree", "Tree - Newick format - Use sequence_id", "Tree - Newick format - Use abbreviation", "--MultipleTrees--", "MultipleTrees - Newick format - Use original tree", "MultipleTrees - Newick format - Use sequence_id", "MultipleTrees - Newick format - Use abbreviation", "--Phylip--", "Phylip", "Phylip_Distance", "Phylip_Seqboot", "--Results--", "Results text", "--Unknown--", "Unknown", "--Text--", "Text", "--File type (this will not load the file into the database)--", "TextFile" }));
        OutputType2.setEnabled(false);
        OutputType2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OutputType2ActionPerformed(evt);
            }
        });

        output2.setText(" filename");
        output2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                output2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                output2FocusLost(evt);
            }
        });

        DeleteOutput2.setText("Delete file after use");
        DeleteOutput2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteOutput2ActionPerformed(evt);
            }
        });

        OutputType3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Sequence--", "Sequence - Fasta format - Use sequence name", "Sequence - Fasta format - Use internal sequence id", "Sequence - Fasta format - Use abbreviation", "Sequence - Phylip format - Use sequence name", "Sequence - Phylip format - Use internal sequence id", "Sequence - Phylip format - Use abbreviation", "--MultipleSequences--", "MultipleSequences - Fasta format - Use sequence name", "MultipleSequences - Fasta format - Use internal sequence id", "MultipleSequences - Fasta format - Use abbreviation", "MultipleSequences - Phylip format - Use sequence name", "MultipleSequences - Phylip format - Use internal sequence id", "MultipleSequences - Phylip format - Use abbreviation", "--Alignment--", "Alignment - Fasta format - Use sequence name", "Alignment - Fasta format - Use internal sequence id", "Alignment - Fasta format - Use abbreviation", "Alignment - Phylip format - Use sequence name", "Alignment - Phylip format - Use internal sequence id", "Alignment - Phylip format - Use abbreviation", "--Ancestor--", "Ancestor - Fasta format - Use sequence name", "Ancestor - Fasta format - Use internal sequence id", "Ancestor - Fasta format - Use abbreviation", "Ancestor - Phylip format - Use sequence name", "Ancestor - Phylip format - Use internal sequence id", "Ancestor - Phylip format - Use abbreviation", "--Matrix--", "Matrix", "--Tree--", "Tree - Newick format - Use original tree", "Tree - Newick format - Use sequence_id", "Tree - Newick format - Use abbreviation", "--MultipleTrees--", "MultipleTrees - Newick format - Use original tree", "MultipleTrees - Newick format - Use sequence_id", "MultipleTrees - Newick format - Use abbreviation", "--Phylip--", "Phylip", "Phylip_Distance", "Phylip_Seqboot", "--Results--", "Results text", "--Unknown--", "Unknown", "--Text--", "Text", "--File type (this will not load the file into the database)--", "TextFile" }));
        OutputType3.setEnabled(false);
        OutputType3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OutputType3ActionPerformed(evt);
            }
        });

        output3.setText(" filename");
        output3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                output3FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                output3FocusLost(evt);
            }
        });

        DeleteOutput3.setText("Delete file after use");

        OutputType4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Sequence--", "Sequence - Fasta format - Use sequence name", "Sequence - Fasta format - Use internal sequence id", "Sequence - Fasta format - Use abbreviation", "Sequence - Phylip format - Use sequence name", "Sequence - Phylip format - Use internal sequence id", "Sequence - Phylip format - Use abbreviation", "--MultipleSequences--", "MultipleSequences - Fasta format - Use sequence name", "MultipleSequences - Fasta format - Use internal sequence id", "MultipleSequences - Fasta format - Use abbreviation", "MultipleSequences - Phylip format - Use sequence name", "MultipleSequences - Phylip format - Use internal sequence id", "MultipleSequences - Phylip format - Use abbreviation", "--Alignment--", "Alignment - Fasta format - Use sequence name", "Alignment - Fasta format - Use internal sequence id", "Alignment - Fasta format - Use abbreviation", "Alignment - Phylip format - Use sequence name", "Alignment - Phylip format - Use internal sequence id", "Alignment - Phylip format - Use abbreviation", "--Ancestor--", "Ancestor - Fasta format - Use sequence name", "Ancestor - Fasta format - Use internal sequence id", "Ancestor - Fasta format - Use abbreviation", "Ancestor - Phylip format - Use sequence name", "Ancestor - Phylip format - Use internal sequence id", "Ancestor - Phylip format - Use abbreviation", "--Matrix--", "Matrix", "--Tree--", "Tree - Newick format - Use original tree", "Tree - Newick format - Use sequence_id", "Tree - Newick format - Use abbreviation", "--MultipleTrees--", "MultipleTrees - Newick format - Use original tree", "MultipleTrees - Newick format - Use sequence_id", "MultipleTrees - Newick format - Use abbreviation", "--Phylip--", "Phylip", "Phylip_Distance", "Phylip_Seqboot", "--Results--", "Results text", "--Unknown--", "Unknown", "--Text--", "Text", "--File type (this will not load the file into the database)--", "TextFile" }));
        OutputType4.setEnabled(false);
        OutputType4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OutputType4ActionPerformed(evt);
            }
        });

        output4.setText(" filename");
        output4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                output4FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                output4FocusLost(evt);
            }
        });

        DeleteOutput4.setText("Delete file after use");

        OutputType5.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Sequence--", "Sequence - Fasta format - Use sequence name", "Sequence - Fasta format - Use internal sequence id", "Sequence - Fasta format - Use abbreviation", "Sequence - Phylip format - Use sequence name", "Sequence - Phylip format - Use internal sequence id", "Sequence - Phylip format - Use abbreviation", "--MultipleSequences--", "MultipleSequences - Fasta format - Use sequence name", "MultipleSequences - Fasta format - Use internal sequence id", "MultipleSequences - Fasta format - Use abbreviation", "MultipleSequences - Phylip format - Use sequence name", "MultipleSequences - Phylip format - Use internal sequence id", "MultipleSequences - Phylip format - Use abbreviation", "--Alignment--", "Alignment - Fasta format - Use sequence name", "Alignment - Fasta format - Use internal sequence id", "Alignment - Fasta format - Use abbreviation", "Alignment - Phylip format - Use sequence name", "Alignment - Phylip format - Use internal sequence id", "Alignment - Phylip format - Use abbreviation", "--Ancestor--", "Ancestor - Fasta format - Use sequence name", "Ancestor - Fasta format - Use internal sequence id", "Ancestor - Fasta format - Use abbreviation", "Ancestor - Phylip format - Use sequence name", "Ancestor - Phylip format - Use internal sequence id", "Ancestor - Phylip format - Use abbreviation", "--Matrix--", "Matrix", "--Tree--", "Tree - Newick format - Use original tree", "Tree - Newick format - Use sequence_id", "Tree - Newick format - Use abbreviation", "--MultipleTrees--", "MultipleTrees - Newick format - Use original tree", "MultipleTrees - Newick format - Use sequence_id", "MultipleTrees - Newick format - Use abbreviation", "--Phylip--", "Phylip", "Phylip_Distance", "Phylip_Seqboot", "--Results--", "Results text", "--Unknown--", "Unknown", "--Text--", "Text", "--File type (this will not load the file into the database)--", "TextFile" }));
        OutputType5.setEnabled(false);
        OutputType5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OutputType5ActionPerformed(evt);
            }
        });

        output5.setText(" filename");
        output5.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                output5FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                output5FocusLost(evt);
            }
        });

        DeleteOutput5.setText("Delete file after use");

        OutputType6.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Sequence--", "Sequence - Fasta format - Use sequence name", "Sequence - Fasta format - Use internal sequence id", "Sequence - Fasta format - Use abbreviation", "Sequence - Phylip format - Use sequence name", "Sequence - Phylip format - Use internal sequence id", "Sequence - Phylip format - Use abbreviation", "--MultipleSequences--", "MultipleSequences - Fasta format - Use sequence name", "MultipleSequences - Fasta format - Use internal sequence id", "MultipleSequences - Fasta format - Use abbreviation", "MultipleSequences - Phylip format - Use sequence name", "MultipleSequences - Phylip format - Use internal sequence id", "MultipleSequences - Phylip format - Use abbreviation", "--Alignment--", "Alignment - Fasta format - Use sequence name", "Alignment - Fasta format - Use internal sequence id", "Alignment - Fasta format - Use abbreviation", "Alignment - Phylip format - Use sequence name", "Alignment - Phylip format - Use internal sequence id", "Alignment - Phylip format - Use abbreviation", "--Ancestor--", "Ancestor - Fasta format - Use sequence name", "Ancestor - Fasta format - Use internal sequence id", "Ancestor - Fasta format - Use abbreviation", "Ancestor - Phylip format - Use sequence name", "Ancestor - Phylip format - Use internal sequence id", "Ancestor - Phylip format - Use abbreviation", "--Matrix--", "Matrix", "--Tree--", "Tree - Newick format - Use original tree", "Tree - Newick format - Use sequence_id", "Tree - Newick format - Use abbreviation", "--MultipleTrees--", "MultipleTrees - Newick format - Use original tree", "MultipleTrees - Newick format - Use sequence_id", "MultipleTrees - Newick format - Use abbreviation", "--Phylip--", "Phylip", "Phylip_Distance", "Phylip_Seqboot", "--Results--", "Results text", "--Unknown--", "Unknown", "--Text--", "Text", "--File type (this will not load the file into the database)--", "TextFile" }));
        OutputType6.setEnabled(false);
        OutputType6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OutputType6ActionPerformed(evt);
            }
        });

        output6.setText(" filename");
        output6.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                output6FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                output6FocusLost(evt);
            }
        });

        DeleteOutput6.setText("Delete file after use");

        OutputType7.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Sequence--", "Sequence - Fasta format - Use sequence name", "Sequence - Fasta format - Use internal sequence id", "Sequence - Fasta format - Use abbreviation", "Sequence - Phylip format - Use sequence name", "Sequence - Phylip format - Use internal sequence id", "Sequence - Phylip format - Use abbreviation", "--MultipleSequences--", "MultipleSequences - Fasta format - Use sequence name", "MultipleSequences - Fasta format - Use internal sequence id", "MultipleSequences - Fasta format - Use abbreviation", "MultipleSequences - Phylip format - Use sequence name", "MultipleSequences - Phylip format - Use internal sequence id", "MultipleSequences - Phylip format - Use abbreviation", "--Alignment--", "Alignment - Fasta format - Use sequence name", "Alignment - Fasta format - Use internal sequence id", "Alignment - Fasta format - Use abbreviation", "Alignment - Phylip format - Use sequence name", "Alignment - Phylip format - Use internal sequence id", "Alignment - Phylip format - Use abbreviation", "--Ancestor--", "Ancestor - Fasta format - Use sequence name", "Ancestor - Fasta format - Use internal sequence id", "Ancestor - Fasta format - Use abbreviation", "Ancestor - Phylip format - Use sequence name", "Ancestor - Phylip format - Use internal sequence id", "Ancestor - Phylip format - Use abbreviation", "--Matrix--", "Matrix", "--Tree--", "Tree - Newick format - Use original tree", "Tree - Newick format - Use sequence_id", "Tree - Newick format - Use abbreviation", "--MultipleTrees--", "MultipleTrees - Newick format - Use original tree", "MultipleTrees - Newick format - Use sequence_id", "MultipleTrees - Newick format - Use abbreviation", "--Phylip--", "Phylip", "Phylip_Distance", "Phylip_Seqboot", "--Results--", "Results text", "--Unknown--", "Unknown", "--Text--", "Text", "--File type (this will not load the file into the database)--", "TextFile" }));
        OutputType7.setEnabled(false);
        OutputType7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OutputType7ActionPerformed(evt);
            }
        });

        output7.setText(" filename");
        output7.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                output7FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                output7FocusLost(evt);
            }
        });

        DeleteOutput7.setText("Delete file after use");

        OutputType8.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Sequence--", "Sequence - Fasta format - Use sequence name", "Sequence - Fasta format - Use internal sequence id", "Sequence - Fasta format - Use abbreviation", "Sequence - Phylip format - Use sequence name", "Sequence - Phylip format - Use internal sequence id", "Sequence - Phylip format - Use abbreviation", "--MultipleSequences--", "MultipleSequences - Fasta format - Use sequence name", "MultipleSequences - Fasta format - Use internal sequence id", "MultipleSequences - Fasta format - Use abbreviation", "MultipleSequences - Phylip format - Use sequence name", "MultipleSequences - Phylip format - Use internal sequence id", "MultipleSequences - Phylip format - Use abbreviation", "--Alignment--", "Alignment - Fasta format - Use sequence name", "Alignment - Fasta format - Use internal sequence id", "Alignment - Fasta format - Use abbreviation", "Alignment - Phylip format - Use sequence name", "Alignment - Phylip format - Use internal sequence id", "Alignment - Phylip format - Use abbreviation", "--Ancestor--", "Ancestor - Fasta format - Use sequence name", "Ancestor - Fasta format - Use internal sequence id", "Ancestor - Fasta format - Use abbreviation", "Ancestor - Phylip format - Use sequence name", "Ancestor - Phylip format - Use internal sequence id", "Ancestor - Phylip format - Use abbreviation", "--Matrix--", "Matrix", "--Tree--", "Tree - Newick format - Use original tree", "Tree - Newick format - Use sequence_id", "Tree - Newick format - Use abbreviation", "--MultipleTrees--", "MultipleTrees - Newick format - Use original tree", "MultipleTrees - Newick format - Use sequence_id", "MultipleTrees - Newick format - Use abbreviation", "--Phylip--", "Phylip", "Phylip_Distance", "Phylip_Seqboot", "--Results--", "Results text", "--Unknown--", "Unknown", "--Text--", "Text", "--File type (this will not load the file into the database)--", "TextFile" }));
        OutputType8.setEnabled(false);
        OutputType8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OutputType8ActionPerformed(evt);
            }
        });

        output8.setText(" filename");
        output8.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                output8FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                output8FocusLost(evt);
            }
        });

        DeleteOutput8.setText("Delete file after use");

        OutputType9.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Sequence--", "Sequence - Fasta format - Use sequence name", "Sequence - Fasta format - Use internal sequence id", "Sequence - Fasta format - Use abbreviation", "Sequence - Phylip format - Use sequence name", "Sequence - Phylip format - Use internal sequence id", "Sequence - Phylip format - Use abbreviation", "--MultipleSequences--", "MultipleSequences - Fasta format - Use sequence name", "MultipleSequences - Fasta format - Use internal sequence id", "MultipleSequences - Fasta format - Use abbreviation", "MultipleSequences - Phylip format - Use sequence name", "MultipleSequences - Phylip format - Use internal sequence id", "MultipleSequences - Phylip format - Use abbreviation", "--Alignment--", "Alignment - Fasta format - Use sequence name", "Alignment - Fasta format - Use internal sequence id", "Alignment - Fasta format - Use abbreviation", "Alignment - Phylip format - Use sequence name", "Alignment - Phylip format - Use internal sequence id", "Alignment - Phylip format - Use abbreviation", "--Ancestor--", "Ancestor - Fasta format - Use sequence name", "Ancestor - Fasta format - Use internal sequence id", "Ancestor - Fasta format - Use abbreviation", "Ancestor - Phylip format - Use sequence name", "Ancestor - Phylip format - Use internal sequence id", "Ancestor - Phylip format - Use abbreviation", "--Matrix--", "Matrix", "--Tree--", "Tree - Newick format - Use original tree", "Tree - Newick format - Use sequence_id", "Tree - Newick format - Use abbreviation", "--MultipleTrees--", "MultipleTrees - Newick format - Use original tree", "MultipleTrees - Newick format - Use sequence_id", "MultipleTrees - Newick format - Use abbreviation", "--Phylip--", "Phylip", "Phylip_Distance", "Phylip_Seqboot", "--Results--", "Results text", "--Unknown--", "Unknown", "--Text--", "Text", "--File type (this will not load the file into the database)--", "TextFile" }));
        OutputType9.setEnabled(false);
        OutputType9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OutputType9ActionPerformed(evt);
            }
        });

        output9.setText(" filename");
        output9.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                output9FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                output9FocusLost(evt);
            }
        });

        DeleteOutput9.setText("Delete file after use");

        OutputType10.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Sequence--", "Sequence - Fasta format - Use sequence name", "Sequence - Fasta format - Use internal sequence id", "Sequence - Fasta format - Use abbreviation", "Sequence - Phylip format - Use sequence name", "Sequence - Phylip format - Use internal sequence id", "Sequence - Phylip format - Use abbreviation", "--MultipleSequences--", "MultipleSequences - Fasta format - Use sequence name", "MultipleSequences - Fasta format - Use internal sequence id", "MultipleSequences - Fasta format - Use abbreviation", "MultipleSequences - Phylip format - Use sequence name", "MultipleSequences - Phylip format - Use internal sequence id", "MultipleSequences - Phylip format - Use abbreviation", "--Alignment--", "Alignment - Fasta format - Use sequence name", "Alignment - Fasta format - Use internal sequence id", "Alignment - Fasta format - Use abbreviation", "Alignment - Phylip format - Use sequence name", "Alignment - Phylip format - Use internal sequence id", "Alignment - Phylip format - Use abbreviation", "--Ancestor--", "Ancestor - Fasta format - Use sequence name", "Ancestor - Fasta format - Use internal sequence id", "Ancestor - Fasta format - Use abbreviation", "Ancestor - Phylip format - Use sequence name", "Ancestor - Phylip format - Use internal sequence id", "Ancestor - Phylip format - Use abbreviation", "--Matrix--", "Matrix", "--Tree--", "Tree - Newick format - Use original tree", "Tree - Newick format - Use sequence_id", "Tree - Newick format - Use abbreviation", "--MultipleTrees--", "MultipleTrees - Newick format - Use original tree", "MultipleTrees - Newick format - Use sequence_id", "MultipleTrees - Newick format - Use abbreviation", "--Phylip--", "Phylip", "Phylip_Distance", "Phylip_Seqboot", "--Results--", "Results text", "--Unknown--", "Unknown", "--Text--", "Text", "--File type (this will not load the file into the database)--", "TextFile" }));
        OutputType10.setEnabled(false);
        OutputType10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OutputType10ActionPerformed(evt);
            }
        });

        output10.setText(" filename");
        output10.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                output10FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                output10FocusLost(evt);
            }
        });

        DeleteOutput10.setText("Delete file after use");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(OutputType9, javax.swing.GroupLayout.Alignment.TRAILING, 0, 369, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(output9, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DeleteOutput9, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(OutputType8, javax.swing.GroupLayout.Alignment.TRAILING, 0, 369, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(output8, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DeleteOutput8, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(OutputType1, javax.swing.GroupLayout.Alignment.TRAILING, 0, 369, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(output1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DeleteOutput1, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE))
                            .addComponent(OutputType2, javax.swing.GroupLayout.Alignment.TRAILING, 0, 369, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(output2, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DeleteOutput2, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(OutputType3, javax.swing.GroupLayout.Alignment.TRAILING, 0, 372, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(output3, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DeleteOutput3, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)))
                        .addGap(14, 14, 14))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(OutputType4, javax.swing.GroupLayout.Alignment.TRAILING, 0, 372, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(output4, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DeleteOutput4, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)))
                        .addGap(14, 14, 14))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(OutputType5, javax.swing.GroupLayout.Alignment.TRAILING, 0, 372, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(output5, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DeleteOutput5, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)))
                        .addGap(14, 14, 14))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(OutputType6, javax.swing.GroupLayout.Alignment.TRAILING, 0, 372, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(output6, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DeleteOutput6, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)))
                        .addGap(14, 14, 14))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(OutputType7, javax.swing.GroupLayout.Alignment.TRAILING, 0, 372, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(output7, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DeleteOutput7, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)))
                        .addGap(14, 14, 14))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(OutputType10, javax.swing.GroupLayout.Alignment.TRAILING, 0, 369, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(output10, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DeleteOutput10, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(output1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DeleteOutput1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OutputType1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(output2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DeleteOutput2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OutputType2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(output3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DeleteOutput3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OutputType3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(output4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DeleteOutput4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OutputType4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(output5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DeleteOutput5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OutputType5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(output6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DeleteOutput6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OutputType6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(output7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DeleteOutput7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OutputType7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(output8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DeleteOutput8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OutputType8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(output9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DeleteOutput9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OutputType9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(output10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DeleteOutput10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OutputType10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel1);

        jButton3.setText("?");
        jButton3.setToolTipText("Help / Informations");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Custom application editor");
        jLabel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jButton9.setText("Stop");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton5.setText("Run");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        ClosejButton.setText("<html><b>Close</b></htm>");
        ClosejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClosejButtonActionPerformed(evt);
            }
        });

        jButton6.setText("Reset default values");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addComponent(jButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 510, Short.MAX_VALUE)
                .addComponent(jButton9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ClosejButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(ClosejButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jButton5)
                .addComponent(jButton9)
                .addComponent(jButton6))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 816, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 934, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBox1)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ClosejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClosejButtonActionPerformed
       close();
}//GEN-LAST:event_ClosejButtonActionPerformed

    /**
     * Set the properties of the Connector if found
     * @param evt
     */
    private void NamejTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NamejTextFieldKeyTyped
        String name=this.NamejTextField.getText();
        properties.put("Name", name.trim());
        workflow.updateWorkflow(properties);
}//GEN-LAST:event_NamejTextFieldKeyTyped

    private void NamejTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NamejTextFieldKeyPressed
        
    }//GEN-LAST:event_NamejTextFieldKeyPressed

    private void NamejTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_NamejTextFieldFocusLost
        if (NamejTextField.getText().trim().equals("")) {
            this.NamejTextField.setText(defaultNameString);
            this.NamejTextField.setForeground(Color.LIGHT_GRAY);
        } else {
            String name=this.NamejTextField.getText();
            properties.put("Name", name.trim());
            workflow.updateWorkflow(properties);
        }
}//GEN-LAST:event_NamejTextFieldFocusLost

    private void NamejTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_NamejTextFieldFocusGained
        if (NamejTextField.getText().equals(defaultNameString)) {
            NamejTextField.setText("");
            NamejTextField.setForeground(Color.BLACK);
        } // TODO add your handling code here:
}//GEN-LAST:event_NamejTextFieldFocusGained

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        properties.put("Name", this.NamejTextField.getText());
        parent_workflow.updateCurrentWorkflow(properties);
}//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        this.updateProperties();
        if(properties.isSet("ClassName")) {
            this.parent_workflow.workflow.updateDependance();
            programs prog=new programs(parent_workflow.workbox.getCurrentWorkflows());
            prog.Run(properties);
        }
}//GEN-LAST:event_jButton5ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        this.updateProperties();
        properties.put("Status", Config.status_nothing);
        properties.killThread();
}//GEN-LAST:event_jButton9ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jTextField3ActionPerformed

    private void jTextField3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField3FocusGained
        if (jTextField2.getText().equals("Description (tooltip)")) {
            jTextField2.setText("");
            jTextField2.setForeground(Color.BLACK);
        } // TODO add your handling code here:
}//GEN-LAST:event_jTextField3FocusGained

    private void jTextField3FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField3FocusLost
        if (jTextField2.getText().trim().equals("")) {
            this.jTextField2.setText("Description (tooltip)");
            this.jTextField2.setForeground(Color.LIGHT_GRAY);
        } else {
            String description=this.jTextField2.getText();
            properties.put("Description", description.trim());
            
        }
}//GEN-LAST:event_jTextField3FocusLost

    private void jTextField3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyPressed
        // TODO add your handling code here:
}//GEN-LAST:event_jTextField3KeyPressed

    private void jTextField3KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyTyped
        String description=this.jTextField2.getText();
        properties.put("Description", description.trim());
    }//GEN-LAST:event_jTextField3KeyTyped

    private void arg1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_arg1FocusLost
       
    }//GEN-LAST:event_arg1FocusLost

    private void arg1_optionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arg1_optionActionPerformed
        int index=this.arg1_option.getSelectedIndex();
        properties.put("input1option", (String)arg1_option.getSelectedItem());
        if (index==0) {
            this.arg1_type.setEnabled(false);
        } else {            
            this.arg1_type.setEnabled(true);
        }
        updateOptions();
    }//GEN-LAST:event_arg1_optionActionPerformed

    private void arg2_optionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arg2_optionActionPerformed
        int index=this.arg2_option.getSelectedIndex();
        properties.put("input2option", (String)arg2_option.getSelectedItem());
        if (index==0) {
            this.arg2_type.setEnabled(false);
        } else {            
            this.arg2_type.setEnabled(true);
        }
        updateOptions();
    }//GEN-LAST:event_arg2_optionActionPerformed

    private void arg3_optionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arg3_optionActionPerformed
        int index=this.arg3_option.getSelectedIndex();
        properties.put("input3option", (String)arg3_option.getSelectedItem());
        if (index==0) {
            this.arg3_type.setEnabled(false);
        } else {            
            this.arg3_type.setEnabled(true);
        }
        updateOptions();
    }//GEN-LAST:event_arg3_optionActionPerformed

    private void arg4_optionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arg4_optionActionPerformed
         int index=this.arg4_option.getSelectedIndex();
         properties.put("input4option", (String)arg4_option.getSelectedItem());
        if (index==0) {
            this.arg4_type.setEnabled(false);
        } else {            
            this.arg4_type.setEnabled(true);
        }
        updateOptions();
    }//GEN-LAST:event_arg4_optionActionPerformed

    private void arg5_optionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arg5_optionActionPerformed
         int index=this.arg5_option.getSelectedIndex();
         properties.put("input5option", (String)arg5_option.getSelectedItem());
        if (index==0) {
            this.arg5_type.setEnabled(false);
        } else {            
            this.arg5_type.setEnabled(true);
        }
        updateOptions();
    }//GEN-LAST:event_arg5_optionActionPerformed

    private void arg6_optionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arg6_optionActionPerformed
         int index=this.arg6_option.getSelectedIndex();
         properties.put("input6option", (String)arg6_option.getSelectedItem());
        if (index==0) {
            this.arg6_type.setEnabled(false);
        } else {            
            this.arg6_type.setEnabled(true);
        }
        updateOptions();
    }//GEN-LAST:event_arg6_optionActionPerformed

    private void arg7_optionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arg7_optionActionPerformed
        int index=this.arg7_option.getSelectedIndex();
        properties.put("input7option", (String)arg7_option.getSelectedItem());
        if (index==0) {
            this.arg7_type.setEnabled(false);
        } else {            
            this.arg7_type.setEnabled(true);
        }
        updateOptions();
    }//GEN-LAST:event_arg7_optionActionPerformed

    private void arg8_optionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arg8_optionActionPerformed
        int index=this.arg8_option.getSelectedIndex();
        properties.put("input8option", (String)arg8_option.getSelectedItem());
        if (index==0) {
            this.arg8_type.setEnabled(false);
        } else {            
            this.arg8_type.setEnabled(true);
        }
        updateOptions();
    }//GEN-LAST:event_arg8_optionActionPerformed

    private void arg9_optionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arg9_optionActionPerformed
         int index=this.arg9_option.getSelectedIndex();
         properties.put("input9option", (String)arg9_option.getSelectedItem());
        if (index==0) {
            this.arg9_type.setEnabled(false);
        } else {            
            this.arg9_type.setEnabled(true);
        }
        updateOptions();
    }//GEN-LAST:event_arg9_optionActionPerformed

    private void arg10_optionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arg10_optionActionPerformed
        int index=this.arg10_option.getSelectedIndex();
        properties.put("input10option", (String)arg10_option.getSelectedItem());
        if (index==0) {
            this.arg10_type.setEnabled(false);
        } else {            
            this.arg10_type.setEnabled(true);
        }
        updateOptions();
    }//GEN-LAST:event_arg10_optionActionPerformed

    private void arg11_optionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arg11_optionActionPerformed
         int index=this.arg11_option.getSelectedIndex();
         properties.put("input11option", (String)arg11_option.getSelectedItem());
        if (index==0) {
            this.arg11_type.setEnabled(false);
        } else {            
            this.arg11_type.setEnabled(true);
        }
        updateOptions();
    }//GEN-LAST:event_arg11_optionActionPerformed

    private void arg12_optionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arg12_optionActionPerformed
         int index=this.arg12_option.getSelectedIndex();
         properties.put("input12option", (String)arg12_option.getSelectedItem());
        if (index==0) {
            this.arg12_type.setEnabled(false);
        } else {            
            this.arg12_type.setEnabled(true);
        }
        updateOptions();
    }//GEN-LAST:event_arg12_optionActionPerformed

    private void arg13_optionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arg13_optionActionPerformed
        int index=this.arg13_option.getSelectedIndex();
        properties.put("input13option", (String)arg13_option.getSelectedItem());
        if (index==0) {
            this.arg13_type.setEnabled(false);
        } else {            
            this.arg13_type.setEnabled(true);
        }
        updateOptions();
    }//GEN-LAST:event_arg13_optionActionPerformed

    private void arg14_optionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arg14_optionActionPerformed
         int index=this.arg14_option.getSelectedIndex();
         properties.put("input14option", (String)arg14_option.getSelectedItem());
        if (index==0) {
            this.arg14_type.setEnabled(false);
        } else {            
            this.arg14_type.setEnabled(true);
        }
        updateOptions();
    }//GEN-LAST:event_arg14_optionActionPerformed

    private void arg15_optionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arg15_optionActionPerformed
         int index=this.arg15_option.getSelectedIndex();
         properties.put("input15option", (String)arg15_option.getSelectedItem());
        if (index==0) {
            this.arg15_type.setEnabled(false);
        } else {            
            this.arg15_type.setEnabled(true);
        }
        updateOptions();
    }//GEN-LAST:event_arg15_optionActionPerformed

    private void arg16_optionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arg16_optionActionPerformed
         int index=this.arg16_option.getSelectedIndex();
         properties.put("input16option", (String)arg16_option.getSelectedItem());
        if (index==0) {
            this.arg16_type.setEnabled(false);
        } else {            
            this.arg16_type.setEnabled(true);
        }
        updateOptions();
    }//GEN-LAST:event_arg16_optionActionPerformed

    private void arg17_optionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arg17_optionActionPerformed
        int index=this.arg17_option.getSelectedIndex();
        properties.put("input17option", (String)arg17_option.getSelectedItem());
        if (index==0) {
            this.arg17_type.setEnabled(false);
        } else {            
            this.arg17_type.setEnabled(true);
        }
        updateOptions();
    }//GEN-LAST:event_arg17_optionActionPerformed

    private void arg18_optionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arg18_optionActionPerformed
         int index=this.arg18_option.getSelectedIndex();
         properties.put("input18option", (String)arg18_option.getSelectedItem());
        if (index==0) {
            this.arg18_type.setEnabled(false);
        } else {            
            this.arg18_type.setEnabled(true);
        }
        updateOptions();
    }//GEN-LAST:event_arg18_optionActionPerformed

    private void arg19_optionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arg19_optionActionPerformed
      int index=this.arg19_option.getSelectedIndex();
      properties.put("input19option", (String)arg19_option.getSelectedItem());
        if (index==0) {
            this.arg19_type.setEnabled(false);
        } else {            
            this.arg19_type.setEnabled(true);
        }
        updateOptions();
    }//GEN-LAST:event_arg19_optionActionPerformed

    private void arg20_optionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arg20_optionActionPerformed
        int index=this.arg20_option.getSelectedIndex();
        properties.put("input20option", (String)arg20_option.getSelectedItem());
        if (index==0) {
            this.arg20_type.setEnabled(false);
        } else {            
            this.arg20_type.setEnabled(true);
        }
        updateOptions();
    }//GEN-LAST:event_arg20_optionActionPerformed

    private void Locate_Application_jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Locate_Application_jButton1ActionPerformed
         JFileChooser jf=new JFileChooser("executable"+File.separator);
        jf.addChoosableFileFilter(new ProgramsFilter());
        jf.setAcceptAllFileFilterUsed(false);
        jf.setName("Locate program Executable ...");
        int result=jf.showOpenDialog(this);
        if (result==JFileChooser.APPROVE_OPTION) {
            String filename=jf.getSelectedFile().getName();
            String path=jf.getSelectedFile().getAbsolutePath();           
            //runprogram.setPath(path);
            properties.setExecutable(path);
            this.application_name.setText(path);           
        }
    }//GEN-LAST:event_Locate_Application_jButton1ActionPerformed

    private void Break_cli_jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Break_cli_jButton2ActionPerformed
      break_cli();
    }//GEN-LAST:event_Break_cli_jButton2ActionPerformed

    private void Insert_SampleApplication_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Insert_SampleApplication_jButtonActionPerformed
      this.application_name.setText("executable\\hgt.exe -inputfile=input.txt");      
      break_cli();      
      //--Add type for input ouput
      properties.put("execute1", "input.txt");
      properties.put("input1type","Tree - Newick format - Use original tree");
      properties.put("input1port","Option=File (Both input ports)");
      properties.put("output1name","");
      properties.put("output1type", "");
      properties.put("output1delete", true);
    }//GEN-LAST:event_Insert_SampleApplication_jButtonActionPerformed

    private void output1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_output1FocusLost
        if (output1.getText().trim().equals("")) {
            this.output1.setText(defaultFilenameString);
            this.output1.setForeground(Color.LIGHT_GRAY);
            this.DeleteOutput1.setEnabled(false);
            this.OutputType1.setEnabled(false);
        } else {
            String name=this.output1.getText();
            properties.put("output1", name.trim());   
            this.DeleteOutput1.setEnabled(true);
            this.OutputType1.setEnabled(true);
        }
    }//GEN-LAST:event_output1FocusLost

    private void output1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_output1FocusGained
        if (output1.getText().equals(defaultFilenameString)) {
            output1.setText("");
            output1.setForeground(Color.BLACK);
        } // TODO add your handling code here:
    }//GEN-LAST:event_output1FocusGained

    private void output3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_output3FocusGained
          if (output3.getText().equals(defaultFilenameString)) {
            output3.setText("");
            output3.setForeground(Color.BLACK);
        } 
    }//GEN-LAST:event_output3FocusGained

    private void output3FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_output3FocusLost
        if (output3.getText().trim().equals("")) {
            this.output3.setText(defaultFilenameString);
            this.output3.setForeground(Color.LIGHT_GRAY);
             this.DeleteOutput3.setEnabled(false);
            this.OutputType3.setEnabled(false);
        } else {
            String name=this.output3.getText();
            properties.put("output3", name.trim()); 
            this.DeleteOutput3.setEnabled(true);
            this.OutputType3.setEnabled(true);
        }
    }//GEN-LAST:event_output3FocusLost

    private void output4FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_output4FocusGained
         if (output4.getText().equals(defaultFilenameString)) {
            output4.setText("");
            output4.setForeground(Color.BLACK);
        } 
    }//GEN-LAST:event_output4FocusGained

    private void output4FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_output4FocusLost
          if (output4.getText().trim().equals("")) {
            this.output4.setText(defaultFilenameString);
            this.output4.setForeground(Color.LIGHT_GRAY);
            this.DeleteOutput4.setEnabled(false);
            this.OutputType4.setEnabled(false);
        } else {
            String name=this.output4.getText();
            properties.put("output4", name.trim()); 
            this.DeleteOutput4.setEnabled(true);
            this.OutputType4.setEnabled(true);
        }
    }//GEN-LAST:event_output4FocusLost

    private void output5FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_output5FocusGained
        if (output5.getText().equals(defaultFilenameString)) {
            output5.setText("");
            output5.setForeground(Color.BLACK);
        } 
    }//GEN-LAST:event_output5FocusGained

    private void output5FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_output5FocusLost
        if (output5.getText().trim().equals("")) {
            this.output5.setText(defaultFilenameString);
            this.output5.setForeground(Color.LIGHT_GRAY);
             this.DeleteOutput5.setEnabled(false);
            this.OutputType5.setEnabled(false);
        } else {
            String name=this.output5.getText();
            properties.put("output5", name.trim()); 
            this.DeleteOutput5.setEnabled(true);
            this.OutputType5.setEnabled(true);
        }
    }//GEN-LAST:event_output5FocusLost
     
    private void output6FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_output6FocusGained
        if (output6.getText().equals(defaultFilenameString)) {
            output6.setText("");
            output6.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_output6FocusGained

    private void output6FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_output6FocusLost
       if (output6.getText().trim().equals("")) {
            this.output6.setText(defaultFilenameString);
            this.output6.setForeground(Color.LIGHT_GRAY);
             this.DeleteOutput6.setEnabled(false);
            this.OutputType6.setEnabled(false);
        } else {
            String name=this.output6.getText();
            properties.put("output6", name.trim()); 
            this.DeleteOutput6.setEnabled(true);
            this.OutputType6.setEnabled(true);
        }
    }//GEN-LAST:event_output6FocusLost
    
    private void output7FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_output7FocusGained
       if (output7.getText().equals(defaultFilenameString)) {
            output7.setText("");
            output7.setForeground(Color.BLACK);
        } 
    }//GEN-LAST:event_output7FocusGained

    private void output7FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_output7FocusLost
          if (output7.getText().trim().equals("")) {
            this.output7.setText(defaultFilenameString);
            this.output7.setForeground(Color.LIGHT_GRAY);
             this.DeleteOutput7.setEnabled(false);
            this.OutputType7.setEnabled(false);
        } else {
            String name=this.output7.getText();
            properties.put("output7", name.trim());
            this.DeleteOutput7.setEnabled(true);
            this.OutputType7.setEnabled(true);
        }
    }//GEN-LAST:event_output7FocusLost
 
    private void output8FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_output8FocusGained
         if (output8.getText().equals(defaultFilenameString)) {
            output8.setText("");
            output8.setForeground(Color.BLACK);
        } 
    }//GEN-LAST:event_output8FocusGained

    private void output8FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_output8FocusLost
      if (output8.getText().trim().equals("")) {
            this.output8.setText(defaultFilenameString);
            this.output8.setForeground(Color.LIGHT_GRAY);
             this.DeleteOutput8.setEnabled(false);
            this.OutputType8.setEnabled(false);
        } else {
            String name=this.output8.getText();
            properties.put("output8", name.trim()); 
            this.DeleteOutput8.setEnabled(true);
            this.OutputType8.setEnabled(true);
        }
    }//GEN-LAST:event_output8FocusLost

    
    private void output9FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_output9FocusGained
       if (output9.getText().equals(defaultFilenameString)) {
            output9.setText("");
            output9.setForeground(Color.BLACK);
        } 
    }//GEN-LAST:event_output9FocusGained

    private void output9FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_output9FocusLost
        if (output9.getText().trim().equals("")) {
            this.output9.setText(defaultFilenameString);
            this.output9.setForeground(Color.LIGHT_GRAY);
             this.DeleteOutput9.setEnabled(false);
            this.OutputType9.setEnabled(false);
        } else {
            String name=this.output9.getText();
            properties.put("output9", name.trim()); 
            this.DeleteOutput9.setEnabled(true);
            this.OutputType9.setEnabled(true);
        }
    }//GEN-LAST:event_output9FocusLost

      
    
    private void output10FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_output10FocusGained
       
         if (output10.getText().equals(defaultFilenameString)) {
            output10.setText("");
            output10.setForeground(Color.BLACK);
        } 
    }//GEN-LAST:event_output10FocusGained

    private void output10FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_output10FocusLost
       
        if (output10.getText().trim().equals("")) {
            this.output10.setText(defaultFilenameString);
            this.output10.setForeground(Color.LIGHT_GRAY);
             this.DeleteOutput10.setEnabled(false);
            this.OutputType10.setEnabled(false);
        } else {
            String name=this.output10.getText();
            properties.put("output10", name.trim());   
            this.DeleteOutput10.setEnabled(true);
            this.OutputType10.setEnabled(true);
        }
    }//GEN-LAST:event_output10FocusLost

       
    private void output2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_output2FocusGained
       
        if (output2.getText().equals(defaultFilenameString)) {
            output2.setText("");
            output2.setForeground(Color.BLACK);
        }     
    }//GEN-LAST:event_output2FocusGained

    private void output2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_output2FocusLost
           if (output2.getText().trim().equals("")) {
            this.output2.setText(defaultFilenameString);
            this.output2.setForeground(Color.LIGHT_GRAY);
             this.DeleteOutput2.setEnabled(false);
            this.OutputType2.setEnabled(false);
        } else {
            String name=this.output2.getText();
            properties.put("output2", name.trim());     
            this.DeleteOutput2.setEnabled(true);
            this.OutputType2.setEnabled(true);
        }
    }//GEN-LAST:event_output2FocusLost

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
       HelpEditor help = new HelpEditor(this.frame, false, properties);
        help.setVisible(true);
}//GEN-LAST:event_jButton3ActionPerformed

    private void arg1_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arg1_typeActionPerformed
       updateOptions();
    }//GEN-LAST:event_arg1_typeActionPerformed

    private void arg2_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arg2_typeActionPerformed
        updateOptions();
    }//GEN-LAST:event_arg2_typeActionPerformed

    private void arg3_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arg3_typeActionPerformed
        updateOptions();
    }//GEN-LAST:event_arg3_typeActionPerformed

    private void arg4_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arg4_typeActionPerformed
        updateOptions();
    }//GEN-LAST:event_arg4_typeActionPerformed

    private void arg5_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arg5_typeActionPerformed
       updateOptions();
    }//GEN-LAST:event_arg5_typeActionPerformed

    private void arg6_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arg6_typeActionPerformed
        updateOptions();
    }//GEN-LAST:event_arg6_typeActionPerformed

    private void arg7_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arg7_typeActionPerformed
       updateOptions();
    }//GEN-LAST:event_arg7_typeActionPerformed

    private void arg8_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arg8_typeActionPerformed
        updateOptions();
    }//GEN-LAST:event_arg8_typeActionPerformed

    private void arg9_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arg9_typeActionPerformed
        updateOptions();
    }//GEN-LAST:event_arg9_typeActionPerformed

    private void arg10_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arg10_typeActionPerformed
        updateOptions();
    }//GEN-LAST:event_arg10_typeActionPerformed

    private void arg11_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arg11_typeActionPerformed
        updateOptions();
    }//GEN-LAST:event_arg11_typeActionPerformed

    private void arg12_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arg12_typeActionPerformed
        updateOptions();
    }//GEN-LAST:event_arg12_typeActionPerformed

    private void arg13_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arg13_typeActionPerformed
        updateOptions();
    }//GEN-LAST:event_arg13_typeActionPerformed

    private void arg14_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arg14_typeActionPerformed
       updateOptions();
    }//GEN-LAST:event_arg14_typeActionPerformed

    private void arg15_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arg15_typeActionPerformed
        updateOptions();
    }//GEN-LAST:event_arg15_typeActionPerformed

    private void arg16_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arg16_typeActionPerformed
        updateOptions();
    }//GEN-LAST:event_arg16_typeActionPerformed

    private void arg17_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arg17_typeActionPerformed
        updateOptions();
    }//GEN-LAST:event_arg17_typeActionPerformed

    private void arg18_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arg18_typeActionPerformed
        updateOptions();
    }//GEN-LAST:event_arg18_typeActionPerformed

    private void arg19_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arg19_typeActionPerformed
        updateOptions();
    }//GEN-LAST:event_arg19_typeActionPerformed

    private void arg20_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arg20_typeActionPerformed
       updateOptions();
    }//GEN-LAST:event_arg20_typeActionPerformed

    private void DeleteOutput2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteOutput2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DeleteOutput2ActionPerformed

    private void OutputType1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OutputType1ActionPerformed
        updateOptions();
    }//GEN-LAST:event_OutputType1ActionPerformed

    private void OutputType2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OutputType2ActionPerformed
       updateOptions();
    }//GEN-LAST:event_OutputType2ActionPerformed

    private void OutputType3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OutputType3ActionPerformed
        updateOptions();
    }//GEN-LAST:event_OutputType3ActionPerformed

    private void OutputType4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OutputType4ActionPerformed
        updateOptions();
    }//GEN-LAST:event_OutputType4ActionPerformed

    private void OutputType5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OutputType5ActionPerformed
       updateOptions();
    }//GEN-LAST:event_OutputType5ActionPerformed

    private void OutputType6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OutputType6ActionPerformed
        updateOptions();
    }//GEN-LAST:event_OutputType6ActionPerformed

    private void OutputType7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OutputType7ActionPerformed
      updateOptions();
    }//GEN-LAST:event_OutputType7ActionPerformed

    private void OutputType8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OutputType8ActionPerformed
       updateOptions();
    }//GEN-LAST:event_OutputType8ActionPerformed

    private void OutputType9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OutputType9ActionPerformed
       updateOptions();
    }//GEN-LAST:event_OutputType9ActionPerformed

    private void OutputType10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OutputType10ActionPerformed
       updateOptions();
    }//GEN-LAST:event_OutputType10ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        properties.load();             //--reload current properties from file
        this.setSettingForProperties();        
        updateOptions();
}//GEN-LAST:event_jButton6ActionPerformed

     /**
     * This update this object properties with the current menu item
     * e.g. before calling close();
     */
    private void updateProperties() {
        
        properties.put("execute0", this.application_name.getText());
        //properties.put("InternalArmadilloApplication", true);
        properties.put("execute1", this.arg1.getText());
        properties.put("execute2", this.arg2.getText());
        properties.put("execute3", this.arg3.getText());
        properties.put("execute4", this.arg4.getText());
        properties.put("execute5", this.arg5.getText());
        properties.put("execute6", this.arg6.getText());
        properties.put("execute7", this.arg7.getText());
        properties.put("execute8", this.arg8.getText()); 
        properties.put("execute9", this.arg9.getText());
        properties.put("execute10", this.arg10.getText());
        properties.put("execute11", this.arg11.getText());
        properties.put("execute12", this.arg12.getText());
        properties.put("execute13", this.arg13.getText());
        properties.put("execute14", this.arg14.getText());
        properties.put("execute15", this.arg15.getText());
        properties.put("execute16", this.arg16.getText()); 
        properties.put("execute17", this.arg17.getText());               
        properties.put("execute18", this.arg18.getText());                              
        properties.put("execute19", this.arg19.getText());                       
        properties.put("execute20", this.arg20.getText());                       
        
        properties.put("input1type", (String)this.arg1_type.getSelectedItem());
        properties.put("input2type", (String)this.arg2_type.getSelectedItem());
        properties.put("input3type", (String)this.arg3_type.getSelectedItem());
        properties.put("input4type", (String)this.arg4_type.getSelectedItem()); 
        properties.put("input5type", (String)this.arg5_type.getSelectedItem());
        properties.put("input6type", (String)this.arg6_type.getSelectedItem());
        properties.put("input7type", (String)this.arg7_type.getSelectedItem());
        properties.put("input8type", (String)this.arg8_type.getSelectedItem());
        properties.put("input9type", (String)this.arg9_type.getSelectedItem());
        properties.put("input10type", (String)this.arg10_type.getSelectedItem());
        properties.put("input11type", (String)this.arg11_type.getSelectedItem());
        properties.put("input12type", (String)this.arg12_type.getSelectedItem());
        properties.put("input13type", (String)this.arg13_type.getSelectedItem());
        properties.put("input14type", (String)this.arg14_type.getSelectedItem());
        properties.put("input15type", (String)this.arg15_type.getSelectedItem()); 
        properties.put("input16type", (String)this.arg16_type.getSelectedItem());
        properties.put("input17type", (String)this.arg17_type.getSelectedItem());
        properties.put("input18type", (String)this.arg18_type.getSelectedItem());
        properties.put("input19type", (String)this.arg19_type.getSelectedItem());
        properties.put("input20type", (String)this.arg20_type.getSelectedItem());
        
        properties.put("input1port", (String)this.arg1_option.getSelectedItem());
        properties.put("input2port", (String)this.arg2_option.getSelectedItem());
        properties.put("input3port", (String)this.arg3_option.getSelectedItem());
        properties.put("input4port", (String)this.arg4_option.getSelectedItem()); 
        properties.put("input5port", (String)this.arg5_option.getSelectedItem());
        properties.put("input6port", (String)this.arg6_option.getSelectedItem());
        properties.put("input7port", (String)this.arg7_option.getSelectedItem());
        properties.put("input8port", (String)this.arg8_option.getSelectedItem());
        properties.put("input9port", (String)this.arg9_option.getSelectedItem());
        properties.put("input10port", (String)this.arg10_option.getSelectedItem());
        properties.put("input11port", (String)this.arg11_option.getSelectedItem());
        properties.put("input12port", (String)this.arg12_option.getSelectedItem());
        properties.put("input13port", (String)this.arg13_option.getSelectedItem());
        properties.put("input14port", (String)this.arg14_option.getSelectedItem());
        properties.put("input15port", (String)this.arg15_option.getSelectedItem()); 
        properties.put("input16port", (String)this.arg16_option.getSelectedItem());
        properties.put("input17port", (String)this.arg17_option.getSelectedItem());
        properties.put("input18port", (String)this.arg18_option.getSelectedItem());
        properties.put("input19port", (String)this.arg19_option.getSelectedItem());
        properties.put("input20port", (String)this.arg20_option.getSelectedItem());
        
        //--Output
       properties.put("output1name", this.output1.getText());
       properties.put("output2name", this.output2.getText());
       properties.put("output3name", this.output3.getText());
       properties.put("output4name", this.output4.getText());
       properties.put("output5name", this.output5.getText());
       properties.put("output6name", this.output6.getText());
       properties.put("output7name", this.output7.getText());
       properties.put("output8name", this.output8.getText());
       properties.put("output9name", this.output9.getText());
       properties.put("output10name", this.output10.getText());
       
       properties.put("output1type", (String)this.OutputType1.getSelectedItem());
       properties.put("output2type", (String)this.OutputType2.getSelectedItem());
       properties.put("output3type", (String)this.OutputType3.getSelectedItem());
       properties.put("output4type", (String)this.OutputType4.getSelectedItem());
       properties.put("output5type", (String)this.OutputType5.getSelectedItem());
       properties.put("output6type", (String)this.OutputType6.getSelectedItem());
       properties.put("output7type", (String)this.OutputType7.getSelectedItem());
       properties.put("output8type", (String)this.OutputType8.getSelectedItem());
       properties.put("output9type", (String)this.OutputType9.getSelectedItem());
       properties.put("output10type", (String)this.OutputType10.getSelectedItem());
       
        if (this.DeleteOutput1.isSelected()) {
           properties.put("output1delete", true);
       } else properties.remove("output1delete");
       if (this.DeleteOutput2.isSelected()) {
           properties.put("output2delete", true);
       } else properties.remove("output2delete");
       if (this.DeleteOutput3.isSelected()) {
           properties.put("output3delete", true);
       } else properties.remove("output3delete");
       if (this.DeleteOutput4.isSelected()) {
           properties.put("output4delete", true);
       } else properties.remove("output4delete");
       if (this.DeleteOutput5.isSelected()) {
           properties.put("output5delete", true);
       } else properties.remove("output5delete");
       if (this.DeleteOutput6.isSelected()) {
           properties.put("output6delete", true);
       } else properties.remove("output6delete");
       if (this.DeleteOutput7.isSelected()) {
           properties.put("output7delete", true);
       } else properties.remove("output7delete");
       if (this.DeleteOutput8.isSelected()) {
           properties.put("output8delete", true);
       } else properties.remove("output8delete");
       if (this.DeleteOutput9.isSelected()) {
           properties.put("output9delete", true);
       } else properties.remove("output9delete");
       if (this.DeleteOutput10.isSelected()) {
           properties.put("output10delete", true);
       } else properties.remove("output10delete");
       
       //--Replace X and Y position in the workflow
        properties.put("x", x) ;
        properties.put("y", y) ;
        
        //--Done
    }
    
    /**
     * This update the workflow with the specific Input/Output options
     */
    private void updateOptions() {
        //--Make sure we have the latest properties
        this.updateProperties();
        boolean reset=false;//--WE need to reset?
        //--Check if we have all default option
         for (int i=1;i<21;i++) {
            String option=properties.get("input"+i+"option");                         
             if (!option.equalsIgnoreCase("Simple option (text)")) reset=true;
         }        
         for (int i=1;i<10;i++) {                 
             String type=properties.get("output"+i+"type").trim();             
             //--Process only if we have a definite type...
             if (!type.startsWith("-")) reset=true;
        } //--End for    

         //--TO DO: Invalidate the current object in workflow since the object attribute migth have changed...
        //--Default output
        if (reset) {
            String[] AcceptedOutput={"OutputText","Results"};
            //--Remove all outputs and input type
            workflow_properties_dictionnary dic=new workflow_properties_dictionnary();
            for (InputOutput type:dic.getInputOutput()) {            
                properties.remove(type.getInputOutput());
            }    
            for (String atype:AcceptedOutput) properties.put("Output"+atype, "Connector0");
            properties.put("nbInput", 0);
        }
        //--Find the output
        //1. Look in the arguments        
        for (int i=1;i<21;i++) {
            String option=properties.get("input"+i+"option");            
             String type=properties.get("input"+i+"type").trim();            
                if (type.indexOf("-")>-1) {
                    type=type.substring(0, type.indexOf("-")).trim();
             }
             if (!option.equalsIgnoreCase("Simple option (text)")) {
            
                //--Screen for the option here
                if (option.equals("File (Up input port)")) {
                    //--Nothing
                    properties.put("Input"+type,"Connector3");
                    properties.put("nbInput", 2);
                } else 
                if (option.equals("File (Down input port)")) {
                    properties.put("Input"+type,"Connector2");
                    if (properties.getInt("nbInput")!=2) properties.put("nbInput", 1);
                } else 
                    if (option.equals("File (Both input ports)")) {
                    properties.put("Input"+type,"True");
                     properties.put("nbInput", 2);
                    
                } else 
                if (option.equals("File (Output port)")) {
                  properties.put("Output"+type,"Connector0");
                } else 
                if (option.equals("Option=File (Up input port)")) {
                    properties.put("Input"+type,"Connector3");                  
                     properties.put("nbInput", 2);
                } else 
                if (option.equals("Option=File (Down input port)")) {
                    properties.put("Input"+type,"Connector2");
                    if (properties.getInt("nbInput")!=2) properties.put("nbInput", 1);
                } else 
                if (option.equals("Option=File (Both input ports)")) {
                    properties.put("Input"+type,"True");
                     properties.put("nbInput", 2);
                } else 
                if (option.equals("Option=File (Output port)")) {
                    properties.put("Output"+type,"Connector0");
                } else     
                if (option.equals("<File (Up input port)")) {
                     properties.put("Input"+type,"Connector3");
                     properties.put("nbInput", 2);
                } else 
                if (option.equals("<File (Down input port)")) {
                    properties.put("Input"+type,"Connector2");
                    if (properties.getInt("nbInput")!=2) properties.put("nbInput", 1);
                } else 
                if (option.equals("<File (Both input ports)")) {
                    properties.put("Input"+type,"True");   
                      properties.put("nbInput", 2);
                } else 
                if (option.equals(">File (Output port)")) {
                     properties.put("Output"+type,"Connector0");
                }   
            }//--End option
        } //--End for
        //--Scan in output
        //1. Look in output        
        for (int i=1;i<10;i++) {                 
             String type=properties.get("output"+i+"type").trim();             
             //--Process only if we have a definite type...
             if (!type.startsWith("-")) {
                if (type.indexOf("-")>-1) {
                    type=type.substring(0, type.indexOf("-")).trim();                    
                }
                properties.put("Output"+type,"Connector0");
             }
             
        } //--End for
        workflow.updateCurrentWorkflow(properties);
        parent_workflow.updateCurrentWorkflow(properties);
    
    }
    
    
    /**
     * This duplicate a properties to a new name
     * @param sourceName
     * @param newName
     * @return True if success
     */
    private boolean duplicateProperties(String sourceName, String newName) {
        workflow_properties tmp=new workflow_properties();
        if (tmp.load(sourceName, config.get("propertiesPath"))) {
            if (tmp.save(newName, config.get("propertiesPath"))) return true;
        }
        //MessageError("Unable to duplicate "+sourceName,"");
        return false;
    }

    /**
     * This delete from disk a properties in the propertiesPath
     * @param propertiesName
     * @return True if success
     */
    private boolean deleteProperties(String propertiesName) {
        File fileToDelete=new File(config.get("propertiesPath")+File.separator+propertiesName);
        if (fileToDelete.delete()) return true;
        //MessageError("Unable to delete "+propertiesName+" from "+config.get("propertiesPath"),"");
        return false;
    }


    
             /**
     * This set the Properties (this is the main calling routine)
     * @param properties
     */
    public void setProperties(String filename, String path) {
        workflow_properties tmp=new workflow_properties();
        tmp.load(filename, path);
        this.properties=tmp;
        setTitle(properties.getName());
        setPropertiesName();
       
        setSettingForProperties();
        workflow.updateWorkflow(tmp);
    }

    private void setPropertiesName() {
        //--Name
        if (properties.getName().equals("Not Set")) {
            this.NamejTextField.setText(defaultNameString);
            this.NamejTextField.setForeground(Color.LIGHT_GRAY);
        } else {
            this.NamejTextField.setText(properties.getName());
            this.NamejTextField.setForeground(Color.BLACK);
            this.setTitle(properties.getName());
        }
        //--Description
//        if (properties.getDescription().equals("Not Set")) {
//            this.jTextArea2.setText(this.defaultDescriptionString);
//            this.jTextArea2.setForeground(Color.LIGHT_GRAY);
//        } else {
//            this.jTextArea2.setText(properties.getDescription());
//            this.jTextArea2.setForeground(Color.BLACK);
//        }
         //--Tooltip   
//        if (properties.getTooltip().equals("Not Set")) {
//            this.jTextField2.setText(this.TooltipDescriptionString);
//            this.jTextField2.setForeground(Color.LIGHT_GRAY);
//        } else {
//            this.jTextField2.setText(properties.getTooltip());
//            this.jTextField2.setForeground(Color.BLACK);
//        }
    }

    void break_cli() {
         String to_split=this.application_name.getText();
       to_split=to_split.trim();
       int count=0;
       String buffer=""; //--buffer to store some state e.g. <, >
       
       
       //--DO not proceed if empty
       if (!to_split.equals("")) {
           //--first try to break by blank...
           String[] str=to_split.split(" ");           
           if (str.length>1) {
            for (String parts:str) {
                    if (!parts.equals("")&&count<21) {                                              
                        if (parts.equals("<")||parts.equals(">")) {
                            buffer=parts;
                        } else {                            
                            properties.put("execute"+count, buffer+parts); 
                            buffer="";
                        }
                        count++;
                    }
                    
                } //--End for parts              
           } //--End str.length > 1           
       } //--End splits
       setSettingForProperties();
    }
   
  
    /**
     * This set the different setting corresponding to the current properties
     */
    public void setSettingForProperties() {
        //--Set Show Hide toggleButton
            
        if (properties.isSet("execute0")) this.application_name.setText(properties.get("execute0"));
        if (properties.isSet("execute1")) this.arg1.setText(properties.get("execute1"));
        if (properties.isSet("execute2")) this.arg2.setText(properties.get("execute2"));
        if (properties.isSet("execute3")) this.arg3.setText(properties.get("execute3"));
        if (properties.isSet("execute4")) this.arg4.setText(properties.get("execute4"));
        if (properties.isSet("execute5")) this.arg5.setText(properties.get("execute5"));
        if (properties.isSet("execute6")) this.arg6.setText(properties.get("execute6"));
        if (properties.isSet("execute7")) this.arg7.setText(properties.get("execute7"));
        if (properties.isSet("execute8")) this.arg8.setText(properties.get("execute8"));
        if (properties.isSet("execute9")) this.arg9.setText(properties.get("execute9"));
        if (properties.isSet("execute10")) this.arg10.setText(properties.get("execute10"));
        if (properties.isSet("execute11")) this.arg11.setText(properties.get("execute11"));
        if (properties.isSet("execute12")) this.arg12.setText(properties.get("execute12"));
        if (properties.isSet("execute13")) this.arg13.setText(properties.get("execute13"));
        if (properties.isSet("execute14")) this.arg14.setText(properties.get("execute14"));
        if (properties.isSet("execute15")) this.arg15.setText(properties.get("execute15"));
        if (properties.isSet("execute16")) this.arg16.setText(properties.get("execute16"));
        if (properties.isSet("execute17")) this.arg17.setText(properties.get("execute17"));
        if (properties.isSet("execute18")) this.arg18.setText(properties.get("execute18"));
        if (properties.isSet("execute19")) this.arg19.setText(properties.get("execute19"));
        if (properties.isSet("execute20")) this.arg20.setText(properties.get("execute20"));
        
        if (properties.isSet("input1type")) this.arg1_type.setSelectedItem(properties.get("input1type"));
        if (properties.isSet("input2type")) this.arg2_type.setSelectedItem(properties.get("input2type"));
        if (properties.isSet("input3type")) this.arg3_type.setSelectedItem(properties.get("input3type"));
        if (properties.isSet("input4type")) this.arg4_type.setSelectedItem(properties.get("input4type"));
        if (properties.isSet("input5type")) this.arg5_type.setSelectedItem(properties.get("input5type"));
        if (properties.isSet("input6type")) this.arg6_type.setSelectedItem(properties.get("input6type"));
        if (properties.isSet("input7type")) this.arg7_type.setSelectedItem(properties.get("input7type"));
        if (properties.isSet("input8type")) this.arg8_type.setSelectedItem(properties.get("input8type"));
        if (properties.isSet("input9type")) this.arg9_type.setSelectedItem(properties.get("input9type"));
        if (properties.isSet("input10type")) this.arg10_type.setSelectedItem(properties.get("input10type"));
        if (properties.isSet("input11type")) this.arg11_type.setSelectedItem(properties.get("input11type"));
        if (properties.isSet("input12type")) this.arg12_type.setSelectedItem(properties.get("input12type"));
        if (properties.isSet("input13type")) this.arg13_type.setSelectedItem(properties.get("input13type"));
        if (properties.isSet("input14type")) this.arg14_type.setSelectedItem(properties.get("input14type"));
        if (properties.isSet("input15type")) this.arg15_type.setSelectedItem(properties.get("input15type"));
        if (properties.isSet("input16type")) this.arg16_type.setSelectedItem(properties.get("input16type"));
        if (properties.isSet("input17type")) this.arg17_type.setSelectedItem(properties.get("input17type"));
        if (properties.isSet("input18type")) this.arg18_type.setSelectedItem(properties.get("input18type"));
        if (properties.isSet("input19type")) this.arg19_type.setSelectedItem(properties.get("input19type"));
        if (properties.isSet("input20type")) this.arg20_type.setSelectedItem(properties.get("input20type"));
        
        if (properties.isSet("input1port")) this.arg1_option.setSelectedItem(properties.get("input1port"));
        if (properties.isSet("input2port")) this.arg2_option.setSelectedItem(properties.get("input2port")); 
        if (properties.isSet("input3port")) this.arg3_option.setSelectedItem(properties.get("input3port")); 
        if (properties.isSet("input4port")) this.arg4_option.setSelectedItem(properties.get("input4port"));
        if (properties.isSet("input5port")) this.arg5_option.setSelectedItem(properties.get("input5port"));
        if (properties.isSet("input6port")) this.arg6_option.setSelectedItem(properties.get("input6port"));
        if (properties.isSet("input7port")) this.arg7_option.setSelectedItem(properties.get("input7port"));
        if (properties.isSet("input8port")) this.arg8_option.setSelectedItem(properties.get("input8port"));
        if (properties.isSet("input9port")) this.arg9_option.setSelectedItem(properties.get("input9port"));
        if (properties.isSet("input10port")) this.arg10_option.setSelectedItem(properties.get("input10port"));
        if (properties.isSet("input11port")) this.arg11_option.setSelectedItem(properties.get("input11port"));
        if (properties.isSet("input12port")) this.arg12_option.setSelectedItem(properties.get("input12port")); 
        if (properties.isSet("input13port")) this.arg13_option.setSelectedItem(properties.get("input13port")); 
        if (properties.isSet("input14port")) this.arg14_option.setSelectedItem(properties.get("input14port"));
        if (properties.isSet("input15port")) this.arg15_option.setSelectedItem(properties.get("input15port"));
        if (properties.isSet("input16port")) this.arg16_option.setSelectedItem(properties.get("input16port"));
        if (properties.isSet("input17port")) this.arg17_option.setSelectedItem(properties.get("input17port"));
        if (properties.isSet("input18port")) this.arg18_option.setSelectedItem(properties.get("input18port"));
        if (properties.isSet("input19port")) this.arg19_option.setSelectedItem(properties.get("input19port"));
        if (properties.isSet("input20port")) this.arg20_option.setSelectedItem(properties.get("input20port"));
        
        //--Output filename
        //--Color default
        this.output1.setForeground(Color.LIGHT_GRAY);
        this.output2.setForeground(Color.LIGHT_GRAY);
        this.output3.setForeground(Color.LIGHT_GRAY);
        this.output4.setForeground(Color.LIGHT_GRAY);
        this.output5.setForeground(Color.LIGHT_GRAY);
        this.output6.setForeground(Color.LIGHT_GRAY);
        this.output7.setForeground(Color.LIGHT_GRAY);
        this.output8.setForeground(Color.LIGHT_GRAY);
        this.output9.setForeground(Color.LIGHT_GRAY);        
        this.output10.setForeground(Color.LIGHT_GRAY);
        
        //--Filename
        if (properties.isSet("output1name")) {
            this.output1.setText(properties.get("output1name"));
            this.output1.setForeground(Color.BLACK);
            this.OutputType1.setEnabled(true);
            this.DeleteOutput1.setEnabled(true);
        } 
        if (properties.isSet("output2name")) {
            this.output2.setText(properties.get("output2name"));
            this.output2.setForeground(Color.BLACK);
            this.OutputType2.setEnabled(true);
            this.DeleteOutput2.setEnabled(true);
        } 
        if (properties.isSet("output3name")) {
            this.output3.setText(properties.get("output3name"));
            this.output3.setForeground(Color.BLACK);
            this.OutputType3.setEnabled(true);
            this.DeleteOutput3.setEnabled(true);
        } 
        if (properties.isSet("output4name")) {
            this.output5.setText(properties.get("output4name"));
            this.output5.setForeground(Color.BLACK);
            this.OutputType5.setEnabled(true);
            this.DeleteOutput5.setEnabled(true);
        } 
        if (properties.isSet("output5name")) {
            this.output5.setText(properties.get("output5name"));
            this.output5.setForeground(Color.BLACK);
            this.OutputType5.setEnabled(true);
            this.DeleteOutput5.setEnabled(true);
        } 
        if (properties.isSet("output6name")) {
            this.output6.setText(properties.get("output6name"));
            this.output6.setForeground(Color.BLACK);            
            this.OutputType6.setEnabled(true);
            this.DeleteOutput6.setEnabled(true);
        } 
        if (properties.isSet("output7name")) {
            this.output7.setText(properties.get("output7name"));
            this.output7.setForeground(Color.BLACK);
            this.DeleteOutput7.setEnabled(true);
            this.OutputType7.setEnabled(true);
        } 
        if (properties.isSet("output8name")) {
            this.output8.setText(properties.get("output8name"));
            this.output8.setForeground(Color.BLACK);
            this.OutputType8.setEnabled(true);
            this.DeleteOutput8.setEnabled(true);
        }
        if (properties.isSet("output9name")) {
            this.output9.setText(properties.get("output9name"));
            this.output9.setForeground(Color.BLACK);
            this.OutputType9.setEnabled(true);
            this.DeleteOutput9.setEnabled(true);
        }
        if (properties.isSet("output10name")) {
            this.output10.setText(properties.get("output10name"));
            this.output10.setForeground(Color.BLACK);
            this.OutputType10.setEnabled(true);
            this.DeleteOutput10.setEnabled(true);
        }
        
        if (properties.isSet("output1type")) this.OutputType1.setSelectedItem(properties.get("output1type"));
        if (properties.isSet("output2type")) this.OutputType2.setSelectedItem(properties.get("output2type"));
        if (properties.isSet("output3type")) this.OutputType3.setSelectedItem(properties.get("output3type"));
        if (properties.isSet("output4type")) this.OutputType4.setSelectedItem(properties.get("output4type"));
        if (properties.isSet("output5type")) this.OutputType5.setSelectedItem(properties.get("output5type"));
        if (properties.isSet("output6type")) this.OutputType6.setSelectedItem(properties.get("output6type"));
        if (properties.isSet("output7type")) this.OutputType7.setSelectedItem(properties.get("output7type"));
        if (properties.isSet("output8type")) this.OutputType7.setSelectedItem(properties.get("output8type"));
        if (properties.isSet("output9type")) this.OutputType7.setSelectedItem(properties.get("output9type"));
        if (properties.isSet("output10type")) this.OutputType7.setSelectedItem(properties.get("output10type"));
              
        
        //--If side or not
//            if (properties.isSet("modeSide")) {
//                this.IfSidejCheckBox.setSelected(true);
//            } else {
//                this.IfSidejCheckBox.setSelected(false);
//            } 
//        //--Color
//            int index=Util.indexOf(properties.get("defaultColor"), workflow_properties_dictionnary.colorMode);
//            if (index>-1) this.ColorModejComboBox.setSelectedIndex(index);
//        //--ObjectType
//            index=Util.indexOf(properties.get("ObjectType"), workflow_properties_dictionnary.ObjectType);
//            if (index>-1) this.ObjectTypejComboBox.setSelectedIndex(index);
        //--InputNb
//            InputNbjComboBox.setSelectedIndex(properties.getInt("nbInput"));
//        //--Class (Running)
//            this.ClassListjComboBox.setSelectedItem(properties.get("ClassName"));
//        //--Editor
//            this.EditorClassNamejComboBox.setSelectedItem(properties.get("EditorClassName"));
//        //--Connector
//            //--Checkbox
//            index=this.ConnectorjComboBox.getSelectedIndex();
//            String keyOutput="Connector"+index+"Output";
//            String keyConditional="Connector"+index+"Conditional";
//            String keyConnectorName="Connector"+index;
//            this.ConnectorNamejCheckBox1.setSelected(properties.isSet(keyConnectorName));
//            this.ConnectorNamejTextField.setEnabled(properties.isSet(keyConnectorName));
//            if (properties.isSet(keyConnectorName)) {
//                this.ConnectorNamejTextField.setText(properties.get(keyConnectorName));
//            } else {
//                this.ConnectorNamejTextField.setText("");
//            }
//            this.OutputjCheckBox.setSelected(properties.isSet(keyOutput));
//            this.ConditionnaljCheckBox.setSelected(properties.isSet(keyConditional));
//            //--Table Input-Output
//            InputOutputTableModel tm=(InputOutputTableModel)this.InputOutputjTable.getModel();
            //--Reset the table data
//            tm.setData(dict.getInputOutput());
//            //--Set properties
//            tm.setProperties(properties);
//            //--Table value
//            for (InputOutput I:tm.data) {
//                if (properties.isSet(I.getInputOutput())) {
//                    String connector=properties.get(I.getInputOutput());
//                    I.setConnector(connector);
//                } else I.setConnector("No connector");
//            tm.fireTableDataChanged();
//            InputOutputjTable.setModel(tm);
//            }
//
//         //--Type in ToolboxTree -- Warning we rebuild everything to be sure we have the last update
//           
//            this.TypejComboBox.setSelectedItem(properties.get("Type"));

          //--RunProgram

//          this.CommandjTextField.setText(properties.getCommandline());
//          this.ProgramjTextField.setText(properties.getExecutable());
//          if (properties.isSet("ExecutableLinux")) this.LinuxProgramjTextField.setText(properties.get("ExecutableLinux"));
//          if (properties.isSet("ExecutableMacOSX")) this.MACOSXProgramjTextField.setText(properties.get("ExecutableMaxOSX"));
//          this.WebServcejCheckBox.setSelected(properties.getBoolean("WebServices"));
//          this.ProgramjTextField.setEnabled(!properties.getBoolean("WebServices"));
//          this.LocateWindowsjButton.setEnabled(!properties.getBoolean("WebServices"));
//          this.LocateLinuxjButton.setEnabled(!properties.getBoolean("WebServices"));
//          this.LocateMacOXjButton.setEnabled(!properties.getBoolean("WebServices"));
//          this.WebServcejCheckBox.setSelected(properties.getBoolean("InternalArmadilloApplication"));
//          this.ProgramjTextField.setEnabled(!properties.getBoolean("InternalArmadilloApplication"));
//          this.LocateWindowsjButton.setEnabled(!properties.getBoolean("InternalArmadilloApplication"));
//          this.LocateLinuxjButton.setEnabled(!properties.getBoolean("InternalArmadilloApplication"));
//          this.LocateMacOXjButton.setEnabled(!properties.getBoolean("InternalArmadilloApplication"));
//          this.VerifyExitValuejCheckBox.setSelected(properties.getBoolean("VerifyExitValue"));
//          this.NormalExitValuejTextField.setEnabled(properties.getBoolean("VerifyExitValue"));
//          this.NoThreadjCheckBox.setSelected(properties.getBoolean("NoThread"));
//          this.DebugjCheckBox.setSelected(properties.getBoolean("debug"));
//          this.NormalExitValuejTextField.setText(""+properties.getInt("NormalExitValue"));
//          if (properties.isSet("help")) {
//              this.jTextArea1.setText(properties.get("help"));
//          } else {
//              this.jTextArea1.setText("");
//          }

       


    }

    public void updatePropertiesTable() {
//        workflow_properties_TableModel tm=(workflow_properties_TableModel) this.jTable1.getModel();
//        tm.setData(properties);
//        tm.fireTableDataChanged();
//        this.jTable1.setModel(tm);
    }

    public void close() {
        this.updateProperties();               
        this.setVisible(false);
    }



    ///////////////////////////////////////////////////////////////////////////
    /// MESSAGE FONCTION

//    /**
//     * Affiche un message dans la status bar
//     * La provenance peut être mise dans un tooltip
//     * @param text Le texte
//     * @param tooltip Le tooltip texte
//     */
//    void Message(String text, String tooltip) {
//        this.jStatusMessage.setEnabled(true);
//        this.jStatusMessage.setForeground(new java.awt.Color(0, 51, 153));
//        this.jStatusMessage.setBackground(Color.WHITE);
//        this.jStatusMessage.setToolTipText(tooltip);
//        this.jStatusMessage.setText(text);
//    }
//
//    /**
//     * Affiche un message d'erreur en rouge dans la status bar
//     * La provenance peut être mise dans un tooltip
//     * @param text Le texte
//     * @param tooltip Le tooltip texte
//     */
//    void MessageError(String text, String tooltip) {
//        this.jStatusMessage.setEnabled(true);
//        this.jStatusMessage.setForeground(Color.RED);
//        this.jStatusMessage.setBackground(Color.WHITE);
//        this.jStatusMessage.setToolTipText(tooltip);
//        this.jStatusMessage.setText(text);
//    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Break_cli_jButton2;
    private javax.swing.JButton ClosejButton;
    private javax.swing.JCheckBox DeleteInput3;
    private javax.swing.JCheckBox DeleteInput6;
    private javax.swing.JCheckBox DeleteInput8;
    private javax.swing.JCheckBox DeleteOutput1;
    private javax.swing.JCheckBox DeleteOutput10;
    private javax.swing.JCheckBox DeleteOutput2;
    private javax.swing.JCheckBox DeleteOutput3;
    private javax.swing.JCheckBox DeleteOutput4;
    private javax.swing.JCheckBox DeleteOutput5;
    private javax.swing.JCheckBox DeleteOutput6;
    private javax.swing.JCheckBox DeleteOutput7;
    private javax.swing.JCheckBox DeleteOutput8;
    private javax.swing.JCheckBox DeleteOutput9;
    private javax.swing.JButton Insert_SampleApplication_jButton;
    private javax.swing.JButton Insert_Sample_Jar_jButton;
    private javax.swing.JButton Insert_Sample_Perl_jButton;
    private javax.swing.JButton Locate_Application_jButton1;
    private javax.swing.JTextField NamejTextField;
    private javax.swing.JComboBox OutputType1;
    private javax.swing.JComboBox OutputType10;
    private javax.swing.JComboBox OutputType2;
    private javax.swing.JComboBox OutputType3;
    private javax.swing.JComboBox OutputType4;
    private javax.swing.JComboBox OutputType5;
    private javax.swing.JComboBox OutputType6;
    private javax.swing.JComboBox OutputType7;
    private javax.swing.JComboBox OutputType8;
    private javax.swing.JComboBox OutputType9;
    private javax.swing.JTextField application_name;
    private javax.swing.JTextField arg1;
    private javax.swing.JTextField arg10;
    private javax.swing.JComboBox arg10_option;
    private javax.swing.JComboBox arg10_type;
    private javax.swing.JTextField arg11;
    private javax.swing.JComboBox arg11_option;
    private javax.swing.JComboBox arg11_type;
    private javax.swing.JTextField arg12;
    private javax.swing.JComboBox arg12_option;
    private javax.swing.JComboBox arg12_type;
    private javax.swing.JTextField arg13;
    private javax.swing.JComboBox arg13_option;
    private javax.swing.JComboBox arg13_type;
    private javax.swing.JTextField arg14;
    private javax.swing.JComboBox arg14_option;
    private javax.swing.JComboBox arg14_type;
    private javax.swing.JTextField arg15;
    private javax.swing.JComboBox arg15_option;
    private javax.swing.JComboBox arg15_type;
    private javax.swing.JTextField arg16;
    private javax.swing.JComboBox arg16_option;
    private javax.swing.JComboBox arg16_type;
    private javax.swing.JTextField arg17;
    private javax.swing.JComboBox arg17_option;
    private javax.swing.JComboBox arg17_type;
    private javax.swing.JTextField arg18;
    private javax.swing.JComboBox arg18_option;
    private javax.swing.JComboBox arg18_type;
    private javax.swing.JTextField arg19;
    private javax.swing.JComboBox arg19_option;
    private javax.swing.JComboBox arg19_type;
    private javax.swing.JComboBox arg1_option;
    private javax.swing.JComboBox arg1_type;
    private javax.swing.JComboBox arg1_type3;
    private javax.swing.JComboBox arg1_type6;
    private javax.swing.JComboBox arg1_type8;
    private javax.swing.JTextField arg2;
    private javax.swing.JTextField arg20;
    private javax.swing.JComboBox arg20_option;
    private javax.swing.JComboBox arg20_type;
    private javax.swing.JComboBox arg2_option;
    private javax.swing.JComboBox arg2_type;
    private javax.swing.JTextField arg3;
    private javax.swing.JComboBox arg3_option;
    private javax.swing.JComboBox arg3_type;
    private javax.swing.JTextField arg4;
    private javax.swing.JComboBox arg4_option;
    private javax.swing.JComboBox arg4_type;
    private javax.swing.JTextField arg5;
    private javax.swing.JComboBox arg5_option;
    private javax.swing.JComboBox arg5_type;
    private javax.swing.JTextField arg6;
    private javax.swing.JComboBox arg6_option;
    private javax.swing.JComboBox arg6_type;
    private javax.swing.JTextField arg7;
    private javax.swing.JComboBox arg7_option;
    private javax.swing.JComboBox arg7_type;
    private javax.swing.JTextField arg8;
    private javax.swing.JComboBox arg8_option;
    private javax.swing.JComboBox arg8_type;
    private javax.swing.JTextField arg9;
    private javax.swing.JComboBox arg9_option;
    private javax.swing.JComboBox arg9_type;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField output1;
    private javax.swing.JTextField output10;
    private javax.swing.JTextField output2;
    private javax.swing.JTextField output3;
    private javax.swing.JTextField output4;
    private javax.swing.JTextField output5;
    private javax.swing.JTextField output6;
    private javax.swing.JTextField output7;
    private javax.swing.JTextField output8;
    private javax.swing.JTextField output9;
    // End of variables declaration//GEN-END:variables

    public void display(workflow_properties properties) {
       this.properties=properties;
        initComponents();       
        setIconImage(Config.image); //--Set the icon in the top corner
        setTitle(this.properties.getName());        
        this.x=this.properties.getInt("x");
        this.y=this.properties.getInt("y");
        this.properties.remove("x");
        this.properties.remove("y");
        //--Update the small viewer
        workflow.updateWorkflow(this.properties);            
                 
        //--Set the various properties for the menu...
        setSettingForProperties();
        // Set position windows position relative to screen
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension d = getSize();
        setLocation((screenSize.width-d.width)/2,
					(screenSize.height-d.height)/2);
                
        this.setAlwaysOnTop(true);
        this.setVisible(true);
    }

    public void saveImage(String filename) {
        BufferedImage bi;
        try {
            bi = new Robot().createScreenCapture(this.getBounds()); 
            ImageIO.write(bi, "png", new File(filename));
             this.setVisible(false);
        } catch (Exception ex) {
           Config.log("Unable to save "+filename+" dialog image");
        }  
    }

}
