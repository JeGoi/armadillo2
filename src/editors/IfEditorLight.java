/*
 *  Armadillo Workflow Platform v1.0
 *  A simple pipeline system for phylogenetic analysis
 *  
 *  Copyright (C) 2009-2011  Etienne Lord, Mickael Leclercq
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package editors;


import workflows.workflow_properties;
import configuration.Config;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Toolkit;
import java.io.File;
import editor.EditorInterface;
import editor.ForMutableTreeNode;
import editor.RenamePropertiesJDialog;
import java.awt.Font;
import java.awt.Robot;
import java.awt.image.BufferedImage;
import java.util.Vector;
import javax.imageio.ImageIO;
import program.*;
import workflows.armadillo_workflow;
import workflows.workflow_properties_dictionnary;
import biologic.*;
import database.AbstractTreeModel;
import javax.swing.tree.TreeSelectionModel;

/**
 * Editor of the object properties in the Main Workflow
 * Note: Only called if object doesnt have a Custum Editor
 * @author Etienne Lord
 * @since July 2009
 */
public class IfEditorLight extends javax.swing.JDialog implements EditorInterface {

    ////////////////////////////////////////////////////////////////////////////
    /// VARIABLES

    Config config=new Config();
    //ConnectorInfoBox connectorinfobox;
    workflow_properties_dictionnary dict=new workflow_properties_dictionnary();
    String selected="";             // Selected properties
    Frame frame;
    workflow_properties properties;
    armadillo_workflow parent_workflow;
    
    ////////////////////////////////////////////////////////////////////////////
    /// CONSTANT
    public final String defaultNameString=" Name";
    public final String defaultDescriptionString=" Description";
   
    ////////////////////////////////////////////////////////////////////////////
    /// SELECTED VARIABLE

    ForMutableTreeNode selected_branch=null;
     Vector<ForMutableTreeNode>dataTree=new Vector<ForMutableTreeNode>();
    

    /** Creates new form propertiesJDialog */
    public IfEditorLight(java.awt.Frame parent, armadillo_workflow parent_workflow) {
        super(parent, false);
        this.parent_workflow=parent_workflow;      
        frame=parent;             
    }

    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel9 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        NamejTextField = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jLabel13 = new javax.swing.JLabel();
        ClosejButton = new javax.swing.JButton();
        run_jButton = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        Test_jComboBox1 = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        Condition_to_verifyjTextField3 = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        ValueEquals_jTextField3 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        RangeMin_jTextField = new javax.swing.JTextField();
        RangeMax_jTextField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        ValueEquals_jComboBox2 = new javax.swing.JComboBox();
        WeHaveResults_jComboBox = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jButton7 = new javax.swing.JButton();

        jTextField1.setText("jTextField1");

        jTextField2.setText("jTextField2");

        jLabel3.setText("jLabel3");

        setTitle("Properties");

        jTabbedPane1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jTabbedPane1ComponentShown(evt);
            }
        });

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setText("Name");

        jButton4.setText("Rename");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTextArea3.setColumns(20);
        jTextArea3.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        jTextArea3.setForeground(new java.awt.Color(204, 204, 204));
        jTextArea3.setLineWrap(true);
        jTextArea3.setRows(5);
        jTextArea3.setText(" Description");
        jTextArea3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextArea3FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextArea3FocusLost(evt);
            }
        });
        jTextArea3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextArea3KeyTyped(evt);
            }
        });
        jScrollPane4.setViewportView(jTextArea3);

        jLabel13.setText("Short description (will be showed bellow the If object)");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(NamejTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel13)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(NamejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 21, Short.MAX_VALUE))
        );

        ClosejButton.setText("<html><b>Close</b></html>");
        ClosejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClosejButtonActionPerformed(evt);
            }
        });

        run_jButton.setText("Run");
        run_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                run_jButtonActionPerformed(evt);
            }
        });

        jButton8.setText("Stop");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton6.setText("Reset default values");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        Test_jComboBox1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Test_jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Test for value", "Test for range", "Test for results" }));
        Test_jComboBox1.setRequestFocusEnabled(false);
        Test_jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Test_jComboBox1ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Condition to verify");

        Condition_to_verifyjTextField3.setEditable(false);
        Condition_to_verifyjTextField3.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel6)
                .addContainerGap())
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Test_jComboBox1, javax.swing.GroupLayout.Alignment.TRAILING, 0, 478, Short.MAX_VALUE)
                    .addComponent(Condition_to_verifyjTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Condition_to_verifyjTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Test_jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        ValueEquals_jTextField3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ValueEquals_jTextField3FocusLost(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setText("Range");

        RangeMin_jTextField.setEnabled(false);
        RangeMin_jTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                RangeMin_jTextFieldFocusLost(evt);
            }
        });

        RangeMax_jTextField.setEnabled(false);
        RangeMax_jTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                RangeMax_jTextFieldFocusLost(evt);
            }
        });

        jLabel9.setText("to");

        jLabel10.setText("from");

        ValueEquals_jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Equals (=)", "Equals (regular expression)", "Smaller (<)", "Bigger (>)", "Smaller or equals (<=)", "Bigger or equals (>=)", "Contains", "Contains (regular expression)" }));
        ValueEquals_jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ValueEquals_jComboBox2ActionPerformed(evt);
            }
        });

        WeHaveResults_jComboBox.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        WeHaveResults_jComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "We have results", "We don't have results" }));
        WeHaveResults_jComboBox.setEnabled(false);
        WeHaveResults_jComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WeHaveResults_jComboBoxActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setText("Value");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(WeHaveResults_jComboBox, 0, 382, Short.MAX_VALUE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel10))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel6Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ValueEquals_jComboBox2, 0, 132, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(RangeMin_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(RangeMax_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(ValueEquals_jTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE))))
                .addGap(103, 103, 103))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ValueEquals_jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(ValueEquals_jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RangeMin_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(RangeMax_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(WeHaveResults_jComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree1.setFocusCycleRoot(true);
        jTree1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTree1MouseClicked(evt);
            }
        });
        jTree1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTree1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTree1FocusLost(evt);
            }
        });
        jTree1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTree1KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTree1);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                        .addComponent(jButton8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(run_jButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ClosejButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton8)
                    .addComponent(run_jButton)
                    .addComponent(ClosejButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6))
                .addContainerGap())
        );

        jTabbedPane1.addTab("If", jPanel9);

        jButton7.setText("?");
        jButton7.setToolTipText("Help / Informations");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jButton7)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 558, Short.MAX_VALUE)
                .addGap(17, 17, 17))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 572, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
       HelpEditor help = new HelpEditor(this.frame, false, properties);
        help.setVisible(true);
}//GEN-LAST:event_jButton7ActionPerformed

    private void jTabbedPane1ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jTabbedPane1ComponentShown

}//GEN-LAST:event_jTabbedPane1ComponentShown

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        properties.load();             //--reload current properties from file
        this.setProperties(properties);//--Update current field
}//GEN-LAST:event_jButton6ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        properties.put("Status", Config.status_nothing);
        properties.killThread();
}//GEN-LAST:event_jButton8ActionPerformed

    private void run_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_run_jButtonActionPerformed
        if(properties.isSet("ClassName")) {
            this.parent_workflow.workflow.updateDependance();
            programs prog=new programs(parent_workflow.workbox.getCurrentWorkflows());
            prog.Run(properties);
        }
}//GEN-LAST:event_run_jButtonActionPerformed

    private void ClosejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClosejButtonActionPerformed
        //-- 2. Close dialog
        // properties.save("debug.txt");
        this.setVisible(false);
}//GEN-LAST:event_ClosejButtonActionPerformed

    private void jTextArea3KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea3KeyTyped
        String description=this.jTextArea3.getText();
        properties.put("Description", description.trim());
}//GEN-LAST:event_jTextArea3KeyTyped

    private void jTextArea3FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextArea3FocusLost
        if (jTextArea3.getText().trim().equals("")) {
            this.jTextArea3.setText(this.defaultDescriptionString);
            this.jTextArea3.setForeground(Color.LIGHT_GRAY);
        } else {
            String description=this.jTextArea3.getText();
            properties.put("Description", description.trim());
        }
}//GEN-LAST:event_jTextArea3FocusLost

    private void jTextArea3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextArea3FocusGained
        if (jTextArea3.getText().equals(this.defaultDescriptionString)) {
            jTextArea3.setText("");
            jTextArea3.setForeground(Color.BLACK);
        }
}//GEN-LAST:event_jTextArea3FocusGained

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        properties.put("Name", this.NamejTextField.getText());
        parent_workflow.updateCurrentWorkflow(properties);
}//GEN-LAST:event_jButton4ActionPerformed

    private void Test_jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Test_jComboBox1ActionPerformed
       properties.put("IfTest", (String)this.Test_jComboBox1.getSelectedItem());
       switch(this.Test_jComboBox1.getSelectedIndex()) {
           //--Test for value
           case 0: 
               this.ValueEquals_jComboBox2.setEnabled(true);
               this.ValueEquals_jTextField3.setEnabled(true);
               this.RangeMin_jTextField.setEnabled(false);
               this.RangeMax_jTextField.setEnabled(false);
               this.WeHaveResults_jComboBox.setEnabled(false);
               break;
           //--Test for range    
           case 1:
               this.ValueEquals_jComboBox2.setEnabled(false);
               this.ValueEquals_jTextField3.setEnabled(false);
               this.RangeMin_jTextField.setEnabled(true);
               this.RangeMax_jTextField.setEnabled(true);
               this.WeHaveResults_jComboBox.setEnabled(false);
               break;  
            //-- Test for results   
           case 2:
               this.ValueEquals_jComboBox2.setEnabled(false);
               this.ValueEquals_jTextField3.setEnabled(false);
               this.RangeMin_jTextField.setEnabled(false);
               this.RangeMax_jTextField.setEnabled(false);
               this.WeHaveResults_jComboBox.setEnabled(true);
               //--Note: needed for the test...
               properties.put("IfObjectTestForResults", (String)this.WeHaveResults_jComboBox.getSelectedItem());
               break;
               
       }
       
    }//GEN-LAST:event_Test_jComboBox1ActionPerformed

    private void ValueEquals_jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ValueEquals_jComboBox2ActionPerformed
        properties.put("IfValueTest", (String)this.ValueEquals_jComboBox2.getSelectedItem());
    }//GEN-LAST:event_ValueEquals_jComboBox2ActionPerformed

    private void jTree1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTree1MouseClicked
        //--Display the selected variable in the Variable JTextField
        selected_branch = (ForMutableTreeNode) this.jTree1.getLastSelectedPathComponent();
        this.updateUI();
        //--TO DO HERE..Test variables
    }//GEN-LAST:event_jTree1MouseClicked

    private void jTree1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTree1FocusGained
        // TODO add your handling code here:
}//GEN-LAST:event_jTree1FocusGained

    private void jTree1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTree1KeyReleased
        //--Display the selected variable in the Variable JTextField
        selected_branch = (ForMutableTreeNode) this.jTree1.getLastSelectedPathComponent();
        this.updateUI();
}//GEN-LAST:event_jTree1KeyReleased

    private void jTree1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTree1FocusLost
         selected_branch = (ForMutableTreeNode) this.jTree1.getLastSelectedPathComponent();         
        this.updateUI();
    }//GEN-LAST:event_jTree1FocusLost

    private void RangeMin_jTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_RangeMin_jTextFieldFocusLost
        properties.put("IfObjectMin", this.RangeMin_jTextField.getText());
        
    }//GEN-LAST:event_RangeMin_jTextFieldFocusLost

    private void RangeMax_jTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_RangeMax_jTextFieldFocusLost
        properties.put("IfObjectMax", this.RangeMax_jTextField.getText());

    }//GEN-LAST:event_RangeMax_jTextFieldFocusLost

    private void ValueEquals_jTextField3FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ValueEquals_jTextField3FocusLost
       properties.put("IfObjectValue", this.ValueEquals_jTextField3.getText());
    }//GEN-LAST:event_ValueEquals_jTextField3FocusLost

    private void WeHaveResults_jComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WeHaveResults_jComboBoxActionPerformed
       properties.put("IfObjectTestForResults", (String)this.WeHaveResults_jComboBox.getSelectedItem());
    }//GEN-LAST:event_WeHaveResults_jComboBoxActionPerformed

  
    /**
     * This set the Properties
     * @param properties
     */
    public void setProperties(workflow_properties properties) {
        this.properties=properties;
        setTitle(properties.getName());
        //if (properties.isSet("Description")) this.Notice.setText(properties.get("Description"));
         //--Description
        if (properties.getDescription().equals("Not Set")) {
            this.jTextArea3.setText(this.defaultDescriptionString);
            this.jTextArea3.setForeground(Color.LIGHT_GRAY);
        } else {
            this.jTextArea3.setText(properties.getDescription());
            this.jTextArea3.setForeground(Color.BLACK);
        }
        //--Object Name
        this.NamejTextField.setText(properties.getName());
        //--If properties (clean)
        this.Condition_to_verifyjTextField3.setText("");
        this.RangeMin_jTextField.setText("");
        this.RangeMax_jTextField.setText("");
        this.ValueEquals_jTextField3.setText("");
        //properties.put("IfValueTest", (String)this.ValueEquals_jComboBox2.getSelectedItem());
        if (properties.isSet("IfObjectID")&&!properties.get("IfObjectID").isEmpty()) {
            //--Test if we are still attached            
            try {
               //--Find the branch in the tree 
               String IfObjectID=properties.get("IfObjectID");
               String type=IfObjectID.substring(0, IfObjectID.indexOf("."));
               //--Not used...
               //String variable=IfObjectID.substring(IfObjectID.indexOf(".")+1);               
               if (properties.Output(type)) {
                   this.updateUI();                   
               }               
            } catch(Exception e) {}        
            
        }
        if (properties.isSet("IfObjectMin")) this.RangeMin_jTextField.setText(properties.get("IfObjectMin"));
        if (properties.isSet("IfObjectMax")) this.RangeMax_jTextField.setText(properties.get("IfObjectMax"));
        if (properties.isSet("IfObjectValue")) this.ValueEquals_jTextField3.setText(properties.get("IfObjectValue"));
        if (properties.isSet("IfValueTest")) {
            this.ValueEquals_jComboBox2.setSelectedItem(properties.get("IfValueTest"));
//           String s=properties.get("IfValueTest");
//           if (s.startsWith("Equals (=)"))              this.ValueEquals_jComboBox2.setSelectedIndex(0);
//           if (s.startsWith("Smaller (<)"))             this.ValueEquals_jComboBox2.setSelectedIndex(1);
//           if (s.startsWith("Bigger (>)"))              this.ValueEquals_jComboBox2.setSelectedIndex(2);
//           if (s.startsWith("Smaller or equals (<=)"))  this.ValueEquals_jComboBox2.setSelectedIndex(3);
//           if (s.startsWith("Bigger or equals (>=)"))   this.ValueEquals_jComboBox2.setSelectedIndex(4);
//           if (s.startsWith("Contains"))                this.ValueEquals_jComboBox2.setSelectedIndex(5);           
        } else {
           properties.put("IfValueTest", (String)ValueEquals_jComboBox2.getSelectedItem());
        }
        if (properties.isSet("IfTest")) {
            String s=properties.get("IfTest");
            this.Test_jComboBox1.setSelectedItem(s);
//            if (s.startsWith("Test for value")) this.Test_jComboBox1.setSelectedIndex(0);
//            if (s.startsWith("Test for range")) this.Test_jComboBox1.setSelectedIndex(1);
//            if (s.startsWith("Test for results")) this.Test_jComboBox1.setSelectedIndex(2);
        }    
        if (properties.isSet("IfTest")) {
            String s=properties.get("IfTest");
            this.Test_jComboBox1.setSelectedItem(s);
//            if (s.startsWith("Test for value")) this.Test_jComboBox1.setSelectedIndex(0);
//            if (s.startsWith("Test for range")) this.Test_jComboBox1.setSelectedIndex(1);
//            if (s.startsWith("Test for results")) this.Test_jComboBox1.setSelectedIndex(2);
        }
        
        if (properties.isSet("IfObjectTestForResults")) {
             if (properties.get("IfObjectTestForResults").startsWith("We don")) {
                //--We don't have results...
                 this.WeHaveResults_jComboBox.setSelectedIndex(1);
            } else {
                //--We have results
                this.WeHaveResults_jComboBox.setSelectedIndex(0);
            }
        }
        switch(this.Test_jComboBox1.getSelectedIndex()) {
           //--Test for value
           case 0: 
               this.ValueEquals_jComboBox2.setEnabled(true);
               this.ValueEquals_jTextField3.setEnabled(true);
               this.RangeMin_jTextField.setEnabled(false);
               this.RangeMax_jTextField.setEnabled(false);
               this.WeHaveResults_jComboBox.setEnabled(false);
               break;
           //--Test for range    
           case 1:
               this.ValueEquals_jComboBox2.setEnabled(false);
               this.ValueEquals_jTextField3.setEnabled(false);
               this.RangeMin_jTextField.setEnabled(true);
               this.RangeMax_jTextField.setEnabled(true);
               this.WeHaveResults_jComboBox.setEnabled(false);
               break;  
            //-- Test for results   
           case 2:
               this.ValueEquals_jComboBox2.setEnabled(false);
               this.ValueEquals_jTextField3.setEnabled(false);
               this.RangeMin_jTextField.setEnabled(false);
               this.RangeMax_jTextField.setEnabled(false);
               this.WeHaveResults_jComboBox.setEnabled(true);
               break;
               
       }

    }  

     void updateUI() {
         if (selected_branch!=null&&selected_branch.getParent()!=null) {  
             properties.put("IfObjectID",((ForMutableTreeNode)selected_branch.getParent()).getName()+"."+this.selected_branch.getName());
             this.Condition_to_verifyjTextField3.setText(properties.get("IfObjectID"));
         } else {
             if (properties.isSet("IfObjectID")) {
                 Condition_to_verifyjTextField3.setText(properties.get("IfObjectID"));
             } else {
                 Condition_to_verifyjTextField3.setText("");
             }
             
             
         }
    }
    
    ///////////////////////////////////////////////////////////////////////////
    /// DISPLAY MAIN FUNCTION
    
    public void display(workflow_properties properties) {
        initComponents();
        setIconImage(Config.image);
        //--This update the properties (set name...)
        setProperties(properties);
        //--This create the variables tree
        this.createTree();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension d = getSize();
        setLocation((screenSize.width-d.width)/2,
		    (screenSize.height-d.height)/2);
        this.setAlwaysOnTop(true);
        this.setProperties(properties);
        this.setVisible(true);
    }

    public void saveImage(String filename) {
        BufferedImage bi;
        try {
            bi = new Robot().createScreenCapture(this.getBounds()); 
            ImageIO.write(bi, "png", new File(filename));
            this.setVisible(false);
        } catch (Exception ex) {
           Config.log("Unable to save "+filename+" dialog image");
        }            
    }
    
     /**
     * 1. Create the tree model from the database table.
     * 2. Set the properties
     * tree1 is the first parent, tree2 the first child, etc..
     * TO DO: This need t go into a Class of it's own... - Etienne
     */
    public void createTree(){
        //--Set the tree and selection model
        ForMutableTreeNode tree1 = new ForMutableTreeNode("Possible variables","");
        tree1.setLeaf(false); 
        //--Is there any input
        //System.out.println(properties.getProperties());
        //--Detect the inputs of the Variable
        for (String type:workflow_properties_dictionnary.InputOutputType) {
             Integer id=properties.getInputID(type.toLowerCase());
             Vector<Integer>ids=properties.getInputID(type, null);
             if (ids.size()>0) {
                 //--List, according to type, the possible option
                 
                  ForMutableTreeNode parent=new ForMutableTreeNode(properties,type,""+id);
                  tree1.add(parent);
                  ForMutableTreeNode tree2 = (ForMutableTreeNode) tree1.getLastLeaf();
                  parent.setLeaf(false);
                 if (type.equalsIgnoreCase("Sequence")) {
                    Sequence obj=new Sequence(id);
                    //tree2.add(new ForMutableTreeNode(properties,"this",obj.toString()));
                    tree2.add(new ForMutableTreeNode(properties,"Name",obj.getName()));
                    tree2.add(new ForMutableTreeNode(properties,"Note",obj.getNote()));
                    tree2.add(new ForMutableTreeNode(properties,"Length",""+obj.getLen()));
                    tree2.add(new ForMutableTreeNode(properties,"Inverse (complement)",""));
                    tree2.add(new ForMutableTreeNode(properties,"Inverse",""));
                    //tree2.add(new ForMutableTreeNode(properties,"Number of gap",""));
                    tree2.add(new ForMutableTreeNode(properties,"Sequence",obj.getSequence()));
                    tree2.add(new ForMutableTreeNode(properties,"Composition (%)",""));
                    tree2.add(new ForMutableTreeNode(properties,"Type",obj.getSequence_type()));
                    tree2.add(new ForMutableTreeNode(properties,"Fasta",""+obj.getFasta()));
                    tree2.add(new ForMutableTreeNode(properties,"Phylip",""+obj.getPhylip()));
                 }
                 if (type.equalsIgnoreCase("MultipleSequences")) {
                    MultipleSequences obj=new MultipleSequences(id);
                    //tree2.add(new ForMutableTreeNode(properties,"this",obj.toString()));
                    tree2.add(new ForMutableTreeNode(properties,"Name",obj.getName()));
                    tree2.add(new ForMutableTreeNode(properties,"Note",obj.getNote()));
                    tree2.add(new ForMutableTreeNode(properties,"Length",""+obj.getSequenceSize()));
                    //tree2.add(new ForMutableTreeNode(properties,"Number of intact column",""));
                    tree2.add(new ForMutableTreeNode(properties,"Number of sequences",""+obj.getNbSequence()));
                    tree2.add(new ForMutableTreeNode(properties,"Type",(obj.isAA()?"AA":obj.isDNA()?"DNA":obj.isRNA()?"RNA":"Undefined")));
                    tree2.add(new ForMutableTreeNode(properties,"Fasta",""+obj.getFasta()));
                    tree2.add(new ForMutableTreeNode(properties,"Phylip",""+obj.getPhylip()));

                    //tree2.add(new ForMutableTreeNode(properties,"Sequence with name",""));
                 }
                 if (type.equalsIgnoreCase("Alignment")) {
                     Alignment obj=new Alignment(id);
                    //tree2.add(new ForMutableTreeNode(properties,"this",obj.toString()));
                    tree2.add(new ForMutableTreeNode(properties,"Name",obj.getName()));
                    tree2.add(new ForMutableTreeNode(properties,"Note",obj.getNote()));
                    tree2.add(new ForMutableTreeNode(properties,"Length",""+obj.getSequenceSize()));
                    tree2.add(new ForMutableTreeNode(properties,"Type",(obj.isAA()?"AA":obj.isDNA()?"DNA":obj.isRNA()?"RNA":"Undefined")));
                    //tree2.add(new ForMutableTreeNode(properties,"Number of intact column",""));
                    tree2.add(new ForMutableTreeNode(properties,"Number of sequences",""+obj.getNbSequence()));
                    tree2.add(new ForMutableTreeNode(properties,"Fasta",""+obj.getFasta()));
                    tree2.add(new ForMutableTreeNode(properties,"Phylip",""+obj.getPhylip()));
                 }
                   if (type.equalsIgnoreCase("Ancestor")) {
                     Ancestor obj=new Ancestor(id);
                    //tree2.add(new ForMutableTreeNode(properties,"this",obj.toString()));
                    tree2.add(new ForMutableTreeNode(properties,"Name",obj.getName()));
                    tree2.add(new ForMutableTreeNode(properties,"Note",obj.getNote()));
                    tree2.add(new ForMutableTreeNode(properties,"Length",""+obj.getSequenceSize()));
                    tree2.add(new ForMutableTreeNode(properties,"Type",(obj.isAA()?"AA":obj.isDNA()?"DNA":obj.isRNA()?"RNA":"Undefined")));
                    //tree2.add(new ForMutableTreeNode(properties,"Number of intact column",""));
                    tree2.add(new ForMutableTreeNode(properties,"Number of sequences",""+obj.getNbSequence()));
                    tree2.add(new ForMutableTreeNode(properties,"Fasta",""+obj.getFasta()));
                    tree2.add(new ForMutableTreeNode(properties,"Phylip",""+obj.getPhylip()));
                 }
                 if (type.equalsIgnoreCase("Tree")) {
                    Tree obj=new Tree(id);
                    //tree2.add(new ForMutableTreeNode(properties,"this",obj.toString()));
                    tree2.add(new ForMutableTreeNode(properties,"Name",obj.getName()));
                    tree2.add(new ForMutableTreeNode(properties,"Note",obj.getNote()));
                 }
                 if (type.equalsIgnoreCase("MultipleTrees")) {
                    MultipleTrees obj=new MultipleTrees(id);
                    tree2.add(new ForMutableTreeNode(properties,"Name",obj.getName()));
                    tree2.add(new ForMutableTreeNode(properties,"Note",obj.getNote()));
                 }
                 if (type.equalsIgnoreCase("Text")) {
                    Text obj=new Text(id);
                    tree2.add(new ForMutableTreeNode(properties,"Name",obj.getName()));
                    tree2.add(new ForMutableTreeNode(properties,"Note",obj.getNote()));
                 }
             }
        }
       
        AbstractTreeModel treeModel = new AbstractTreeModel(tree1);
        treeModel.setRoot(tree1);
        treeModel.reload();
        jTree1.setModel(treeModel);
        jTree1.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);

    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ClosejButton;
    private javax.swing.JTextField Condition_to_verifyjTextField3;
    private javax.swing.JTextField NamejTextField;
    private javax.swing.JTextField RangeMax_jTextField;
    private javax.swing.JTextField RangeMin_jTextField;
    private javax.swing.JComboBox Test_jComboBox1;
    private javax.swing.JComboBox ValueEquals_jComboBox2;
    private javax.swing.JTextField ValueEquals_jTextField3;
    private javax.swing.JComboBox WeHaveResults_jComboBox;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTree jTree1;
    private javax.swing.JButton run_jButton;
    // End of variables declaration//GEN-END:variables

}
