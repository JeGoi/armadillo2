/*
 *  Armadillo Workflow Platform v1.0
 *  A simple pipeline system for phylogenetic analysis
 *  
 *  Copyright (C) 2009-2011  Etienne Lord, Mickael Leclercq
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package editors;

import biologic.Biologic;
import biologic.InfoAlignment;
import biologic.InfoMultipleSequences;
import biologic.Output;
import biologic.Sequence;
import biologic.Tree;
import biologic.seqclasses.RapidLoad;
import configuration.Config;
import configuration.Util;
import editor.EditorInterface;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Toolkit;
import java.awt.Robot;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import workflows.workflow_properties;
import workflows.armadillo_workflow;

public class BiologicEditor extends javax.swing.JDialog implements EditorInterface {

    Frame frame;
    workflow_properties properties;
    armadillo_workflow parent_workflow;
    Config config=new Config();
    String to_save_txt=""; //--Displayed text
  
    public BiologicEditor(java.awt.Frame parent, armadillo_workflow parent_workflow) {
        this.parent_workflow=parent_workflow;
        frame=parent;
        initComponents();
         this.jTabbedPane1.setEnabledAt(1,false); //Fasta jTabbledPane
        this.jTabbedPane1.setEnabledAt(2,false); //Phylip jTabbledPane
        this.RapidEditjButton.setEnabled(false);
        this.jTextArea1.setFont(new java.awt.Font(Font.MONOSPACED, Font.PLAIN, 11));
        this.jTextArea1.getDocument().addDocumentListener(new DocumentListener() {                
            @Override
            public void insertUpdate(DocumentEvent de) {}

            @Override
            public void removeUpdate(DocumentEvent de) {}

            @Override
            public void changedUpdate(DocumentEvent de) {
                //--Set a flag to save text before closing here...
            }
           });
    }

    public BiologicEditor(java.awt.Frame parent) {      
        frame=parent;
        initComponents();
        this.jTextArea1.setFont(new java.awt.Font(Font.MONOSPACED, Font.PLAIN, 11));
        this.jTabbedPane1.setEnabledAt(1,false); //Fasta jTabbledPane
        this.jTabbedPane1.setEnabledAt(2,false); //Phylip jTabbledPane
        this.RapidEditjButton.setEnabled(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox2 = new javax.swing.JComboBox();
        jProgressBar1 = new javax.swing.JProgressBar();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        RapidEditjButton = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        FastajTextArea2 = new javax.swing.JTextArea();
        jButton4 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        PhylipjTextArea3 = new javax.swing.JTextArea();
        jButton5 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jStatusMessage = new javax.swing.JTextField();

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Details");
        setAlwaysOnTop(true);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton2.setText("Save to file");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        RapidEditjButton.setText("Update database");
        RapidEditjButton.setToolTipText("Note: some metadata (note, filename...) migth be lost.");
        RapidEditjButton.setEnabled(false);
        RapidEditjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RapidEditjButtonActionPerformed(evt);
            }
        });

        jButton3.setText("<html><b>Close</b></html>");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(RapidEditjButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 584, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 839, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(RapidEditjButton)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jTabbedPane1.addTab("Normal", jPanel3);

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        FastajTextArea2.setColumns(20);
        FastajTextArea2.setRows(5);
        jScrollPane2.setViewportView(FastajTextArea2);

        jButton4.setText("Save to file (.fasta)");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton6.setText("<html><b>Close</b></html>");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 669, Short.MAX_VALUE)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 839, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jTabbedPane1.addTab("Fasta", jPanel5);

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        PhylipjTextArea3.setColumns(20);
        PhylipjTextArea3.setRows(5);
        jScrollPane3.setViewportView(PhylipjTextArea3);

        jButton5.setText("Save to file (.phylip)");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton1.setText("<html><b>Close<b></html>");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jStatusMessage.setBorder(null);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jStatusMessage, javax.swing.GroupLayout.DEFAULT_SIZE, 655, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 839, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jStatusMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jTabbedPane1.addTab("Phylip", jPanel6);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       JFileChooser jf=new JFileChooser(config.getExplorerPath());

        jf.setName("Saving as text file to ...");
        int result=jf.showSaveDialog(this);
           if (result==JFileChooser.APPROVE_OPTION) {
               String filename=jf.getSelectedFile().getAbsolutePath();
               String path=jf.getSelectedFile().getPath();
               config.setExplorerPath(path);
               config.Save();
               Util file=new Util();
               file.open(filename);
               file.println(to_save_txt);
               file.close();
               Message("Successfull saving to "+filename,"");
            }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void RapidEditjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RapidEditjButtonActionPerformed
        RapidLoad r=new RapidLoad();
        Message("RapidEdit in progress...","");
        String type=properties.get("outputType");
        Util file=new Util();
           file.open("infile");
           file.println(this.jTextArea1.getText());
           file.close();
         if (type.equals("Sequence")) {
             int id=r.loadSequence("infile");
             if (id!=0) properties.put("output_sequence_id", id);
         }
         if (type.equals("MultipleSequences")) {
             int id=r.loadMultipleSequences("infile");
             if (id!=0) properties.put("output_multiplesequences_id", id);
         }
         if (type.equals("Alignment")) {
             int id=r.loadAlignment("infile");
             if (id!=0) properties.put("output_alignment_id", id);
         }
         if (type.equals("Tree")) {
             int id=r.loadTree("infile");
             if (id!=0) {
//                 Tree tree=new Tree(properties.getInt("output_tree_id"));
//                 Tree tree2=new Tree(id);
//                 tree.setTree(tree2.getTree());
//                 tree.updateDatabase();
//                 tree2.removeFromDatabase();
                 properties.put("output_tree_id", id);
             }
         }
         if (type.equals("Text")) {
             try {
             Output out=new Output();
             out.setType(type);
             out.setTypeid(properties.getOutputID(type));
             Object o=out.getBiologic();
             int new_id=r.loadText("infile", ((Biologic)o).getName(), ((Biologic)o).getNote());
             if (new_id!=0) properties.put("output_text_id", new_id);
             } catch(Exception e) {e.printStackTrace();}
         }
         Message("Done saving to database.","");
    }//GEN-LAST:event_RapidEditjButtonActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        JFileChooser jf=new JFileChooser(config.getExplorerPath());

        jf.setName("Saving as fasta file to ...");
        int result=jf.showSaveDialog(this);
           if (result==JFileChooser.APPROVE_OPTION) {
               String filename=jf.getSelectedFile().getAbsolutePath();
               String path=jf.getSelectedFile().getPath();
               config.setExplorerPath(path);
               config.Save();
               Util file=new Util();
               file.open(filename);
               file.println(this.FastajTextArea2.getText());
               file.close();
               Message("Successfull saving to "+filename,"");
            }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        JFileChooser jf=new JFileChooser(config.getExplorerPath());
        jf.setName("Saving as phylip file to ...");
        int result=jf.showSaveDialog(this);
           if (result==JFileChooser.APPROVE_OPTION) {
               String filename=jf.getSelectedFile().getAbsolutePath();
               String path=jf.getSelectedFile().getPath();
               config.setExplorerPath(path);
               config.Save();
               Util file=new Util();
               file.open(filename);
               file.println(this.PhylipjTextArea3.getText());
               file.close();
               Message("Successfull saving to "+filename,"");
            }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
         this.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    void updateUI() {
        

         //--CASE 1. We have a multiplesequences_id in properties
//        InfoMultipleSequences selection=(InfoMultipleSequences)this.jList1.getSelectedValue();
//        if (selection!=null) {
//            this.Name_jTextField.setText(selection.getName()+" with ID ["+selection.getId()+"]");
//            this.DetailsJTextfield.setText("Total "+selection.getNbSequence()+" sequence(s) with maximum size "+selection.getSequenceSize()+" | Note: "+selection.getNote());
//        } else
//        if (properties.getInt("output_multiplesequences_id")>0) {
//            int multiplesequences_id=properties.getInt("output_multiplesequences_id");
//            selection=new InfoMultipleSequences(multiplesequences_id);
//            this.Name_jTextField.setText(selection.getName()+" with ID ["+selection.getId()+"]");
//            this.DetailsJTextfield.setText("Total "+selection.getNbSequence()+" sequence(s) with maximum size "+selection.getSequenceSize()+" | Note: "+selection.getNote());
//        //--Case 2. No sequence.. display no information
//        } else {
//            this.Name_jTextField.setText("No MultipleSequences selected.");
//            this.DetailsJTextfield.setText("");
//        }

    }

 



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea FastajTextArea2;
    private javax.swing.JTextArea PhylipjTextArea3;
    private javax.swing.JButton RapidEditjButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jStatusMessage;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    
   

    public void display(workflow_properties properties) {
       this.properties=properties;
       String type=properties.get("outputType");
       //for (String type:workflow_properties_dictionnary.InputOutputType) {
            
            int id=properties.getOutputID(type);
            //Config.log(type+"\t"+id);s
            if (id!=0) {
               //--Create an output object to get the good Biologic Object
               Output output=new Output();
               output.setType(type);
               output.setTypeid(id);
               //--To DO here... display a loading text box if its MultipleSequence or Alignment
               if (type.equals("MultipleSequences")) {
                   InfoMultipleSequences info=new InfoMultipleSequences(id);
                   if (info.getSequences().size()>1000) {
                       String title="Display | "+type+" | " +info.getName();
                       this.setTitle(title);
                       String infotxt="Warning. This group of Sequence(s) contains "+info.getSequences().size()+" elements\n"+
                                  "Only the first 100 will be shown.\n";
                       for (int i=0; i<100;i++) {
                           Sequence s=new Sequence(info.getSequences().get(i).getId());
                           infotxt+=s.toString()+"\n";
                       }
                       to_save_txt=infotxt;
                       this.jTextArea1.setText(infotxt);
                       this.jTextArea1.setCaretPosition(0);
                        setIconImage(Config.image);
                        updateUI();
                        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
                        Dimension d = getSize();
                        setLocation((screenSize.width-d.width)/2,
                                                        (screenSize.height-d.height)/2);
                        this.setAlwaysOnTop(true);
                        this.setVisible(true);
                       return;
                   }

               }
               if (type.equals("Alignment")) {
                   InfoAlignment info=new InfoAlignment(id);
                   if (info.getSequences().size()>1000) {
                       String title="Display | "+type+" | " +info.getName();
                       this.setTitle(title);
                       String txt="Warning. This group of Sequence(s) contains "+info.getSequences().size()+" elements\n"+
                                  "Only the first 100 will be shown.\n";
                       for (int i=0; i<100;i++) {
                           Sequence s=new Sequence(info.getSequences().get(i).getId());
                           txt+=s.toString()+"\n";
                       }
                       to_save_txt=txt;
                       this.jTextArea1.setText(txt);
                       this.jTextArea1.setCaretPosition(0);
                        setIconImage(Config.image);
                        updateUI();
                        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
                        Dimension d = getSize();
                        setLocation((screenSize.width-d.width)/2,
                                                        (screenSize.height-d.height)/2);
                        this.setAlwaysOnTop(true);
                        this.setVisible(true);
                       return;
                   }

               }

               Object bio=output.getBiologic();
               try {
                   //--Special case for blastHit
                       String title="Display | "+type+" | " +((Biologic)bio).getName();
                       this.setTitle(title);
                       String txt=((Biologic)bio).toString();
                       to_save_txt=txt;
                       this.jTextArea1.setText(txt);
                       this.jTextArea1.setCaretPosition(0);

                       if (type.equals("Sequence")||type.equals("MultipleSequences")||type.equals("Alignment")) {
                           this.FastajTextArea2.setText(((Biologic)bio).getFasta());
                           this.PhylipjTextArea3.setText(((Biologic)bio).getPhylip());
                           this.FastajTextArea2.setCaretPosition(0);
                           this.PhylipjTextArea3.setCaretPosition(0);
                           this.RapidEditjButton.setEnabled(true);
                           this.jTabbedPane1.setEnabledAt(1,true); //Fasta jTabbledPane
                           this.jTabbedPane1.setEnabledAt(2,true); //Phylip jTabbledPane
                       } else  if (type.equals("MultipleAlignments")) {
                           this.FastajTextArea2.setText(((Biologic)bio).getFasta());
                            this.PhylipjTextArea3.setText(((Biologic)bio).getPhylip());
                           this.FastajTextArea2.setCaretPosition(0);
                           this.PhylipjTextArea3.setCaretPosition(0);
                           this.jTabbedPane1.setEnabledAt(1,true); //Fasta jTabbledPane
                           this.jTabbedPane1.setEnabledAt(2,true); //Phylip jTabbledPane
                           //this.jTabbedPane1.removeTabAt(1);   //--Remove fasta pane
                       } else if (type.equals("Text")) {
                           this.FastajTextArea2.setText(((Biologic)bio).getNote());
                           this.FastajTextArea2.setCaretPosition(0);
                           this.FastajTextArea2.setEditable(false);
                           this.jTabbedPane1.setTitleAt(1, "Note");
                           this.jTabbedPane1.setEnabledAt(1,true); //Fasta jTabbledPane
                           this.jTabbedPane1.removeTabAt(2);
                       }  else {
                           this.jTabbedPane1.removeTabAt(1); //--Remove unused Pane
                           this.jTabbedPane1.removeTabAt(1);
                       }
                      
                        if (type.equals("Tree")||type.equals("Text")) {
                           this.RapidEditjButton.setEnabled(true);
                       }                   
               } catch(Exception e) {e.printStackTrace();}             
              
            }
        //}

        setIconImage(Config.image);
        updateUI();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension d = getSize();
        setLocation((screenSize.width-d.width)/2,
					(screenSize.height-d.height)/2);
        this.setAlwaysOnTop(true);
        this.setVisible(true);
    }

    public void display(Object obj) {
       //if (!(obj instanceof Biologic)) return;
               try {
                       if (obj==null) return;
                       String type=((Biologic)obj).getBiologicType();
                       String title="Display | "+type+" | " +((Biologic)obj).getName();
                       this.setTitle(title);

                       String txt=((Biologic)obj).toString();
                       to_save_txt=txt;
                       this.jTextArea1.setText(txt);
                       this.jTextArea1.setCaretPosition(0);

                       if (type.equals("Sequence")||type.equals("MultipleSequences")||type.equals("Alignment")) {
                           this.FastajTextArea2.setText(((Biologic)obj).getFasta());
                           this.PhylipjTextArea3.setText(((Biologic)obj).getPhylip());
                           this.FastajTextArea2.setCaretPosition(0);
                           this.PhylipjTextArea3.setCaretPosition(0);
                           this.RapidEditjButton.setEnabled(true);
                           this.jTabbedPane1.setEnabledAt(1,true); //Fasta jTabbledPane
                           this.jTabbedPane1.setEnabledAt(2,true); //Phylip jTabbledPane
                       } else if (type.equals("Text")) {
                           this.FastajTextArea2.setText(((Biologic)obj).getNote());
                           this.FastajTextArea2.setCaretPosition(0);
                           this.FastajTextArea2.setEditable(false);
                           this.jTabbedPane1.setTitleAt(1, "Note");
                           this.jTabbedPane1.setEnabledAt(1,true); //Fasta jTabbledPane
                           this.jTabbedPane1.removeTabAt(2);
                       }
                        else {
                          this.jTabbedPane1.removeTabAt(1); //--Remove unused Pane
                          this.jTabbedPane1.removeTabAt(1);
                       }
                        if (type.equals("Tree")||type.equals("Text")) {
                           this.RapidEditjButton.setEnabled(true);
                       }                                           
               } catch(Exception e) {e.printStackTrace();}

        setIconImage(Config.image);
        updateUI();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension d = getSize();
        setLocation((screenSize.width-d.width)/2,
					(screenSize.height-d.height)/2);
        this.setAlwaysOnTop(true);
        this.setVisible(true);
    }

      void Message(String text, String tooltip) {
        this.jStatusMessage.setEnabled(true);
        this.jStatusMessage.setForeground(new java.awt.Color(0, 51, 153));
        this.jStatusMessage.setToolTipText(tooltip);
        this.jStatusMessage.setText(text);
    }


    void MessageError(String text, String tooltip) {
        this.jStatusMessage.setEnabled(true);
        this.jStatusMessage.setForeground(Color.RED);
        this.jStatusMessage.setToolTipText(tooltip);
        this.jStatusMessage.setText(text);
    }
    
      public void saveImage(String filename) {
        BufferedImage bi;
        try {
            bi = new Robot().createScreenCapture(this.getBounds()); 
            ImageIO.write(bi, "png", new File(filename));
            this.setVisible(false);
        } catch (Exception ex) {
           Config.log("Unable to save "+filename+" dialog image");
        }            
    }

}
